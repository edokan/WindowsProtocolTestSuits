//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2 : PtfTestClassBase {
        
        public RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void FSCCTrans2QueryPathInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo FSCCTrans2QueryPathInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "FSCCTrans2QueryPathInfoResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(FSCCTrans2QueryPathInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S28\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S70\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S84\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S98\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S98");
                    this.Manager.Comment("reaching state \'S112\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S126\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S140\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0NegotiateResponseChecker)));
                    if ((temp2 == 0)) {
                        this.Manager.Comment("reaching state \'S154\'");
                        goto label0;
                    }
                    if ((temp2 == 1)) {
                        this.Manager.Comment("reaching state \'S155\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S182\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S196\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S210\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S224\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S238\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S252\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S266\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S280\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S294\'");
                                    bool temp1;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp1);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S308\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isSucceed of CheckPreviousVersion, state S308");
                                    this.Manager.Comment("reaching state \'S322\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileAlignmentInfor" +
                                            "mation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileAlignmentInformation);
                                    this.Manager.Comment("reaching state \'S336\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S350\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S364\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0SessionSetupResponseChecker)));
                        }
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0NegotiateResponseChecker)));
                label0:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S28");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S28");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S70");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S140");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S140, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S196");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S196");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S238");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S238");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S280");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S280, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S0FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S350");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S350");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S350");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S350");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S350");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S33\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S75\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S89\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp3);
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp3, "createPipeStatus of CreatePipeAndMailslot, state S103");
                    this.Manager.Comment("reaching state \'S117\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S145\'");
                    int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10NegotiateResponseChecker)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S165\'");
                        goto label1;
                    }
                    if ((temp5 == 1)) {
                        this.Manager.Comment("reaching state \'S164\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S187\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S201\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S215\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S229\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S243\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S257\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S271\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S285\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S299\'");
                                    bool temp4;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp4);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S313\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp4, "isSucceed of CheckPreviousVersion, state S313");
                                    this.Manager.Comment("reaching state \'S327\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileNameInformatio" +
                                            "n)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileNameInformation);
                                    this.Manager.Comment("reaching state \'S341\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S355\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S369\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10SessionSetupResponseChecker)));
                        }
                        goto label1;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10NegotiateResponseChecker)));
                label1:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S33");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S33");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S75");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S145");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S145");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S145, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S201");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S201");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S243");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S285");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S285, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S10FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S355");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S355");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S355");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S355");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S355");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S34\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S76\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S90\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp6);
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "createPipeStatus of CreatePipeAndMailslot, state S104");
                    this.Manager.Comment("reaching state \'S118\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S146\'");
                    int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12NegotiateResponseChecker)));
                    if ((temp8 == 0)) {
                        this.Manager.Comment("reaching state \'S167\'");
                        goto label2;
                    }
                    if ((temp8 == 1)) {
                        this.Manager.Comment("reaching state \'S166\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S188\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S202\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S216\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S230\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S244\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S258\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S272\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S286\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S300\'");
                                    bool temp7;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp7);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S314\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp7, "isSucceed of CheckPreviousVersion, state S314");
                                    this.Manager.Comment("reaching state \'S328\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileModeInformatio" +
                                            "n)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileModeInformation);
                                    this.Manager.Comment("reaching state \'S342\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S356\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S370\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12SessionSetupResponseChecker)));
                        }
                        goto label2;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12NegotiateResponseChecker)));
                label2:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S34");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S34");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S76");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S76");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S76");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S76");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S76");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S76");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S146");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S146");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S146, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S202");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S202");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S244");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S286");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S286, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S12FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S356");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S356");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S356");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S356");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S356");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S35\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S77\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S91\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp9);
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "createPipeStatus of CreatePipeAndMailslot, state S105");
                    this.Manager.Comment("reaching state \'S119\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S133\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S147\'");
                    int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14NegotiateResponseChecker)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S169\'");
                        goto label3;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S168\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S189\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S203\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S217\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S231\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S245\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S259\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S273\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S287\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S301\'");
                                    bool temp10;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp10);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S315\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp10, "isSucceed of CheckPreviousVersion, state S315");
                                    this.Manager.Comment("reaching state \'S329\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileInternalInform" +
                                            "ation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileInternalInformation);
                                    this.Manager.Comment("reaching state \'S343\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S357\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S371\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14SessionSetupResponseChecker)));
                        }
                        goto label3;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14NegotiateResponseChecker)));
                label3:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S35");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S35");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S77");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S147");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S147");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S147, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S203");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S203");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S245");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S287");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S287, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S14FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S357");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S357");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S357");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S357");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S357");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S36\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S78\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S92\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S106\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S106");
                    this.Manager.Comment("reaching state \'S120\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S134\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S148\'");
                    int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16NegotiateResponseChecker)));
                    if ((temp14 == 0)) {
                        this.Manager.Comment("reaching state \'S171\'");
                        goto label4;
                    }
                    if ((temp14 == 1)) {
                        this.Manager.Comment("reaching state \'S170\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S190\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S204\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S218\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S232\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S246\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S260\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S274\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S288\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S302\'");
                                    bool temp13;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp13);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S316\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp13, "isSucceed of CheckPreviousVersion, state S316");
                                    this.Manager.Comment("reaching state \'S330\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileEaInformation)" +
                                            "\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileEaInformation);
                                    this.Manager.Comment("reaching state \'S344\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S358\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S372\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16SessionSetupResponseChecker)));
                        }
                        goto label4;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16NegotiateResponseChecker)));
                label4:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S36");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S78");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S78");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S78");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S78");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S78");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S78");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S148");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S148, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S204");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S204");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S246");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S288");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S288, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S16FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S358");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S358");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S358");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S358");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S37\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S79\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S93\'");
                    bool temp15;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp15);
                    this.Manager.Comment("reaching state \'S107\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "createPipeStatus of CreatePipeAndMailslot, state S107");
                    this.Manager.Comment("reaching state \'S121\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S135\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S149\'");
                    int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18NegotiateResponseChecker)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S173\'");
                        goto label5;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S172\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S191\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S205\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S219\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S233\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S247\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S261\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S275\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S289\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S303\'");
                                    bool temp16;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp16);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S317\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp16, "isSucceed of CheckPreviousVersion, state S317");
                                    this.Manager.Comment("reaching state \'S331\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileCompressionInf" +
                                            "ormation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileCompressionInformation);
                                    this.Manager.Comment("reaching state \'S345\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S359\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S373\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18SessionSetupResponseChecker)));
                        }
                        goto label5;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18NegotiateResponseChecker)));
                label5:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S37");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S79");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S149");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S149");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S149, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S205");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S205");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S247");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S289");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S289, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S18FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S359");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S359");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S359");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S359");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S359");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S29\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S71\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S85\'");
                    bool temp18;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp18);
                    this.Manager.Comment("reaching state \'S99\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp18, "createPipeStatus of CreatePipeAndMailslot, state S99");
                    this.Manager.Comment("reaching state \'S113\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S127\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S141\'");
                    int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2NegotiateResponseChecker)));
                    if ((temp20 == 0)) {
                        this.Manager.Comment("reaching state \'S157\'");
                        goto label6;
                    }
                    if ((temp20 == 1)) {
                        this.Manager.Comment("reaching state \'S156\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S183\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S197\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S211\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S225\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S239\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S253\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S267\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S281\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S295\'");
                                    bool temp19;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp19);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S309\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp19, "isSucceed of CheckPreviousVersion, state S309");
                                    this.Manager.Comment("reaching state \'S323\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileStreamInformat" +
                                            "ion)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileStreamInformation);
                                    this.Manager.Comment("reaching state \'S337\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S351\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S365\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2SessionSetupResponseChecker)));
                        }
                        goto label6;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2NegotiateResponseChecker)));
                label6:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S29");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S29");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S71");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S141");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S141, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S239");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S239");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S281");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S281, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S2FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S351");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S351");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S351");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S351");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S351");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S38\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S80\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S94\'");
                    bool temp21;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp21);
                    this.Manager.Comment("reaching state \'S108\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "createPipeStatus of CreatePipeAndMailslot, state S108");
                    this.Manager.Comment("reaching state \'S122\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S136\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S150\'");
                    int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20NegotiateResponseChecker)));
                    if ((temp23 == 0)) {
                        this.Manager.Comment("reaching state \'S175\'");
                        goto label7;
                    }
                    if ((temp23 == 1)) {
                        this.Manager.Comment("reaching state \'S174\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S192\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S206\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S220\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S234\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S248\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S262\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S276\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S290\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S304\'");
                                    bool temp22;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp22);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S318\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp22, "isSucceed of CheckPreviousVersion, state S318");
                                    this.Manager.Comment("reaching state \'S332\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileBasicInformati" +
                                            "on)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, ((Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel)(0)));
                                    this.Manager.Comment("reaching state \'S346\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S360\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S374\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20SessionSetupResponseChecker)));
                        }
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20NegotiateResponseChecker)));
                label7:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S38");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S80");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S150");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S150");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S150, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S248");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S290");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S290, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S290");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S290");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S20FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S360");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S360");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S360");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S360");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S360");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S39\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S81\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S95\'");
                    bool temp24;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp24);
                    this.Manager.Comment("reaching state \'S109\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "createPipeStatus of CreatePipeAndMailslot, state S109");
                    this.Manager.Comment("reaching state \'S123\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S137\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S151\'");
                    int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22NegotiateResponseChecker)));
                    if ((temp26 == 0)) {
                        this.Manager.Comment("reaching state \'S177\'");
                        goto label8;
                    }
                    if ((temp26 == 1)) {
                        this.Manager.Comment("reaching state \'S176\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S193\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S207\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S221\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S235\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S249\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S263\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S277\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S291\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S305\'");
                                    bool temp25;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp25);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S319\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp25, "isSucceed of CheckPreviousVersion, state S319");
                                    this.Manager.Comment("reaching state \'S333\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileAttributeTagIn" +
                                            "formation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileAttributeTagInformation);
                                    this.Manager.Comment("reaching state \'S347\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S361\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S375\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22SessionSetupResponseChecker)));
                        }
                        goto label8;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22NegotiateResponseChecker)));
                label8:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S39");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S39");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S81");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S151");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S151");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S151, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S249");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S291");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S291, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S22FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S361");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S361");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S361");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S361");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S361");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S40\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S82\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S96\'");
                    bool temp27;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp27);
                    this.Manager.Comment("reaching state \'S110\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp27, "createPipeStatus of CreatePipeAndMailslot, state S110");
                    this.Manager.Comment("reaching state \'S124\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S138\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S152\'");
                    int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24NegotiateResponseChecker)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S179\'");
                        goto label9;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S178\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S194\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S208\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S222\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S236\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S250\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S264\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S278\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S292\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S306\'");
                                    bool temp28;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp28);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S320\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp28, "isSucceed of CheckPreviousVersion, state S320");
                                    this.Manager.Comment("reaching state \'S334\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileAlternateNameI" +
                                            "nformation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileAlternateNameInformation);
                                    this.Manager.Comment("reaching state \'S348\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S362\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S376\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24SessionSetupResponseChecker)));
                        }
                        goto label9;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24NegotiateResponseChecker)));
                label9:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S40");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S40");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S82");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S152");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S152, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S208");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S208");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S250");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S292");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S292, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S292");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S292");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S24FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S362");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S362");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S362");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S362");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S362");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S41\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S83\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S97\'");
                    bool temp30;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp30);
                    this.Manager.Comment("reaching state \'S111\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp30, "createPipeStatus of CreatePipeAndMailslot, state S111");
                    this.Manager.Comment("reaching state \'S125\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S139\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S153\'");
                    int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26NegotiateResponseChecker)));
                    if ((temp32 == 0)) {
                        this.Manager.Comment("reaching state \'S181\'");
                        goto label10;
                    }
                    if ((temp32 == 1)) {
                        this.Manager.Comment("reaching state \'S180\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S195\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S209\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S223\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S237\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S251\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S265\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S279\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S293\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S307\'");
                                    bool temp31;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp31);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S321\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp31, "isSucceed of CheckPreviousVersion, state S321");
                                    this.Manager.Comment("reaching state \'S335\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileAccessInformat" +
                                            "ion)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileAccessInformation);
                                    this.Manager.Comment("reaching state \'S349\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S363\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S377\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26SessionSetupResponseChecker)));
                        }
                        goto label10;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26NegotiateResponseChecker)));
                label10:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S41");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S41");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S83");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S153");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S153, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S209");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S209");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S251");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S293");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S293, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S26FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S363");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S363");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S363");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S363");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S363");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S30\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S72\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S86\'");
                    bool temp33;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp33);
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp33, "createPipeStatus of CreatePipeAndMailslot, state S100");
                    this.Manager.Comment("reaching state \'S114\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S128\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S142\'");
                    int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4NegotiateResponseChecker)));
                    if ((temp35 == 0)) {
                        this.Manager.Comment("reaching state \'S159\'");
                        goto label11;
                    }
                    if ((temp35 == 1)) {
                        this.Manager.Comment("reaching state \'S158\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S184\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S198\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S212\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S226\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S240\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S254\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S268\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S282\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S296\'");
                                    bool temp34;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp34);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S310\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp34, "isSucceed of CheckPreviousVersion, state S310");
                                    this.Manager.Comment("reaching state \'S324\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileStandardInform" +
                                            "ation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, ((Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel)(1)));
                                    this.Manager.Comment("reaching state \'S338\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S352\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S366\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4SessionSetupResponseChecker)));
                        }
                        goto label11;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4NegotiateResponseChecker)));
                label11:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S30");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S30");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S72");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S72");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S72");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S72");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S72");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S72");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S142");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S142, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S240");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S282");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S282, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S4FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S352");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S352");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S352");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S352");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S352");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S31\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S73\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S87\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp36);
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "createPipeStatus of CreatePipeAndMailslot, state S101");
                    this.Manager.Comment("reaching state \'S115\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S129\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S143\'");
                    int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6NegotiateResponseChecker)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S161\'");
                        goto label12;
                    }
                    if ((temp38 == 1)) {
                        this.Manager.Comment("reaching state \'S160\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S185\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S199\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S213\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S227\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S241\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S255\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S269\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S283\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S297\'");
                                    bool temp37;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp37);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S311\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp37, "isSucceed of CheckPreviousVersion, state S311");
                                    this.Manager.Comment("reaching state \'S325\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FilePositionInform" +
                                            "ation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FilePositionInformation);
                                    this.Manager.Comment("reaching state \'S339\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S353\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S367\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6SessionSetupResponseChecker)));
                        }
                        goto label12;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6NegotiateResponseChecker)));
                label12:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S31");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S31");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S73");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S143");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S143, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S199");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S199");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S241");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S283");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S283, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S6FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S353");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S353");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S353");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S353");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S353");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8() {
            this.Manager.BeginTest("RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S32\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S74\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S88\'");
                    bool temp39;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp39);
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp39, "createPipeStatus of CreatePipeAndMailslot, state S102");
                    this.Manager.Comment("reaching state \'S116\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S130\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S144\'");
                    int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8NegotiateResponseChecker)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S163\'");
                        goto label13;
                    }
                    if ((temp41 == 1)) {
                        this.Manager.Comment("reaching state \'S162\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S186\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S200\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8SessionSetupResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S214\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S228\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S242\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S256\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,True" +
                                        ",False,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S270\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S284\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S298\'");
                                    bool temp40;
                                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                        "Element"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                                    "Element"}, new object[] {
                                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp40);
                                    this.Manager.Checkpoint("MS-SMB_R8554");
                                    this.Manager.Comment("reaching state \'S312\'");
                                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp40, "isSucceed of CheckPreviousVersion, state S312");
                                    this.Manager.Comment("reaching state \'S326\'");
                                    this.Manager.Comment("executing step \'call FSCCTrans2QueryPathInfoRequest(5,1,1,True,FileNetworkOpenInf" +
                                            "ormation)\'");
                                    this.ISmbAdapterInstance.FSCCTrans2QueryPathInfoRequest(5, 1, 1, true, Microsoft.Protocol.TestSuites.Smb.FSCCTransaction2QueryPathInforLevel.FileNetworkOpenInformation);
                                    this.Manager.Comment("reaching state \'S340\'");
                                    this.Manager.Comment("checking step \'return FSCCTrans2QueryPathInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S354\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8FSCCTrans2QueryPathInfoResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S368\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.FSCCTrans2QueryPathInfoResponseInfo, null, new FSCCTrans2QueryPathInfoResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8FSCCTrans2QueryPathInfoResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8TreeConnectResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8SessionSetupResponseChecker)));
                        }
                        goto label13;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8NegotiateResponseChecker)));
                label13:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S32");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S32");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S74");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S74");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S74");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S74");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S74");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S74");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S144");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S144, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S200");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S200");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S242");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileOpened,FileExists},True,Tru" +
                    "e,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S284");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S284, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2S8FSCCTrans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FSCCTrans2QueryPathInfoResponse(5,1,1,True,Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of FSCCTrans2QueryPathInfoResponse, state S354");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FSCCTrans2QueryPathInfoResponse, state S354");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FSCCTrans2QueryPathInfoResponse, state S354");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FSCCTrans2QueryPathInfoResponse, state S354");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FSCCTrans2QueryPathInfoResponse, state S354");
        }
        #endregion
    }
}
