//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2 : PtfTestClassBase {
        
        public RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2QueryFsInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2SetFsInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo Trans2QueryFsInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2QueryFsInfoResponse");
        
        static System.Reflection.EventInfo Trans2SetFsInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2SetFsInfoResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2QueryFsInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2SetFsInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S8\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S20\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S24\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S28\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S28");
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S40\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S44\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S48\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S52\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0SessionSetupResponseChecker)));
                        if ((temp4 == 0)) {
                            this.Manager.Comment("reaching state \'S56\'");
                            goto label3;
                        }
                        if ((temp4 == 1)) {
                            this.Manager.Comment("reaching state \'S57\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S64\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S68\'");
                            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0TreeConnectResponseChecker)));
                            if ((temp3 == 0)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72();
                                goto label2;
                            }
                            if ((temp3 == 1)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72();
                                goto label2;
                            }
                            if ((temp3 == 2)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72();
                                goto label2;
                            }
                            if ((temp3 == 3)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72();
                                goto label2;
                            }
                            if ((temp3 == 4)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72();
                                goto label2;
                            }
                            if ((temp3 == 5)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72();
                                goto label2;
                            }
                            if ((temp3 == 6)) {
                                this.Manager.Comment("reaching state \'S73\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test2.txt\",Disk,True,Fal" +
                                        "se,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S80();
                                goto label2;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0TreeConnectResponseChecker)));
                        label2:
;
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0SessionSetupResponseChecker)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S8");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S8");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S20");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S40");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S40, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S52");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S52");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S52");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S52");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S68");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S72() {
            this.Manager.Comment("reaching state \'S72\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S68");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S68");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S68");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S68");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S80() {
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateRequestInfo, null, new CreateRequestDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S83\'");
            int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker4)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call Trans2QueryFsInfoRequest(5,1,1,True,True,FileFsSizeInformati" +
                        "on,False,0)\'");
                this.ISmbAdapterInstance.Trans2QueryFsInfoRequest(5, 1, 1, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileFsSizeInformation, false, 0);
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return Trans2QueryFsInfoRequest\'");
                this.Manager.Comment("reaching state \'S101\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.Trans2QueryFsInfoResponseInfo, null, new Trans2QueryFsInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0Trans2QueryFsInfoResponseChecker)));
                if ((temp1 == 0)) {
                    this.Manager.Comment("reaching state \'S108\'");
                    goto label0;
                }
                if ((temp1 == 1)) {
                    this.Manager.Comment("reaching state \'S109\'");
                    goto label0;
                }
                if ((temp1 == 2)) {
                    this.Manager.Comment("reaching state \'S107\'");
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.Trans2QueryFsInfoResponseInfo, null, new Trans2QueryFsInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0Trans2QueryFsInfoResponseChecker)));
            label0:
;
                goto label1;
            }
            if ((temp2 == 1)) {
                this.Manager.Comment("reaching state \'S87\'");
                goto label1;
            }
            if ((temp2 == 2)) {
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S102\'");
                goto label1;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker4)));
        label1:
;
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S83");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S83, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S101");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S101");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S101");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S101");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0Trans2QueryFsInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryFsInfoResponse(5,1,1,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryFsInfoResponse, state S101");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryFsInfoResponse, state S101");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryFsInfoResponse, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of Trans2QueryFsInfoResponse, state S101");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryFsInfoResponse, state S101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9291, MS-SMB_R30032");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9291");
            this.Manager.Checkpoint("MS-SMB_R30032");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S83");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S83");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S83");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S83");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S9\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S21\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S25\'");
                    bool temp5;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp5);
                    this.Manager.Comment("reaching state \'S29\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "createPipeStatus of CreatePipeAndMailslot, state S29");
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S37\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S41\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S45\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S49\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S53\'");
                        int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2SessionSetupResponseChecker)));
                        if ((temp9 == 0)) {
                            this.Manager.Comment("reaching state \'S59\'");
                            goto label7;
                        }
                        if ((temp9 == 1)) {
                            this.Manager.Comment("reaching state \'S58\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S65\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S69\'");
                            int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2TreeConnectResponseChecker)));
                            if ((temp8 == 0)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75();
                                goto label6;
                            }
                            if ((temp8 == 1)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75();
                                goto label6;
                            }
                            if ((temp8 == 2)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75();
                                goto label6;
                            }
                            if ((temp8 == 3)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75();
                                goto label6;
                            }
                            if ((temp8 == 4)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75();
                                goto label6;
                            }
                            if ((temp8 == 5)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75();
                                goto label6;
                            }
                            if ((temp8 == 6)) {
                                this.Manager.Comment("reaching state \'S74\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test2.txt\",Disk,True,Fal" +
                                        "se,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S81\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S84\'");
                                int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker4)));
                                if ((temp7 == 0)) {
                                    this.Manager.Comment("reaching state \'S89\'");
                                    this.Manager.Comment("executing step \'call Trans2QueryFsInfoRequest(5,1,1,True,False,SmbQueryFsAttribut" +
                                            "eInfo,False,0)\'");
                                    this.ISmbAdapterInstance.Trans2QueryFsInfoRequest(5, 1, 1, true, false, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(1)), false, 0);
                                    this.Manager.Comment("reaching state \'S97\'");
                                    this.Manager.Comment("checking step \'return Trans2QueryFsInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S103\'");
                                    int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.Trans2QueryFsInfoResponseInfo, null, new Trans2QueryFsInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2Trans2QueryFsInfoResponseChecker)));
                                    if ((temp6 == 0)) {
                                        this.Manager.Comment("reaching state \'S111\'");
                                        goto label4;
                                    }
                                    if ((temp6 == 1)) {
                                        this.Manager.Comment("reaching state \'S112\'");
                                        goto label4;
                                    }
                                    if ((temp6 == 2)) {
                                        this.Manager.Comment("reaching state \'S110\'");
                                        goto label4;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.Trans2QueryFsInfoResponseInfo, null, new Trans2QueryFsInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2Trans2QueryFsInfoResponseChecker)));
                                label4:
;
                                    goto label5;
                                }
                                if ((temp7 == 1)) {
                                    this.Manager.Comment("reaching state \'S90\'");
                                    goto label5;
                                }
                                if ((temp7 == 2)) {
                                    this.Manager.Comment("reaching state \'S91\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S98\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S104\'");
                                    goto label5;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker4)));
                            label5:
;
                                goto label6;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2TreeConnectResponseChecker)));
                        label6:
;
                            goto label7;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2SessionSetupResponseChecker)));
                    label7:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S9");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S9");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S21");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S41");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S41");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S41");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S41, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S41");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S75() {
            this.Manager.Comment("reaching state \'S75\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S69");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S84");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S84, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S103");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S103");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2Trans2QueryFsInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryFsInfoResponse(5,1,1,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryFsInfoResponse, state S103");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryFsInfoResponse, state S103");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryFsInfoResponse, state S103");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of Trans2QueryFsInfoResponse, state S103");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryFsInfoResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9291");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9291");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S84");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S84");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S2ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S84");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S84");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S10\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S22\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S26\'");
                    bool temp10;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp10);
                    this.Manager.Comment("reaching state \'S30\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp10, "createPipeStatus of CreatePipeAndMailslot, state S30");
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S42\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S46\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S50\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S54\'");
                        int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4SessionSetupResponseChecker)));
                        if ((temp12 == 0)) {
                            this.Manager.Comment("reaching state \'S61\'");
                            goto label9;
                        }
                        if ((temp12 == 1)) {
                            this.Manager.Comment("reaching state \'S60\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S66\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S70\'");
                            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4TreeConnectResponseChecker)));
                            if ((temp11 == 0)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77();
                                goto label8;
                            }
                            if ((temp11 == 1)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77();
                                goto label8;
                            }
                            if ((temp11 == 2)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77();
                                goto label8;
                            }
                            if ((temp11 == 3)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77();
                                goto label8;
                            }
                            if ((temp11 == 4)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77();
                                goto label8;
                            }
                            if ((temp11 == 5)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77();
                                goto label8;
                            }
                            if ((temp11 == 6)) {
                                this.Manager.Comment("reaching state \'S76\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test2.txt\",Disk,True,Fal" +
                                        "se,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S80();
                                goto label8;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4TreeConnectResponseChecker)));
                        label8:
;
                            goto label9;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4SessionSetupResponseChecker)));
                    label9:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S10");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S10");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S22");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S22");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S22");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S22");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S22");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S22");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S42");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S42, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S54");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S54");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S54");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S54");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S70");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S77() {
            this.Manager.Comment("reaching state \'S77\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S70");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S70");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S70");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S70");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S70");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S70");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S11\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S23\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S27\'");
                    bool temp13;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp13);
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp13, "createPipeStatus of CreatePipeAndMailslot, state S31");
                    this.Manager.Comment("reaching state \'S35\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S43\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S47\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S51\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S55\'");
                        int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6SessionSetupResponseChecker)));
                        if ((temp17 == 0)) {
                            this.Manager.Comment("reaching state \'S63\'");
                            goto label13;
                        }
                        if ((temp17 == 1)) {
                            this.Manager.Comment("reaching state \'S62\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S67\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S71\'");
                            int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6TreeConnectResponseChecker)));
                            if ((temp16 == 0)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78();
                                goto label12;
                            }
                            if ((temp16 == 1)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78();
                                goto label12;
                            }
                            if ((temp16 == 2)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78();
                                goto label12;
                            }
                            if ((temp16 == 3)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78();
                                goto label12;
                            }
                            if ((temp16 == 4)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78();
                                goto label12;
                            }
                            if ((temp16 == 5)) {
                                RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78();
                                goto label12;
                            }
                            if ((temp16 == 6)) {
                                this.Manager.Comment("reaching state \'S79\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test2.txt\",Disk,True,Fal" +
                                        "se,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S82\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S85\'");
                                int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker4)));
                                if ((temp15 == 0)) {
                                    this.Manager.Comment("reaching state \'S92\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFsInfoRequest(5,1,1,True,True,False,False,FileFsCon" +
                                            "trolInformaiton,0,True,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFsInfoRequest(5, 1, 1, true, true, false, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileFsControlInformaiton, 0, true, 0);
                                    this.Manager.Comment("reaching state \'S99\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFsInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S105\'");
                                    int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.Trans2SetFsInfoResponseInfo, null, new Trans2SetFsInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6Trans2SetFsInfoResponseChecker)));
                                    if ((temp14 == 0)) {
                                        this.Manager.Comment("reaching state \'S114\'");
                                        goto label10;
                                    }
                                    if ((temp14 == 1)) {
                                        this.Manager.Comment("reaching state \'S115\'");
                                        goto label10;
                                    }
                                    if ((temp14 == 2)) {
                                        this.Manager.Comment("reaching state \'S113\'");
                                        goto label10;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.Trans2SetFsInfoResponseInfo, null, new Trans2SetFsInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6Trans2SetFsInfoResponseChecker)));
                                label10:
;
                                    goto label11;
                                }
                                if ((temp15 == 1)) {
                                    this.Manager.Comment("reaching state \'S93\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S100\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S106\'");
                                    goto label11;
                                }
                                if ((temp15 == 2)) {
                                    this.Manager.Comment("reaching state \'S94\'");
                                    goto label11;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker4)));
                            label11:
;
                                goto label12;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6TreeConnectResponseChecker)));
                        label12:
;
                            goto label13;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6SessionSetupResponseChecker)));
                    label13:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S11");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S11");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S23");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S43");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S43, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S55");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S55");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S78() {
            this.Manager.Comment("reaching state \'S78\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S71");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S85");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S85, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S105");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S105");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6Trans2SetFsInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFsInfoResponse(5,1,1,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFsInfoResponse, state S105");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFsInfoResponse, state S105");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFsInfoResponse, state S105");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of Trans2SetFsInfoResponse, state S105");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFsInfoResponse, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9307, MS-SMB_R30026");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9307");
            this.Manager.Checkpoint("MS-SMB_R30026");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S85");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S85");
        }
        
        private void RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2S6ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S85");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S85");
        }
        #endregion
    }
}
