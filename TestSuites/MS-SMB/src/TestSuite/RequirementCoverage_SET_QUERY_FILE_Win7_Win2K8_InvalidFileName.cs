//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName : PtfTestClassBase {
        
        public RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2SetFileInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.EventInfo Trans2SetFileInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2SetFileInfoResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2SetFileInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S16\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S40\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S48\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S56\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S56");
                    this.Manager.Comment("reaching state \'S64\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S72\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S80\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S88\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S96\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S104\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0SessionSetupResponseChecker)));
                        if ((temp4 == 0)) {
                            this.Manager.Comment("reaching state \'S112\'");
                            goto label3;
                        }
                        if ((temp4 == 1)) {
                            this.Manager.Comment("reaching state \'S113\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S128\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S136\'");
                            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0TreeConnectResponseChecker)));
                            if ((temp3 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145();
                                goto label2;
                            }
                            if ((temp3 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145();
                                goto label2;
                            }
                            if ((temp3 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145();
                                goto label2;
                            }
                            if ((temp3 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145();
                                goto label2;
                            }
                            if ((temp3 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145();
                                goto label2;
                            }
                            if ((temp3 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145();
                                goto label2;
                            }
                            if ((temp3 == 6)) {
                                this.Manager.Comment("reaching state \'S144\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, true);
                                this.Manager.Comment("reaching state \'S160\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S167\'");
                                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker7)));
                                if ((temp2 == 0)) {
                                    this.Manager.Comment("reaching state \'S174\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,True,False,True,FileRenameInf" +
                                            "ormation,0,\"Dir1\\Test1.txt\",False,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, true, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "Dir1\\Test1.txt", false, 0);
                                    this.Manager.Comment("reaching state \'S194\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S207\'");
                                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker4)));
                                    if ((temp1 == 0)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS220();
                                        goto label0;
                                    }
                                    if ((temp1 == 1)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS220();
                                        goto label0;
                                    }
                                    if ((temp1 == 2)) {
                                        this.Manager.Comment("reaching state \'S221\'");
                                        goto label0;
                                    }
                                    if ((temp1 == 3)) {
                                        this.Manager.Comment("reaching state \'S222\'");
                                        goto label0;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker4)));
                                label0:
;
                                    goto label1;
                                }
                                if ((temp2 == 1)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS175();
                                    goto label1;
                                }
                                if ((temp2 == 2)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS175();
                                    goto label1;
                                }
                                if ((temp2 == 3)) {
                                    this.Manager.Comment("reaching state \'S176\'");
                                    goto label1;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker7)));
                            label1:
;
                                goto label2;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0TreeConnectResponseChecker)));
                        label2:
;
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0SessionSetupResponseChecker)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S16");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S16");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S40");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S80");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S80, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS145() {
            this.Manager.Comment("reaching state \'S145\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S136");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S136");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S167");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S167, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9587");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9587");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS220() {
            this.Manager.Comment("reaching state \'S220\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S246\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430, MS-SMB_R30034");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
            this.Manager.Checkpoint("MS-SMB_R30034");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S207");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S207");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S167");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS175() {
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S208\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S167");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS0ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S167");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S45\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S53\'");
                    bool temp5;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp5);
                    this.Manager.Comment("reaching state \'S61\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "createPipeStatus of CreatePipeAndMailslot, state S61");
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S77\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S85\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S93\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S101\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S109\'");
                        int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10SessionSetupResponseChecker)));
                        if ((temp8 == 0)) {
                            this.Manager.Comment("reaching state \'S123\'");
                            goto label6;
                        }
                        if ((temp8 == 1)) {
                            this.Manager.Comment("reaching state \'S122\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S133\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S141\'");
                            int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10TreeConnectResponseChecker)));
                            if ((temp7 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155();
                                goto label5;
                            }
                            if ((temp7 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155();
                                goto label5;
                            }
                            if ((temp7 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155();
                                goto label5;
                            }
                            if ((temp7 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155();
                                goto label5;
                            }
                            if ((temp7 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155();
                                goto label5;
                            }
                            if ((temp7 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155();
                                goto label5;
                            }
                            if ((temp7 == 6)) {
                                this.Manager.Comment("reaching state \'S154\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Tru" +
                                        "e,True,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, true, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS165();
                                goto label5;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10TreeConnectResponseChecker)));
                        label5:
;
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10SessionSetupResponseChecker)));
                    label6:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S21");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S21");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S45");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S85");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S85, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS155() {
            this.Manager.Comment("reaching state \'S155\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S141");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S141");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS165() {
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateRequestInfo, null, new CreateRequestDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S172\'");
            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker2)));
            if ((temp6 == 0)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S217\'");
                goto label4;
            }
            if ((temp6 == 1)) {
                this.Manager.Comment("reaching state \'S190\'");
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker2)));
        label4:
;
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S172");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS10ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S172");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S22\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S46\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S54\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp9);
                    this.Manager.Comment("reaching state \'S62\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "createPipeStatus of CreatePipeAndMailslot, state S62");
                    this.Manager.Comment("reaching state \'S70\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S78\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S86\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S94\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S102\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S110\'");
                        int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12SessionSetupResponseChecker)));
                        if ((temp11 == 0)) {
                            this.Manager.Comment("reaching state \'S125\'");
                            goto label8;
                        }
                        if ((temp11 == 1)) {
                            this.Manager.Comment("reaching state \'S124\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S134\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S142\'");
                            int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12TreeConnectResponseChecker)));
                            if ((temp10 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156();
                                goto label7;
                            }
                            if ((temp10 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156();
                                goto label7;
                            }
                            if ((temp10 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156();
                                goto label7;
                            }
                            if ((temp10 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156();
                                goto label7;
                            }
                            if ((temp10 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156();
                                goto label7;
                            }
                            if ((temp10 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156();
                                goto label7;
                            }
                            if ((temp10 == 6)) {
                                this.Manager.Comment("reaching state \'S157\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Tru" +
                                        "e,True,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, true, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS165();
                                goto label7;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12TreeConnectResponseChecker)));
                        label7:
;
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12SessionSetupResponseChecker)));
                    label8:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S22");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S22");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S46");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S86");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S86");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S86, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S142");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS156() {
            this.Manager.Comment("reaching state \'S156\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S142");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S142");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S142");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS12TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S142");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S142");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S23\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Enabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, false, false);
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S47\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S55\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S63\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S63");
                    this.Manager.Comment("reaching state \'S71\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S79\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S87\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S95\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S103\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S111\'");
                        int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14SessionSetupResponseChecker)));
                        if ((temp16 == 0)) {
                            this.Manager.Comment("reaching state \'S127\'");
                            goto label12;
                        }
                        if ((temp16 == 1)) {
                            this.Manager.Comment("reaching state \'S126\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S135\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S143\'");
                            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14TreeConnectResponseChecker)));
                            if ((temp15 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159();
                                goto label11;
                            }
                            if ((temp15 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159();
                                goto label11;
                            }
                            if ((temp15 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159();
                                goto label11;
                            }
                            if ((temp15 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159();
                                goto label11;
                            }
                            if ((temp15 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159();
                                goto label11;
                            }
                            if ((temp15 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159();
                                goto label11;
                            }
                            if ((temp15 == 6)) {
                                this.Manager.Comment("reaching state \'S158\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, true);
                                this.Manager.Comment("reaching state \'S166\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S173\'");
                                int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker7)));
                                if ((temp14 == 0)) {
                                    this.Manager.Comment("reaching state \'S191\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,True,False,True,Invalid,0,\"Di" +
                                            "r1\\Test1.txt\",False,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, true, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, "Dir1\\Test1.txt", false, 0);
                                    this.Manager.Comment("reaching state \'S205\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S218\'");
                                    int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker4)));
                                    if ((temp13 == 0)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS237();
                                        goto label9;
                                    }
                                    if ((temp13 == 1)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS237();
                                        goto label9;
                                    }
                                    if ((temp13 == 2)) {
                                        this.Manager.Comment("reaching state \'S238\'");
                                        goto label9;
                                    }
                                    if ((temp13 == 3)) {
                                        this.Manager.Comment("reaching state \'S239\'");
                                        goto label9;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker4)));
                                label9:
;
                                    goto label10;
                                }
                                if ((temp14 == 1)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS192();
                                    goto label10;
                                }
                                if ((temp14 == 2)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS192();
                                    goto label10;
                                }
                                if ((temp14 == 3)) {
                                    this.Manager.Comment("reaching state \'S193\'");
                                    goto label10;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker7)));
                            label10:
;
                                goto label11;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14TreeConnectResponseChecker)));
                        label11:
;
                            goto label12;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14SessionSetupResponseChecker)));
                    label12:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S23");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S23");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S47");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S87");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S87");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S87, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S111");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S111");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS159() {
            this.Manager.Comment("reaching state \'S159\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S143");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S143");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S173");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S173, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S218");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS237() {
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S251\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S218");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30035");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30035");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S218");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S173");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS192() {
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S219\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S173");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS14ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S173");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S17\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S41\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S49\'");
                    bool temp17;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp17);
                    this.Manager.Comment("reaching state \'S57\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp17, "createPipeStatus of CreatePipeAndMailslot, state S57");
                    this.Manager.Comment("reaching state \'S65\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S73\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S81\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S89\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S97\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S105\'");
                        int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2SessionSetupResponseChecker)));
                        if ((temp21 == 0)) {
                            this.Manager.Comment("reaching state \'S115\'");
                            goto label16;
                        }
                        if ((temp21 == 1)) {
                            this.Manager.Comment("reaching state \'S114\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S129\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S137\'");
                            int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2TreeConnectResponseChecker)));
                            if ((temp20 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147();
                                goto label15;
                            }
                            if ((temp20 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147();
                                goto label15;
                            }
                            if ((temp20 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147();
                                goto label15;
                            }
                            if ((temp20 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147();
                                goto label15;
                            }
                            if ((temp20 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147();
                                goto label15;
                            }
                            if ((temp20 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147();
                                goto label15;
                            }
                            if ((temp20 == 6)) {
                                this.Manager.Comment("reaching state \'S146\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, true);
                                this.Manager.Comment("reaching state \'S161\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S168\'");
                                int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker7)));
                                if ((temp19 == 0)) {
                                    this.Manager.Comment("reaching state \'S177\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,True,False,True,Invalid,0,\"Di" +
                                            "r1\\Test1.txt\",False,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, true, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, "Dir1\\Test1.txt", false, 0);
                                    this.Manager.Comment("reaching state \'S196\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S209\'");
                                    int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker4)));
                                    if ((temp18 == 0)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS223();
                                        goto label13;
                                    }
                                    if ((temp18 == 1)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS223();
                                        goto label13;
                                    }
                                    if ((temp18 == 2)) {
                                        this.Manager.Comment("reaching state \'S224\'");
                                        goto label13;
                                    }
                                    if ((temp18 == 3)) {
                                        this.Manager.Comment("reaching state \'S225\'");
                                        goto label13;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker4)));
                                label13:
;
                                    goto label14;
                                }
                                if ((temp19 == 1)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS178();
                                    goto label14;
                                }
                                if ((temp19 == 2)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS178();
                                    goto label14;
                                }
                                if ((temp19 == 3)) {
                                    this.Manager.Comment("reaching state \'S179\'");
                                    goto label14;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker7)));
                            label14:
;
                                goto label15;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2TreeConnectResponseChecker)));
                        label15:
;
                            goto label16;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2SessionSetupResponseChecker)));
                    label16:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S17");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S17");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S41");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S81");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S81, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S81");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S105");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S105");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S105");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S105");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S105");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S105");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS147() {
            this.Manager.Comment("reaching state \'S147\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S137");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S137");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S168");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S168, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S209");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS223() {
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S247\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S209");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S209");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30035");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30035");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S168");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS178() {
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S210\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S168");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS2ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S168");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S18\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S42\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S50\'");
                    bool temp22;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp22);
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp22, "createPipeStatus of CreatePipeAndMailslot, state S58");
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S74\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S82\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S98\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S106\'");
                        int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4SessionSetupResponseChecker)));
                        if ((temp26 == 0)) {
                            this.Manager.Comment("reaching state \'S117\'");
                            goto label20;
                        }
                        if ((temp26 == 1)) {
                            this.Manager.Comment("reaching state \'S116\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S130\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S138\'");
                            int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4TreeConnectResponseChecker)));
                            if ((temp25 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149();
                                goto label19;
                            }
                            if ((temp25 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149();
                                goto label19;
                            }
                            if ((temp25 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149();
                                goto label19;
                            }
                            if ((temp25 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149();
                                goto label19;
                            }
                            if ((temp25 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149();
                                goto label19;
                            }
                            if ((temp25 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149();
                                goto label19;
                            }
                            if ((temp25 == 6)) {
                                this.Manager.Comment("reaching state \'S148\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, true);
                                this.Manager.Comment("reaching state \'S162\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S169\'");
                                int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker7)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker8)));
                                if ((temp24 == 0)) {
                                    this.Manager.Comment("reaching state \'S180\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,True,True,True,FileRenameInfo" +
                                            "rmation,0,\"Dir1\\Test1.txt\",True,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, true, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "Dir1\\Test1.txt", true, 0);
                                    this.Manager.Comment("reaching state \'S198\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S211\'");
                                    int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4Trans2SetFileInfoResponseChecker)));
                                    if ((temp23 == 0)) {
                                        this.Manager.Comment("reaching state \'S226\'");
                                        goto label17;
                                    }
                                    if ((temp23 == 1)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS227();
                                        goto label17;
                                    }
                                    if ((temp23 == 2)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS227();
                                        goto label17;
                                    }
                                    if ((temp23 == 3)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS227();
                                        goto label17;
                                    }
                                    if ((temp23 == 4)) {
                                        this.Manager.Comment("reaching state \'S228\'");
                                        goto label17;
                                    }
                                    if ((temp23 == 5)) {
                                        this.Manager.Comment("reaching state \'S229\'");
                                        goto label17;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4Trans2SetFileInfoResponseChecker)));
                                label17:
;
                                    goto label18;
                                }
                                if ((temp24 == 1)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS181();
                                    goto label18;
                                }
                                if ((temp24 == 2)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS181();
                                    goto label18;
                                }
                                if ((temp24 == 3)) {
                                    this.Manager.Comment("reaching state \'S182\'");
                                    goto label18;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker7)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker8)));
                            label18:
;
                                goto label19;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4TreeConnectResponseChecker)));
                        label19:
;
                            goto label20;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4SessionSetupResponseChecker)));
                    label20:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S18");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S18");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S42");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S42");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S42");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S42");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S42");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S42");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S82");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S82");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S82, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S106");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S106");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S106");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S106");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS149() {
            this.Manager.Comment("reaching state \'S149\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S138");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S138");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S169");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S169, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S211");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S211");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS227() {
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S248\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S211");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430, MS-SMB_R30034");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
            this.Manager.Checkpoint("MS-SMB_R30034");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S211");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S211");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S211");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of Trans2SetFileInfoResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S169");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS181() {
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S212\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S169");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS4ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S169");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S19\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S43\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S51\'");
                    bool temp27;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp27);
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp27, "createPipeStatus of CreatePipeAndMailslot, state S59");
                    this.Manager.Comment("reaching state \'S67\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S75\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S83\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S99\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S107\'");
                        int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6SessionSetupResponseChecker)));
                        if ((temp31 == 0)) {
                            this.Manager.Comment("reaching state \'S119\'");
                            goto label24;
                        }
                        if ((temp31 == 1)) {
                            this.Manager.Comment("reaching state \'S118\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S131\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S139\'");
                            int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6TreeConnectResponseChecker)));
                            if ((temp30 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151();
                                goto label23;
                            }
                            if ((temp30 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151();
                                goto label23;
                            }
                            if ((temp30 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151();
                                goto label23;
                            }
                            if ((temp30 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151();
                                goto label23;
                            }
                            if ((temp30 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151();
                                goto label23;
                            }
                            if ((temp30 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151();
                                goto label23;
                            }
                            if ((temp30 == 6)) {
                                this.Manager.Comment("reaching state \'S150\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, true);
                                this.Manager.Comment("reaching state \'S163\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S170\'");
                                int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker7)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker8)));
                                if ((temp29 == 0)) {
                                    this.Manager.Comment("reaching state \'S183\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,True,True,True,FileRenameInfo" +
                                            "rmation,0,\"Dir1\\Test1.txt\",False,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, true, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "Dir1\\Test1.txt", false, 0);
                                    this.Manager.Comment("reaching state \'S200\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S213\'");
                                    int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6Trans2SetFileInfoResponseChecker)));
                                    if ((temp28 == 0)) {
                                        this.Manager.Comment("reaching state \'S230\'");
                                        goto label21;
                                    }
                                    if ((temp28 == 1)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS231();
                                        goto label21;
                                    }
                                    if ((temp28 == 2)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS231();
                                        goto label21;
                                    }
                                    if ((temp28 == 3)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS231();
                                        goto label21;
                                    }
                                    if ((temp28 == 4)) {
                                        this.Manager.Comment("reaching state \'S232\'");
                                        goto label21;
                                    }
                                    if ((temp28 == 5)) {
                                        this.Manager.Comment("reaching state \'S233\'");
                                        goto label21;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6Trans2SetFileInfoResponseChecker)));
                                label21:
;
                                    goto label22;
                                }
                                if ((temp29 == 1)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS184();
                                    goto label22;
                                }
                                if ((temp29 == 2)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS184();
                                    goto label22;
                                }
                                if ((temp29 == 3)) {
                                    this.Manager.Comment("reaching state \'S185\'");
                                    goto label22;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker7)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker8)));
                            label22:
;
                                goto label23;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6TreeConnectResponseChecker)));
                        label23:
;
                            goto label24;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6SessionSetupResponseChecker)));
                    label24:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S19");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S19");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S43");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S83");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S83, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S107");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S107");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S107");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S107");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS151() {
            this.Manager.Comment("reaching state \'S151\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S139");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S139");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S170");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S170, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S213");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30033");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30033");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS231() {
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S249\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S213");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430, MS-SMB_R30034");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
            this.Manager.Checkpoint("MS-SMB_R30034");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S213");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S213");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S213");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of Trans2SetFileInfoResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S170");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS184() {
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S214\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S170");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS6ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S170");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8() {
            this.Manager.BeginTest("RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S20\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S44\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S52\'");
                    bool temp32;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp32);
                    this.Manager.Comment("reaching state \'S60\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp32, "createPipeStatus of CreatePipeAndMailslot, state S60");
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S76\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S84\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S100\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S108\'");
                        int temp36 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8SessionSetupResponseChecker)));
                        if ((temp36 == 0)) {
                            this.Manager.Comment("reaching state \'S121\'");
                            goto label28;
                        }
                        if ((temp36 == 1)) {
                            this.Manager.Comment("reaching state \'S120\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S132\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S140\'");
                            int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8TreeConnectResponseChecker)));
                            if ((temp35 == 0)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153();
                                goto label27;
                            }
                            if ((temp35 == 1)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153();
                                goto label27;
                            }
                            if ((temp35 == 2)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153();
                                goto label27;
                            }
                            if ((temp35 == 3)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153();
                                goto label27;
                            }
                            if ((temp35 == 4)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153();
                                goto label27;
                            }
                            if ((temp35 == 5)) {
                                RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153();
                                goto label27;
                            }
                            if ((temp35 == 6)) {
                                this.Manager.Comment("reaching state \'S152\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, true);
                                this.Manager.Comment("reaching state \'S164\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S171\'");
                                int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker7)));
                                if ((temp34 == 0)) {
                                    this.Manager.Comment("reaching state \'S186\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,True,True,True,FileLinkInform" +
                                            "ation,0,\"Dir1\\Test1.txt\",False,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, true, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileLinkInformation, 0, "Dir1\\Test1.txt", false, 0);
                                    this.Manager.Comment("reaching state \'S202\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S215\'");
                                    int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker4)));
                                    if ((temp33 == 0)) {
                                        this.Manager.Comment("reaching state \'S234\'");
                                        goto label25;
                                    }
                                    if ((temp33 == 1)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS235();
                                        goto label25;
                                    }
                                    if ((temp33 == 2)) {
                                        RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS235();
                                        goto label25;
                                    }
                                    if ((temp33 == 3)) {
                                        this.Manager.Comment("reaching state \'S236\'");
                                        goto label25;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker4)));
                                label25:
;
                                    goto label26;
                                }
                                if ((temp34 == 1)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS187();
                                    goto label26;
                                }
                                if ((temp34 == 2)) {
                                    RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS187();
                                    goto label26;
                                }
                                if ((temp34 == 3)) {
                                    this.Manager.Comment("reaching state \'S188\'");
                                    goto label26;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker7)));
                            label26:
;
                                goto label27;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8TreeConnectResponseChecker)));
                        label27:
;
                            goto label28;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8SessionSetupResponseChecker)));
                    label28:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S20");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S20");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S44");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S84");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S84, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S108");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S108");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S108");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S108");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S108");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S108");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS153() {
            this.Manager.Comment("reaching state \'S153\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S140");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S140");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S171");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S171, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S215");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S215");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS235() {
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S250\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S215");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S171");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS187() {
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S216\'");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S171");
        }
        
        private void RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileNameS8ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S171");
        }
        #endregion
    }
}
