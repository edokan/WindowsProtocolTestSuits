//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8 : PtfTestClassBase {
        
        public NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S160\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S400\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S480\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S560\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S560");
                    this.Manager.Comment("reaching state \'S640\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S720\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S800\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NegotiateResponseChecker)));
                    if ((temp2 == 0)) {
                        this.Manager.Comment("reaching state \'S880\'");
                        goto label1;
                    }
                    if ((temp2 == 1)) {
                        this.Manager.Comment("reaching state \'S881\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1040\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1120();
                        goto label1;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NegotiateResponseChecker)));
                label1:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S160");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S400");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S800");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S800");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S800");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S800");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S800");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S800");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S800");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S800, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S800");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1120() {
            this.Manager.Comment("reaching state \'S1120\'");
            int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SessionSetupResponseChecker1)));
            if ((temp1 == 0)) {
                this.Manager.Comment("reaching state \'S1196\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1276\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1356\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1436\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,True)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                    this.Manager.Comment("reaching state \'S1516\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1596\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S1676\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                        this.Manager.Comment("reaching state \'S1756\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1836\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1916\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S1996\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2076\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker)));
                }
                goto label0;
            }
            if ((temp1 == 1)) {
                this.Manager.Comment("reaching state \'S1197\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1277\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1357\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1437\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,False)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                    this.Manager.Comment("reaching state \'S1517\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1597\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1677\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                                "ding)\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                        this.Manager.Comment("reaching state \'S1757\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1837\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1917\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S1997\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2077\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker2)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker1)));
                }
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SessionSetupResponseChecker1)));
        label0:
;
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1356");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1356");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1596");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1596, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1357");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1357");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1597");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1597, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1837");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1837");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S165\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S405\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S485\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp3);
                    this.Manager.Comment("reaching state \'S565\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp3, "createPipeStatus of CreatePipeAndMailslot, state S565");
                    this.Manager.Comment("reaching state \'S645\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S725\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S805\'");
                    int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NegotiateResponseChecker)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S891\'");
                        goto label3;
                    }
                    if ((temp5 == 1)) {
                        this.Manager.Comment("reaching state \'S890\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1045\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1125\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SessionSetupResponseChecker1)));
                        if ((temp4 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1202();
                            goto label2;
                        }
                        if ((temp4 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1202();
                            goto label2;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SessionSetupResponseChecker1)));
                    label2:
;
                        goto label3;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NegotiateResponseChecker)));
                label3:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S165");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S165");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S405");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S805");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S805");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S805");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S805");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S805");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S805");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S805");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S805, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S805");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1202() {
            this.Manager.Comment("reaching state \'S1202\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1282\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1362\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1442\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1522\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1602\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1682\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1762\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1842\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1922\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2002\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2082\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1362");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1362");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1602");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1602, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1602");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1602");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1842");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S210\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S450\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S530\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp6);
                    this.Manager.Comment("reaching state \'S610\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "createPipeStatus of CreatePipeAndMailslot, state S610");
                    this.Manager.Comment("reaching state \'S690\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S770\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S850\'");
                    int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100NegotiateResponseChecker)));
                    if ((temp8 == 0)) {
                        this.Manager.Comment("reaching state \'S981\'");
                        goto label5;
                    }
                    if ((temp8 == 1)) {
                        this.Manager.Comment("reaching state \'S980\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1090\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1169\'");
                        int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SessionSetupResponseChecker1)));
                        if ((temp7 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1247();
                            goto label4;
                        }
                        if ((temp7 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1247();
                            goto label4;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SessionSetupResponseChecker1)));
                    label4:
;
                        goto label5;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100NegotiateResponseChecker)));
                label5:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S450");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S450");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S450");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S450");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S450");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S450");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S850");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S850");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S850");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S850");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S850");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S850");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S850");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S850, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S850");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1247() {
            this.Manager.Comment("reaching state \'S1247\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1327\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1407\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1487\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1567\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1647\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1727\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1807\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1887\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1967\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2047\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2127\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1407");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1647");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1647, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1647");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1647");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1887");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1887");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S100SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102");
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S211\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S451\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S531\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp9);
                    this.Manager.Comment("reaching state \'S611\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "createPipeStatus of CreatePipeAndMailslot, state S611");
                    this.Manager.Comment("reaching state \'S691\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S771\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S851\'");
                    int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102NegotiateResponseChecker)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S983\'");
                        goto label7;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S982\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1091\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1170\'");
                        int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SessionSetupResponseChecker1)));
                        if ((temp10 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1248();
                            goto label6;
                        }
                        if ((temp10 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1248();
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SessionSetupResponseChecker1)));
                    label6:
;
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102NegotiateResponseChecker)));
                label7:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S451");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S451");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S451");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S451");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S451");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S451");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S851");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S851");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S851");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S851");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S851");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S851");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S851, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1248() {
            this.Manager.Comment("reaching state \'S1248\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1328\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1408\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1488\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1568\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1648\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1728\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1808\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1888\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1968\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2048\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2128\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1408");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1648");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1648, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1648");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1648");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1888");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1888");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S102SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104");
            this.Manager.Comment("reaching state \'S104\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S212\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S452\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S532\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S612\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S612");
                    this.Manager.Comment("reaching state \'S692\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S772\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S852\'");
                    int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104NegotiateResponseChecker)));
                    if ((temp14 == 0)) {
                        this.Manager.Comment("reaching state \'S985\'");
                        goto label9;
                    }
                    if ((temp14 == 1)) {
                        this.Manager.Comment("reaching state \'S984\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1092\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1171\'");
                        int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SessionSetupResponseChecker1)));
                        if ((temp13 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1249();
                            goto label8;
                        }
                        if ((temp13 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1249();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SessionSetupResponseChecker1)));
                    label8:
;
                        goto label9;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104NegotiateResponseChecker)));
                label9:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S452");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S452");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S452");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S452");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S452");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S452");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S852");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S852");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S852");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S852");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S852");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S852");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S852, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1249() {
            this.Manager.Comment("reaching state \'S1249\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1329\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1409\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1489\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1569\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1649\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1729\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1809\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1889\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1969\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2049\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2129\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1409");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1649");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1649, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1889");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1889");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S104SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106");
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S213\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S453\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S533\'");
                    bool temp15;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp15);
                    this.Manager.Comment("reaching state \'S613\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "createPipeStatus of CreatePipeAndMailslot, state S613");
                    this.Manager.Comment("reaching state \'S693\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S773\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S853\'");
                    int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106NegotiateResponseChecker)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S987\'");
                        goto label11;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S986\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1093\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1172\'");
                        int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SessionSetupResponseChecker1)));
                        if ((temp16 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1250();
                            goto label10;
                        }
                        if ((temp16 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1250();
                            goto label10;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SessionSetupResponseChecker1)));
                    label10:
;
                        goto label11;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106NegotiateResponseChecker)));
                label11:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S453");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S453");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S453");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S453");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S453");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S453");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S853");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S853");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S853");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S853");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S853");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S853");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S853, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1250() {
            this.Manager.Comment("reaching state \'S1250\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1330\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1410\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1490\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1570\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1650\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1730\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                    this.Manager.Comment("reaching state \'S1810\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1890\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1970\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2050\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2130\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1410");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1650");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1650, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1650");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1650");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1890");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1890");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S106SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S214\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S454\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S534\'");
                    bool temp18;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp18);
                    this.Manager.Comment("reaching state \'S614\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp18, "createPipeStatus of CreatePipeAndMailslot, state S614");
                    this.Manager.Comment("reaching state \'S694\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S774\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S854\'");
                    int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108NegotiateResponseChecker)));
                    if ((temp20 == 0)) {
                        this.Manager.Comment("reaching state \'S989\'");
                        goto label13;
                    }
                    if ((temp20 == 1)) {
                        this.Manager.Comment("reaching state \'S988\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1094\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1173\'");
                        int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SessionSetupResponseChecker1)));
                        if ((temp19 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1251();
                            goto label12;
                        }
                        if ((temp19 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1251();
                            goto label12;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SessionSetupResponseChecker1)));
                    label12:
;
                        goto label13;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108NegotiateResponseChecker)));
                label13:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S454");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S454");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S454");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S454");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S454");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S454");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S854");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S854");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S854");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S854");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S854");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S854");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S854");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S854, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S854");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1251() {
            this.Manager.Comment("reaching state \'S1251\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1331\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1411\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1491\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1571\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1651\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1731\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1811\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1891\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1971\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2051\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2131\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1411");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1651");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1651, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1651");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1651");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S108SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S215\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S455\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S535\'");
                    bool temp21;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp21);
                    this.Manager.Comment("reaching state \'S615\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "createPipeStatus of CreatePipeAndMailslot, state S615");
                    this.Manager.Comment("reaching state \'S695\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S775\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S855\'");
                    int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110NegotiateResponseChecker)));
                    if ((temp23 == 0)) {
                        this.Manager.Comment("reaching state \'S991\'");
                        goto label15;
                    }
                    if ((temp23 == 1)) {
                        this.Manager.Comment("reaching state \'S990\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1095\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1174();
                        goto label15;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110NegotiateResponseChecker)));
                label15:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S455");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S455");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S455");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S455");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S455");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S455");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S855");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S855");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S855");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S855");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S855");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S855");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S855");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S855, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S855");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1174() {
            this.Manager.Comment("reaching state \'S1174\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SessionSetupResponseChecker1)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S1252\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                        "");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1332\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1412\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110TreeConnectResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1492\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,True)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                    this.Manager.Comment("reaching state \'S1572\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1652\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110CreateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S1732\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                        this.Manager.Comment("reaching state \'S1812\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1892\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1972\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S2052\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2132\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110CreateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110TreeConnectResponseChecker)));
                }
                goto label14;
            }
            if ((temp22 == 1)) {
                this.Manager.Comment("reaching state \'S1253\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1333\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1413\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110TreeConnectResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1493\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,False)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                    this.Manager.Comment("reaching state \'S1573\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1653\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110CreateResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1733\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                ")\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                        this.Manager.Comment("reaching state \'S1813\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1893\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1973\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S2053\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2133\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker2)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110CreateResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110TreeConnectResponseChecker1)));
                }
                goto label14;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SessionSetupResponseChecker1)));
        label14:
;
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1412");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1652");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1652, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1652");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1892");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1413");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1653");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1653, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1653");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1653");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S110ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1893");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1893");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S216\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S456\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S536\'");
                    bool temp24;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp24);
                    this.Manager.Comment("reaching state \'S616\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "createPipeStatus of CreatePipeAndMailslot, state S616");
                    this.Manager.Comment("reaching state \'S696\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S776\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S856\'");
                    int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112NegotiateResponseChecker)));
                    if ((temp26 == 0)) {
                        this.Manager.Comment("reaching state \'S993\'");
                        goto label17;
                    }
                    if ((temp26 == 1)) {
                        this.Manager.Comment("reaching state \'S992\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1096\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1175\'");
                        int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SessionSetupResponseChecker1)));
                        if ((temp25 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1254();
                            goto label16;
                        }
                        if ((temp25 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1254();
                            goto label16;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SessionSetupResponseChecker1)));
                    label16:
;
                        goto label17;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112NegotiateResponseChecker)));
                label17:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S456");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S456");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S456");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S456");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S456");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S456");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S856");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S856");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S856");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S856");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S856");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S856");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S856, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1254() {
            this.Manager.Comment("reaching state \'S1254\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1334\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1414\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1494\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1574\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1654\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1734\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1814\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1894\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1974\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2054\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2134\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1414");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1654");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1654, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1654");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1654");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1894");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1894");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S112SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S217\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S457\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S537\'");
                    bool temp27;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp27);
                    this.Manager.Comment("reaching state \'S617\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp27, "createPipeStatus of CreatePipeAndMailslot, state S617");
                    this.Manager.Comment("reaching state \'S697\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S777\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S857\'");
                    int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114NegotiateResponseChecker)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S995\'");
                        goto label19;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S994\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1097\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1176\'");
                        int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SessionSetupResponseChecker1)));
                        if ((temp28 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1255();
                            goto label18;
                        }
                        if ((temp28 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1255();
                            goto label18;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SessionSetupResponseChecker1)));
                    label18:
;
                        goto label19;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114NegotiateResponseChecker)));
                label19:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S457");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S457");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S457");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S457");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S457");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S457");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S857");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S857");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S857");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S857");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S857");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S857");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S857");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S857, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S857");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1255() {
            this.Manager.Comment("reaching state \'S1255\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1335\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1415\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1495\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1575\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1655\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1735\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1815\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1895\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1975\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2055\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2135\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1415");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1655");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1655, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1655");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1655");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1895");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1895");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S114SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S218\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S458\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S538\'");
                    bool temp30;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp30);
                    this.Manager.Comment("reaching state \'S618\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp30, "createPipeStatus of CreatePipeAndMailslot, state S618");
                    this.Manager.Comment("reaching state \'S698\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S778\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S858\'");
                    int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116NegotiateResponseChecker)));
                    if ((temp32 == 0)) {
                        this.Manager.Comment("reaching state \'S997\'");
                        goto label21;
                    }
                    if ((temp32 == 1)) {
                        this.Manager.Comment("reaching state \'S996\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1098\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1177\'");
                        int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SessionSetupResponseChecker1)));
                        if ((temp31 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1256();
                            goto label20;
                        }
                        if ((temp31 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1256();
                            goto label20;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SessionSetupResponseChecker1)));
                    label20:
;
                        goto label21;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116NegotiateResponseChecker)));
                label21:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S458");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S458");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S458");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S458");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S458");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S458");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S858");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S858");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S858");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S858");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S858");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S858");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S858");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S858, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S858");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1256() {
            this.Manager.Comment("reaching state \'S1256\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1336\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1416\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1496\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1576\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1656\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1736\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1816\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1896\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1976\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2056\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2136\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1416");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1656");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1656, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1656");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1896");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1896");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S116SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S219\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S379\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S459\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S539\'");
                    bool temp33;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp33);
                    this.Manager.Comment("reaching state \'S619\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp33, "createPipeStatus of CreatePipeAndMailslot, state S619");
                    this.Manager.Comment("reaching state \'S699\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S779\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S859\'");
                    int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118NegotiateResponseChecker)));
                    if ((temp35 == 0)) {
                        this.Manager.Comment("reaching state \'S999\'");
                        goto label23;
                    }
                    if ((temp35 == 1)) {
                        this.Manager.Comment("reaching state \'S998\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1099\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1178\'");
                        int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SessionSetupResponseChecker1)));
                        if ((temp34 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1257();
                            goto label22;
                        }
                        if ((temp34 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1257();
                            goto label22;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SessionSetupResponseChecker1)));
                    label22:
;
                        goto label23;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118NegotiateResponseChecker)));
                label23:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S219");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S219");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S459");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S459");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S459");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S459");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S459");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S459");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S859");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S859");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S859");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S859");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S859");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S859");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S859");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S859, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S859");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1257() {
            this.Manager.Comment("reaching state \'S1257\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1337\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1417\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1497\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1577\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1657\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1737\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1817\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1897\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1977\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2057\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2137\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1417");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1657");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1657, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1657");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1657");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1897");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S118SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S166\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S406\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S486\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp36);
                    this.Manager.Comment("reaching state \'S566\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "createPipeStatus of CreatePipeAndMailslot, state S566");
                    this.Manager.Comment("reaching state \'S646\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S726\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S806\'");
                    int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NegotiateResponseChecker)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S893\'");
                        goto label25;
                    }
                    if ((temp38 == 1)) {
                        this.Manager.Comment("reaching state \'S892\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1046\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1126\'");
                        int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SessionSetupResponseChecker1)));
                        if ((temp37 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1203();
                            goto label24;
                        }
                        if ((temp37 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1203();
                            goto label24;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SessionSetupResponseChecker1)));
                    label24:
;
                        goto label25;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NegotiateResponseChecker)));
                label25:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S166");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S166");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S406");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S806");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S806");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S806");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S806, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S806");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1203() {
            this.Manager.Comment("reaching state \'S1203\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1283\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1363\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1443\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1523\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1603\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1683\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1763\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1843\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1923\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2003\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2083\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1363");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1363");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1603");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1603, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1843");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S220\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S460\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S540\'");
                    bool temp39;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp39);
                    this.Manager.Comment("reaching state \'S620\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp39, "createPipeStatus of CreatePipeAndMailslot, state S620");
                    this.Manager.Comment("reaching state \'S700\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S780\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S860\'");
                    int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120NegotiateResponseChecker)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S1001\'");
                        goto label27;
                    }
                    if ((temp41 == 1)) {
                        this.Manager.Comment("reaching state \'S1000\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1100\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1179\'");
                        int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SessionSetupResponseChecker1)));
                        if ((temp40 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1258();
                            goto label26;
                        }
                        if ((temp40 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1258();
                            goto label26;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SessionSetupResponseChecker1)));
                    label26:
;
                        goto label27;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120NegotiateResponseChecker)));
                label27:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S220");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S220");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S460");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S460");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S460");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S460");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S460");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S460");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S860");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S860");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S860");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S860");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S860");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S860");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S860");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S860, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S860");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1258() {
            this.Manager.Comment("reaching state \'S1258\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1338\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1418\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1498\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1578\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1658\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1738\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1818\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1898\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1978\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2058\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2138\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1418");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1658");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1658, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1658");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1898");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1898");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S120SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S221\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S461\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S541\'");
                    bool temp42;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp42);
                    this.Manager.Comment("reaching state \'S621\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp42, "createPipeStatus of CreatePipeAndMailslot, state S621");
                    this.Manager.Comment("reaching state \'S701\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S781\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S861\'");
                    int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122NegotiateResponseChecker)));
                    if ((temp44 == 0)) {
                        this.Manager.Comment("reaching state \'S1003\'");
                        goto label29;
                    }
                    if ((temp44 == 1)) {
                        this.Manager.Comment("reaching state \'S1002\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1101\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1180\'");
                        int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SessionSetupResponseChecker1)));
                        if ((temp43 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1259();
                            goto label28;
                        }
                        if ((temp43 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1259();
                            goto label28;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SessionSetupResponseChecker1)));
                    label28:
;
                        goto label29;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122NegotiateResponseChecker)));
                label29:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S221");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S221");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S461");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S461");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S461");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S461");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S461");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S461");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S861");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S861");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S861");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S861");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S861");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S861");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S861");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S861, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S861");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1259() {
            this.Manager.Comment("reaching state \'S1259\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1339\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1419\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1499\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1579\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1659\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1739\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1819\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1899\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1979\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2059\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2139\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1419");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1659");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1659, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1659");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1659");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1899");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1899");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S122SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S222\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S462\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S542\'");
                    bool temp45;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp45);
                    this.Manager.Comment("reaching state \'S622\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp45, "createPipeStatus of CreatePipeAndMailslot, state S622");
                    this.Manager.Comment("reaching state \'S702\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S782\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S862\'");
                    int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124NegotiateResponseChecker)));
                    if ((temp47 == 0)) {
                        this.Manager.Comment("reaching state \'S1005\'");
                        goto label31;
                    }
                    if ((temp47 == 1)) {
                        this.Manager.Comment("reaching state \'S1004\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1102\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1181\'");
                        int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SessionSetupResponseChecker1)));
                        if ((temp46 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1260();
                            goto label30;
                        }
                        if ((temp46 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1260();
                            goto label30;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SessionSetupResponseChecker1)));
                    label30:
;
                        goto label31;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124NegotiateResponseChecker)));
                label31:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S222");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S222");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S462");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S462");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S462");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S462");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S462");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S462");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S862");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S862");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S862");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S862");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S862");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S862");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S862");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S862, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S862");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1260() {
            this.Manager.Comment("reaching state \'S1260\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1340\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1420\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1500\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1580\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1660\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1740\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1820\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1900\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1980\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2060\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2140\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1420");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1660");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1660, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1660");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1900");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1900");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S124SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S223\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S463\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S543\'");
                    bool temp48;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp48);
                    this.Manager.Comment("reaching state \'S623\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp48, "createPipeStatus of CreatePipeAndMailslot, state S623");
                    this.Manager.Comment("reaching state \'S703\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S783\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S863\'");
                    int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126NegotiateResponseChecker)));
                    if ((temp50 == 0)) {
                        this.Manager.Comment("reaching state \'S1007\'");
                        goto label33;
                    }
                    if ((temp50 == 1)) {
                        this.Manager.Comment("reaching state \'S1006\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1103\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1182\'");
                        int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SessionSetupResponseChecker1)));
                        if ((temp49 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1261();
                            goto label32;
                        }
                        if ((temp49 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1261();
                            goto label32;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SessionSetupResponseChecker1)));
                    label32:
;
                        goto label33;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126NegotiateResponseChecker)));
                label33:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S223");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S223");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S463");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S463");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S463");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S463");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S463");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S463");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S863");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S863");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S863");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S863");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S863");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S863");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S863");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S863, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S863");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1261() {
            this.Manager.Comment("reaching state \'S1261\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1341\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1421\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1501\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1581\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1661\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1741\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1821\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1901\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1981\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2061\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2141\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1421");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1661");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1661, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1661");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S126SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S224\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S464\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S544\'");
                    bool temp51;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp51);
                    this.Manager.Comment("reaching state \'S624\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp51, "createPipeStatus of CreatePipeAndMailslot, state S624");
                    this.Manager.Comment("reaching state \'S704\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S784\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S864\'");
                    int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128NegotiateResponseChecker)));
                    if ((temp53 == 0)) {
                        this.Manager.Comment("reaching state \'S1009\'");
                        goto label35;
                    }
                    if ((temp53 == 1)) {
                        this.Manager.Comment("reaching state \'S1008\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1104\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1183\'");
                        int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SessionSetupResponseChecker1)));
                        if ((temp52 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1262();
                            goto label34;
                        }
                        if ((temp52 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1262();
                            goto label34;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SessionSetupResponseChecker1)));
                    label34:
;
                        goto label35;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128NegotiateResponseChecker)));
                label35:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S224");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S224");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S464");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S464");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S464");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S464");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S464");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S464");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S864");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S864");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S864");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S864");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S864");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S864");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S864");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S864, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S864");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1262() {
            this.Manager.Comment("reaching state \'S1262\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1342\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1422\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1502\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1582\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1662\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1742\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1822\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1902\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1982\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2062\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2142\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1422");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1662");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1662, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1662");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1662");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S128SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1183");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S225\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S465\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S545\'");
                    bool temp54;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp54);
                    this.Manager.Comment("reaching state \'S625\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp54, "createPipeStatus of CreatePipeAndMailslot, state S625");
                    this.Manager.Comment("reaching state \'S705\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S785\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S865\'");
                    int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130NegotiateResponseChecker)));
                    if ((temp56 == 0)) {
                        this.Manager.Comment("reaching state \'S1011\'");
                        goto label37;
                    }
                    if ((temp56 == 1)) {
                        this.Manager.Comment("reaching state \'S1010\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1105\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1184\'");
                        int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SessionSetupResponseChecker1)));
                        if ((temp55 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1263();
                            goto label36;
                        }
                        if ((temp55 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1263();
                            goto label36;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SessionSetupResponseChecker1)));
                    label36:
;
                        goto label37;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130NegotiateResponseChecker)));
                label37:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S225");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S225");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S465");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S465");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S465");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S465");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S465");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S465");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S865");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S865, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1263() {
            this.Manager.Comment("reaching state \'S1263\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1343\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1423\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1503\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1583\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1663\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1743\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1823\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1903\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1983\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2063\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2143\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1423");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1663");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1663, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1663");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1663");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S130SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S226\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S466\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S546\'");
                    bool temp57;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp57);
                    this.Manager.Comment("reaching state \'S626\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp57, "createPipeStatus of CreatePipeAndMailslot, state S626");
                    this.Manager.Comment("reaching state \'S706\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S786\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S866\'");
                    int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132NegotiateResponseChecker)));
                    if ((temp59 == 0)) {
                        this.Manager.Comment("reaching state \'S1013\'");
                        goto label39;
                    }
                    if ((temp59 == 1)) {
                        this.Manager.Comment("reaching state \'S1012\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1106\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1185\'");
                        int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SessionSetupResponseChecker1)));
                        if ((temp58 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1264();
                            goto label38;
                        }
                        if ((temp58 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1264();
                            goto label38;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SessionSetupResponseChecker1)));
                    label38:
;
                        goto label39;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132NegotiateResponseChecker)));
                label39:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S226");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S226");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S466");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S466");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S466");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S466");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S466");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S466");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S866");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S866");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S866");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S866");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S866");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S866");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S866, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1264() {
            this.Manager.Comment("reaching state \'S1264\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1344\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1424\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1504\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1584\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1664\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1744\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1824\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1904\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1984\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2064\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2144\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1424");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1664");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1664, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1664");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1664");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S132SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1185");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S227\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S467\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S547\'");
                    bool temp60;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp60);
                    this.Manager.Comment("reaching state \'S627\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp60, "createPipeStatus of CreatePipeAndMailslot, state S627");
                    this.Manager.Comment("reaching state \'S707\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S787\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S867\'");
                    int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134NegotiateResponseChecker)));
                    if ((temp62 == 0)) {
                        this.Manager.Comment("reaching state \'S1015\'");
                        goto label41;
                    }
                    if ((temp62 == 1)) {
                        this.Manager.Comment("reaching state \'S1014\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1107\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1186\'");
                        int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SessionSetupResponseChecker1)));
                        if ((temp61 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1265();
                            goto label40;
                        }
                        if ((temp61 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1265();
                            goto label40;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SessionSetupResponseChecker1)));
                    label40:
;
                        goto label41;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134NegotiateResponseChecker)));
                label41:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S227");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S227");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S467");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S467");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S467");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S467");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S467");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S467");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S867");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S867");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S867");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S867");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S867");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S867");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S867");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S867, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S867");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1265() {
            this.Manager.Comment("reaching state \'S1265\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1345\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1425\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1505\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1585\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1665\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1745\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1825\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1905\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1985\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2065\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2145\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1425");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1665");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1665, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S134SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S228\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S308\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S468\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S548\'");
                    bool temp63;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp63);
                    this.Manager.Comment("reaching state \'S628\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp63, "createPipeStatus of CreatePipeAndMailslot, state S628");
                    this.Manager.Comment("reaching state \'S708\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S788\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S868\'");
                    int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136NegotiateResponseChecker)));
                    if ((temp65 == 0)) {
                        this.Manager.Comment("reaching state \'S1017\'");
                        goto label43;
                    }
                    if ((temp65 == 1)) {
                        this.Manager.Comment("reaching state \'S1016\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1108\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1187\'");
                        int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SessionSetupResponseChecker1)));
                        if ((temp64 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1266();
                            goto label42;
                        }
                        if ((temp64 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1266();
                            goto label42;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SessionSetupResponseChecker1)));
                    label42:
;
                        goto label43;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136NegotiateResponseChecker)));
                label43:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S228");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S228");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S468");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S468");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S468");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S468");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S468");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S468");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S868");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S868");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S868");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S868");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S868");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S868");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S868, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1266() {
            this.Manager.Comment("reaching state \'S1266\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1346\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1426\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1506\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1586\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1666\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1746\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1826\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1906\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1986\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2066\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2146\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1426");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1666");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1666, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1666");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1666");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S136SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1187");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S229\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S469\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S549\'");
                    bool temp66;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp66);
                    this.Manager.Comment("reaching state \'S629\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp66, "createPipeStatus of CreatePipeAndMailslot, state S629");
                    this.Manager.Comment("reaching state \'S709\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S789\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S869\'");
                    int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138NegotiateResponseChecker)));
                    if ((temp68 == 0)) {
                        this.Manager.Comment("reaching state \'S1019\'");
                        goto label45;
                    }
                    if ((temp68 == 1)) {
                        this.Manager.Comment("reaching state \'S1018\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1109\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1188\'");
                        int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SessionSetupResponseChecker1)));
                        if ((temp67 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1267();
                            goto label44;
                        }
                        if ((temp67 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1267();
                            goto label44;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SessionSetupResponseChecker1)));
                    label44:
;
                        goto label45;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138NegotiateResponseChecker)));
                label45:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S229");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S229");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S469");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S469");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S469");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S469");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S469");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S469");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S869");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S869");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S869");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S869");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S869");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S869");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S869");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S869, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S869");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1267() {
            this.Manager.Comment("reaching state \'S1267\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1347\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1427\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1507\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1587\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1667\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1747\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1827\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1907\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1987\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2067\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2147\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1427");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1667");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1667, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1667");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1667");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S138SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S167\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S407\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S487\'");
                    bool temp69;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp69);
                    this.Manager.Comment("reaching state \'S567\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp69, "createPipeStatus of CreatePipeAndMailslot, state S567");
                    this.Manager.Comment("reaching state \'S647\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S727\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S807\'");
                    int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NegotiateResponseChecker)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S895\'");
                        goto label47;
                    }
                    if ((temp71 == 1)) {
                        this.Manager.Comment("reaching state \'S894\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1047\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1127\'");
                        int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SessionSetupResponseChecker1)));
                        if ((temp70 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1204();
                            goto label46;
                        }
                        if ((temp70 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1204();
                            goto label46;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SessionSetupResponseChecker1)));
                    label46:
;
                        goto label47;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NegotiateResponseChecker)));
                label47:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S167");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S407");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S407");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S807");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S807");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S807");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S807");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S807");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S807");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S807");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S807, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S807");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1204() {
            this.Manager.Comment("reaching state \'S1204\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1284\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1364\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1444\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1524\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1604\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1684\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1764\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1844\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1924\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2004\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2084\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1364");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1364");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1604");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1604, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1604");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1604");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1844");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1844");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S230\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S470\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S550\'");
                    bool temp72;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp72);
                    this.Manager.Comment("reaching state \'S630\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp72, "createPipeStatus of CreatePipeAndMailslot, state S630");
                    this.Manager.Comment("reaching state \'S710\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S790\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S870\'");
                    int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140NegotiateResponseChecker)));
                    if ((temp74 == 0)) {
                        this.Manager.Comment("reaching state \'S1021\'");
                        goto label49;
                    }
                    if ((temp74 == 1)) {
                        this.Manager.Comment("reaching state \'S1020\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1110\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1189\'");
                        int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SessionSetupResponseChecker1)));
                        if ((temp73 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1268();
                            goto label48;
                        }
                        if ((temp73 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1268();
                            goto label48;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SessionSetupResponseChecker1)));
                    label48:
;
                        goto label49;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140NegotiateResponseChecker)));
                label49:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S230");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S230");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S470");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S470");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S470");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S470");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S470");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S470");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S870");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S870");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S870");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S870");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S870");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S870");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S870");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S870, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S870");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1268() {
            this.Manager.Comment("reaching state \'S1268\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1348\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1428\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1508\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1588\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1668\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1748\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1828\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1908\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1988\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2068\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2148\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1428");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1668");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1668, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S140SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S231\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S471\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S551\'");
                    bool temp75;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp75);
                    this.Manager.Comment("reaching state \'S631\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp75, "createPipeStatus of CreatePipeAndMailslot, state S631");
                    this.Manager.Comment("reaching state \'S711\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S791\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S871\'");
                    int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142NegotiateResponseChecker)));
                    if ((temp77 == 0)) {
                        this.Manager.Comment("reaching state \'S1023\'");
                        goto label51;
                    }
                    if ((temp77 == 1)) {
                        this.Manager.Comment("reaching state \'S1022\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1111\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1190\'");
                        int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SessionSetupResponseChecker1)));
                        if ((temp76 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1269();
                            goto label50;
                        }
                        if ((temp76 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1269();
                            goto label50;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SessionSetupResponseChecker1)));
                    label50:
;
                        goto label51;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142NegotiateResponseChecker)));
                label51:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S231");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S231");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S471");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S471");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S471");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S471");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S471");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S471");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S871");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S871");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S871");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S871");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S871");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S871");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S871");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S871, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S871");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1269() {
            this.Manager.Comment("reaching state \'S1269\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1349\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1429\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1509\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1589\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1669\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1749\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1829\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1909\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1989\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2069\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2149\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1429");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1669");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1669, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1669");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1669");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S142SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1190");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S232\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S472\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S552\'");
                    bool temp78;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp78);
                    this.Manager.Comment("reaching state \'S632\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp78, "createPipeStatus of CreatePipeAndMailslot, state S632");
                    this.Manager.Comment("reaching state \'S712\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S792\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S872\'");
                    int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144NegotiateResponseChecker)));
                    if ((temp80 == 0)) {
                        this.Manager.Comment("reaching state \'S1025\'");
                        goto label53;
                    }
                    if ((temp80 == 1)) {
                        this.Manager.Comment("reaching state \'S1024\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1112\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1191\'");
                        int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SessionSetupResponseChecker1)));
                        if ((temp79 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1270();
                            goto label52;
                        }
                        if ((temp79 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1270();
                            goto label52;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SessionSetupResponseChecker1)));
                    label52:
;
                        goto label53;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144NegotiateResponseChecker)));
                label53:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S232");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S472");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S472");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S472");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S472");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S472");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S472");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S872");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S872");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S872");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S872");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S872");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S872, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S872");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1270() {
            this.Manager.Comment("reaching state \'S1270\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1350\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1430\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1510\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1590\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1670\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1750\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1830\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1910\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1990\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2070\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2150\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1430");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1670");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1670, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1670");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S144SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1191");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S233\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S473\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S553\'");
                    bool temp81;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp81);
                    this.Manager.Comment("reaching state \'S633\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp81, "createPipeStatus of CreatePipeAndMailslot, state S633");
                    this.Manager.Comment("reaching state \'S713\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S793\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S873\'");
                    int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146NegotiateResponseChecker)));
                    if ((temp83 == 0)) {
                        this.Manager.Comment("reaching state \'S1027\'");
                        goto label55;
                    }
                    if ((temp83 == 1)) {
                        this.Manager.Comment("reaching state \'S1026\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1113\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1192\'");
                        int temp82 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SessionSetupResponseChecker1)));
                        if ((temp82 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1271();
                            goto label54;
                        }
                        if ((temp82 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1271();
                            goto label54;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SessionSetupResponseChecker1)));
                    label54:
;
                        goto label55;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146NegotiateResponseChecker)));
                label55:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S233");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S233");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S473");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S473");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S473");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S473");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S473");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S473");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S873");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S873");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S873");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S873");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S873");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S873");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S873, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1271() {
            this.Manager.Comment("reaching state \'S1271\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1351\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1431\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1511\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1591\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1671\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1751\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                    this.Manager.Comment("reaching state \'S1831\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1911\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1991\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2071\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2151\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1431");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1671");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1671, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S146SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1192");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S234\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S394\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S474\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S554\'");
                    bool temp84;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp84);
                    this.Manager.Comment("reaching state \'S634\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp84, "createPipeStatus of CreatePipeAndMailslot, state S634");
                    this.Manager.Comment("reaching state \'S714\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S794\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S874\'");
                    int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148NegotiateResponseChecker)));
                    if ((temp86 == 0)) {
                        this.Manager.Comment("reaching state \'S1029\'");
                        goto label57;
                    }
                    if ((temp86 == 1)) {
                        this.Manager.Comment("reaching state \'S1028\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1114\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1193();
                        goto label57;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148NegotiateResponseChecker)));
                label57:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S234");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S474");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S474");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S474");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S474");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S474");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S474");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S874");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S874");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S874");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S874");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S874");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S874");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S874");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S874, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S874");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1193() {
            this.Manager.Comment("reaching state \'S1193\'");
            int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SessionSetupResponseChecker1)));
            if ((temp85 == 0)) {
                this.Manager.Comment("reaching state \'S1272\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                        "");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1352\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1432\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148TreeConnectResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1512\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,True)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                    this.Manager.Comment("reaching state \'S1592\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1672\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148CreateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S1752\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                        this.Manager.Comment("reaching state \'S1832\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1912\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1992\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S2072\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2152\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148CreateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148TreeConnectResponseChecker)));
                }
                goto label56;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S1273\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1353\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1433\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148TreeConnectResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1513\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,False)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                    this.Manager.Comment("reaching state \'S1593\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1673\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148CreateResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1753\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                ")\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                        this.Manager.Comment("reaching state \'S1833\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1913\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1993\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S2073\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2153\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker2)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148CreateResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148TreeConnectResponseChecker1)));
                }
                goto label56;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SessionSetupResponseChecker1)));
        label56:
;
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1432");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1672");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1672, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1193");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1433");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1673");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1673, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S148ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S235\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S475\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S555\'");
                    bool temp87;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp87);
                    this.Manager.Comment("reaching state \'S635\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp87, "createPipeStatus of CreatePipeAndMailslot, state S635");
                    this.Manager.Comment("reaching state \'S715\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S795\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S875\'");
                    int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150NegotiateResponseChecker)));
                    if ((temp89 == 0)) {
                        this.Manager.Comment("reaching state \'S1031\'");
                        goto label59;
                    }
                    if ((temp89 == 1)) {
                        this.Manager.Comment("reaching state \'S1030\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1115\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1194\'");
                        int temp88 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SessionSetupResponseChecker1)));
                        if ((temp88 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1274();
                            goto label58;
                        }
                        if ((temp88 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1274();
                            goto label58;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SessionSetupResponseChecker1)));
                    label58:
;
                        goto label59;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150NegotiateResponseChecker)));
                label59:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S235");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S235");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S475");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S475");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S475");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S475");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S475");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S475");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S875");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S875");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S875");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S875");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S875");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S875");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S875");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S875, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S875");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1274() {
            this.Manager.Comment("reaching state \'S1274\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1354\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1434\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1514\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1594\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1674\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1754\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1834\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1914\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1994\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2074\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2154\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1434");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1674");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1674, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S150SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S236\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S476\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S556\'");
                    bool temp90;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp90);
                    this.Manager.Comment("reaching state \'S636\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp90, "createPipeStatus of CreatePipeAndMailslot, state S636");
                    this.Manager.Comment("reaching state \'S716\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S796\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S876\'");
                    int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152NegotiateResponseChecker)));
                    if ((temp92 == 0)) {
                        this.Manager.Comment("reaching state \'S1033\'");
                        goto label61;
                    }
                    if ((temp92 == 1)) {
                        this.Manager.Comment("reaching state \'S1032\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1116\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1195\'");
                        int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SessionSetupResponseChecker1)));
                        if ((temp91 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1275();
                            goto label60;
                        }
                        if ((temp91 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1275();
                            goto label60;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SessionSetupResponseChecker1)));
                    label60:
;
                        goto label61;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152NegotiateResponseChecker)));
                label61:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S236");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S476");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S476");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S476");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S476");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S476");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S476");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S876");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S876");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S876, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1275() {
            this.Manager.Comment("reaching state \'S1275\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1355\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1435\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1515\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1595\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1675\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1755\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1835\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1915\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1995\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2075\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2155\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1435");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1675");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1675, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1675");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S152SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S237\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S477\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S557\'");
                    bool temp93;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp93);
                    this.Manager.Comment("reaching state \'S637\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp93, "createPipeStatus of CreatePipeAndMailslot, state S637");
                    this.Manager.Comment("reaching state \'S717\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S797\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S877\'");
                    int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154NegotiateResponseChecker)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S1035\'");
                        goto label63;
                    }
                    if ((temp95 == 1)) {
                        this.Manager.Comment("reaching state \'S1034\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1117\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1155();
                        goto label63;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154NegotiateResponseChecker)));
                label63:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S237");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S237");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S477");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S477");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S477");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S477");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S477");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S477");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S877");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S877");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S877");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S877");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S877");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S877");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S877");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S877, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S877");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1155() {
            this.Manager.Comment("reaching state \'S1155\'");
            int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SessionSetupResponseChecker1)));
            if ((temp94 == 0)) {
                this.Manager.Comment("reaching state \'S1232\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                        "");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1312\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1392\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154TreeConnectResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1472\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,True)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                    this.Manager.Comment("reaching state \'S1552\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1632\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154CreateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S1712\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                        this.Manager.Comment("reaching state \'S1792\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1872\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1952\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S2032\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2112\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154CreateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154TreeConnectResponseChecker)));
                }
                goto label62;
            }
            if ((temp94 == 1)) {
                this.Manager.Comment("reaching state \'S1233\'");
                this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                this.Manager.Comment("reaching state \'S1313\'");
                this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                this.Manager.Comment("reaching state \'S1393\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154TreeConnectResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1473\'");
                    this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                            "lse,False,True)\'");
                    this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                    this.Manager.Comment("reaching state \'S1553\'");
                    this.Manager.Comment("checking step \'return CreateRequest\'");
                    this.Manager.Comment("reaching state \'S1633\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154CreateResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1713\'");
                        this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                        this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                        this.Manager.Comment("reaching state \'S1793\'");
                        this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                        this.Manager.Comment("reaching state \'S1873\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1953\'");
                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                            this.ISmbAdapterInstance.SessionClose(1);
                            this.Manager.Checkpoint("MS-SMB_R2299");
                            this.Manager.Comment("reaching state \'S2033\'");
                            this.Manager.Comment("checking step \'return SessionClose\'");
                            this.Manager.Comment("reaching state \'S2113\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker2)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154CreateResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154TreeConnectResponseChecker1)));
                }
                goto label62;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SessionSetupResponseChecker1)));
        label62:
;
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1392");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1392");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1632");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1632, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1872");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1155");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1393");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1393");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1633");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1633, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1633");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1633");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S154ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1873");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S238\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S398\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S478\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S558\'");
                    bool temp96;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp96);
                    this.Manager.Comment("reaching state \'S638\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp96, "createPipeStatus of CreatePipeAndMailslot, state S638");
                    this.Manager.Comment("reaching state \'S718\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S798\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S878\'");
                    int temp97 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156NegotiateResponseChecker)));
                    if ((temp97 == 0)) {
                        this.Manager.Comment("reaching state \'S1037\'");
                        goto label64;
                    }
                    if ((temp97 == 1)) {
                        this.Manager.Comment("reaching state \'S1036\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1118\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1174();
                        goto label64;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156NegotiateResponseChecker)));
                label64:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S238");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S478");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S478");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S478");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S478");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S478");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S478");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S156NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S878");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S878, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S239\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S399\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S479\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S559\'");
                    bool temp98;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp98);
                    this.Manager.Comment("reaching state \'S639\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp98, "createPipeStatus of CreatePipeAndMailslot, state S639");
                    this.Manager.Comment("reaching state \'S719\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S799\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S879\'");
                    int temp99 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158NegotiateResponseChecker)));
                    if ((temp99 == 0)) {
                        this.Manager.Comment("reaching state \'S1039\'");
                        goto label65;
                    }
                    if ((temp99 == 1)) {
                        this.Manager.Comment("reaching state \'S1038\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1119\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1193();
                        goto label65;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158NegotiateResponseChecker)));
                label65:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S239");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S239");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S479");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S479");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S479");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S479");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S479");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S479");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S879");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S158NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S879");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S879");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S879");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S879");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S879");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S879, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S168\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S408\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S488\'");
                    bool temp100;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp100);
                    this.Manager.Comment("reaching state \'S568\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp100, "createPipeStatus of CreatePipeAndMailslot, state S568");
                    this.Manager.Comment("reaching state \'S648\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S728\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S808\'");
                    int temp102 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NegotiateResponseChecker)));
                    if ((temp102 == 0)) {
                        this.Manager.Comment("reaching state \'S897\'");
                        goto label67;
                    }
                    if ((temp102 == 1)) {
                        this.Manager.Comment("reaching state \'S896\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1048\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1128\'");
                        int temp101 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SessionSetupResponseChecker1)));
                        if ((temp101 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1205();
                            goto label66;
                        }
                        if ((temp101 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1205();
                            goto label66;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SessionSetupResponseChecker1)));
                    label66:
;
                        goto label67;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NegotiateResponseChecker)));
                label67:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S168");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S408");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S408");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S808");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S808, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1205() {
            this.Manager.Comment("reaching state \'S1205\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1285\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1365\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1445\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1525\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1605\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1685\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1765\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1845\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1925\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2005\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2085\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1365");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1365");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1605");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1605, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1605");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1605");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1845");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1845");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S169\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S409\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S489\'");
                    bool temp103;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp103);
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp103, "createPipeStatus of CreatePipeAndMailslot, state S569");
                    this.Manager.Comment("reaching state \'S649\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S729\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S809\'");
                    int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NegotiateResponseChecker)));
                    if ((temp105 == 0)) {
                        this.Manager.Comment("reaching state \'S899\'");
                        goto label69;
                    }
                    if ((temp105 == 1)) {
                        this.Manager.Comment("reaching state \'S898\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1049\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1129\'");
                        int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SessionSetupResponseChecker1)));
                        if ((temp104 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1206();
                            goto label68;
                        }
                        if ((temp104 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1206();
                            goto label68;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SessionSetupResponseChecker1)));
                    label68:
;
                        goto label69;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NegotiateResponseChecker)));
                label69:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S169");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S409");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S409");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S809");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S809");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S809");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S809");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S809");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S809");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S809");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S809, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S809");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1206() {
            this.Manager.Comment("reaching state \'S1206\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1286\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1366\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1446\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1526\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1606\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1686\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1766\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1846\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1926\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2006\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2086\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1366");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1366");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1606");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1606, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1846");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1846");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S161\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S401\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S481\'");
                    bool temp106;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp106);
                    this.Manager.Comment("reaching state \'S561\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp106, "createPipeStatus of CreatePipeAndMailslot, state S561");
                    this.Manager.Comment("reaching state \'S641\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S721\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S801\'");
                    int temp108 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NegotiateResponseChecker)));
                    if ((temp108 == 0)) {
                        this.Manager.Comment("reaching state \'S883\'");
                        goto label71;
                    }
                    if ((temp108 == 1)) {
                        this.Manager.Comment("reaching state \'S882\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1041\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1121\'");
                        int temp107 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SessionSetupResponseChecker1)));
                        if ((temp107 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1198();
                            goto label70;
                        }
                        if ((temp107 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1198();
                            goto label70;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SessionSetupResponseChecker1)));
                    label70:
;
                        goto label71;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NegotiateResponseChecker)));
                label71:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S161");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S401");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S801");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S801, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1198() {
            this.Manager.Comment("reaching state \'S1198\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1278\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1358\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1438\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1518\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1598\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1678\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1758\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1838\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1918\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1998\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2078\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1358");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1358");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1598");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1598, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1598");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1598");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1838");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S170\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S410\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S490\'");
                    bool temp109;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp109);
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp109, "createPipeStatus of CreatePipeAndMailslot, state S570");
                    this.Manager.Comment("reaching state \'S650\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S730\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S810\'");
                    int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NegotiateResponseChecker)));
                    if ((temp111 == 0)) {
                        this.Manager.Comment("reaching state \'S901\'");
                        goto label73;
                    }
                    if ((temp111 == 1)) {
                        this.Manager.Comment("reaching state \'S900\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1050\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1130\'");
                        int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SessionSetupResponseChecker1)));
                        if ((temp110 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1207();
                            goto label72;
                        }
                        if ((temp110 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1207();
                            goto label72;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SessionSetupResponseChecker1)));
                    label72:
;
                        goto label73;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NegotiateResponseChecker)));
                label73:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S170");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S410");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S410");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S810");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S810");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S810");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S810");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S810");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S810");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S810");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S810, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S810");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1207() {
            this.Manager.Comment("reaching state \'S1207\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1287\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1367\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1447\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1527\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1607\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1687\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1767\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1847\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1927\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2007\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2087\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1367");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1367");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1607");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1607, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1607");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1607");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1847");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1847");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S171\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S411\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S491\'");
                    bool temp112;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp112);
                    this.Manager.Comment("reaching state \'S571\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp112, "createPipeStatus of CreatePipeAndMailslot, state S571");
                    this.Manager.Comment("reaching state \'S651\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S731\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S811\'");
                    int temp114 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NegotiateResponseChecker)));
                    if ((temp114 == 0)) {
                        this.Manager.Comment("reaching state \'S903\'");
                        goto label75;
                    }
                    if ((temp114 == 1)) {
                        this.Manager.Comment("reaching state \'S902\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1051\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1131\'");
                        int temp113 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SessionSetupResponseChecker1)));
                        if ((temp113 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1208();
                            goto label74;
                        }
                        if ((temp113 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1208();
                            goto label74;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SessionSetupResponseChecker1)));
                    label74:
;
                        goto label75;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NegotiateResponseChecker)));
                label75:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S171");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S411");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S411");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S811");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S811");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S811");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S811");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S811");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S811");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S811");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S811, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S811");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1208() {
            this.Manager.Comment("reaching state \'S1208\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1288\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1368\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1448\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1528\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1608\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1688\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1768\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1848\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1928\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2008\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2088\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1368");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1368");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1608");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1608, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1608");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1848");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1848");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S172\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S412\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S492\'");
                    bool temp115;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp115);
                    this.Manager.Comment("reaching state \'S572\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp115, "createPipeStatus of CreatePipeAndMailslot, state S572");
                    this.Manager.Comment("reaching state \'S652\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S732\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S812\'");
                    int temp117 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NegotiateResponseChecker)));
                    if ((temp117 == 0)) {
                        this.Manager.Comment("reaching state \'S905\'");
                        goto label77;
                    }
                    if ((temp117 == 1)) {
                        this.Manager.Comment("reaching state \'S904\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1052\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1132\'");
                        int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SessionSetupResponseChecker1)));
                        if ((temp116 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1209();
                            goto label76;
                        }
                        if ((temp116 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1209();
                            goto label76;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SessionSetupResponseChecker1)));
                    label76:
;
                        goto label77;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NegotiateResponseChecker)));
                label77:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S172");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S412");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S412");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S812");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S812");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S812");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S812");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S812");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S812");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S812");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S812, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S812");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1209() {
            this.Manager.Comment("reaching state \'S1209\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1289\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1369\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1449\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1529\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1609\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1689\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1769\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1849\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1929\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2009\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2089\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1369");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1369");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1609");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1609, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1609");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1609");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S173\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S413\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S493\'");
                    bool temp118;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp118);
                    this.Manager.Comment("reaching state \'S573\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp118, "createPipeStatus of CreatePipeAndMailslot, state S573");
                    this.Manager.Comment("reaching state \'S653\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S733\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S813\'");
                    int temp120 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NegotiateResponseChecker)));
                    if ((temp120 == 0)) {
                        this.Manager.Comment("reaching state \'S907\'");
                        goto label79;
                    }
                    if ((temp120 == 1)) {
                        this.Manager.Comment("reaching state \'S906\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1053\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1133\'");
                        int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SessionSetupResponseChecker1)));
                        if ((temp119 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1210();
                            goto label78;
                        }
                        if ((temp119 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1210();
                            goto label78;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SessionSetupResponseChecker1)));
                    label78:
;
                        goto label79;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NegotiateResponseChecker)));
                label79:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S173");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S413");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S413");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S813");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S813");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S813");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S813");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S813");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S813");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S813, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1210() {
            this.Manager.Comment("reaching state \'S1210\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1290\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1370\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1450\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1530\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1610\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1690\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1770\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1850\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1930\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2010\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2090\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1370");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1370");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1610");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1610, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1610");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1610");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1850");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1850");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S174\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S414\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S494\'");
                    bool temp121;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp121);
                    this.Manager.Comment("reaching state \'S574\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp121, "createPipeStatus of CreatePipeAndMailslot, state S574");
                    this.Manager.Comment("reaching state \'S654\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S734\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S814\'");
                    int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NegotiateResponseChecker)));
                    if ((temp123 == 0)) {
                        this.Manager.Comment("reaching state \'S909\'");
                        goto label81;
                    }
                    if ((temp123 == 1)) {
                        this.Manager.Comment("reaching state \'S908\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1054\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1134\'");
                        int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SessionSetupResponseChecker1)));
                        if ((temp122 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1211();
                            goto label80;
                        }
                        if ((temp122 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1211();
                            goto label80;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SessionSetupResponseChecker1)));
                    label80:
;
                        goto label81;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NegotiateResponseChecker)));
                label81:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S174");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S174");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S414");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S414");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S814");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S814");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S814");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S814");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S814");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S814");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S814");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S814, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S814");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1211() {
            this.Manager.Comment("reaching state \'S1211\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1291\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1371\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1451\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1531\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1611\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1691\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1771\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1851\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1931\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2011\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2091\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1371");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1371");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1611");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1611, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1611");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1611");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1851");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S175\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S415\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S495\'");
                    bool temp124;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp124);
                    this.Manager.Comment("reaching state \'S575\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp124, "createPipeStatus of CreatePipeAndMailslot, state S575");
                    this.Manager.Comment("reaching state \'S655\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S735\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S815\'");
                    int temp126 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NegotiateResponseChecker)));
                    if ((temp126 == 0)) {
                        this.Manager.Comment("reaching state \'S911\'");
                        goto label83;
                    }
                    if ((temp126 == 1)) {
                        this.Manager.Comment("reaching state \'S910\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1055\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1135\'");
                        int temp125 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SessionSetupResponseChecker1)));
                        if ((temp125 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1212();
                            goto label82;
                        }
                        if ((temp125 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1212();
                            goto label82;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SessionSetupResponseChecker1)));
                    label82:
;
                        goto label83;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NegotiateResponseChecker)));
                label83:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S175");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S175");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S415");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S415");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S815");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S815");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S815");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S815");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S815");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S815");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S815, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1212() {
            this.Manager.Comment("reaching state \'S1212\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1292\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1372\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1452\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1532\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1612\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1692\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1772\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1852\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1932\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2012\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2092\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1372");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1372");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1612");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1612, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1852");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S176\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S416\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S496\'");
                    bool temp127;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp127);
                    this.Manager.Comment("reaching state \'S576\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp127, "createPipeStatus of CreatePipeAndMailslot, state S576");
                    this.Manager.Comment("reaching state \'S656\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S736\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S816\'");
                    int temp129 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NegotiateResponseChecker)));
                    if ((temp129 == 0)) {
                        this.Manager.Comment("reaching state \'S913\'");
                        goto label85;
                    }
                    if ((temp129 == 1)) {
                        this.Manager.Comment("reaching state \'S912\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1056\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1136\'");
                        int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SessionSetupResponseChecker1)));
                        if ((temp128 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1213();
                            goto label84;
                        }
                        if ((temp128 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1213();
                            goto label84;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SessionSetupResponseChecker1)));
                    label84:
;
                        goto label85;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NegotiateResponseChecker)));
                label85:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S176");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S176");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S416");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S416");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S816");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S816");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S816");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S816");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S816");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S816");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S816");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S816, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S816");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1213() {
            this.Manager.Comment("reaching state \'S1213\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1293\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1373\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1453\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1533\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1613\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1693\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1773\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1853\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1933\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2013\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2093\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1373");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1373");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1613");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1613, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1613");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1853");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S177\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S417\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S497\'");
                    bool temp130;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp130);
                    this.Manager.Comment("reaching state \'S577\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp130, "createPipeStatus of CreatePipeAndMailslot, state S577");
                    this.Manager.Comment("reaching state \'S657\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S737\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S817\'");
                    int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NegotiateResponseChecker)));
                    if ((temp132 == 0)) {
                        this.Manager.Comment("reaching state \'S915\'");
                        goto label87;
                    }
                    if ((temp132 == 1)) {
                        this.Manager.Comment("reaching state \'S914\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1057\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1137\'");
                        int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SessionSetupResponseChecker1)));
                        if ((temp131 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1214();
                            goto label86;
                        }
                        if ((temp131 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1214();
                            goto label86;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SessionSetupResponseChecker1)));
                    label86:
;
                        goto label87;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NegotiateResponseChecker)));
                label87:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S177");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S177");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S417");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S417");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S817");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S817");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S817");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S817");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S817");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S817");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S817");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S817, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S817");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1214() {
            this.Manager.Comment("reaching state \'S1214\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1294\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1374\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1454\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1534\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1614\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1694\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1774\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1854\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1934\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2014\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2094\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1374");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1374");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1614");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1614, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1614");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1614");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1854");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1854");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S178\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S418\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S498\'");
                    bool temp133;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp133);
                    this.Manager.Comment("reaching state \'S578\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp133, "createPipeStatus of CreatePipeAndMailslot, state S578");
                    this.Manager.Comment("reaching state \'S658\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S738\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S818\'");
                    int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NegotiateResponseChecker)));
                    if ((temp135 == 0)) {
                        this.Manager.Comment("reaching state \'S917\'");
                        goto label89;
                    }
                    if ((temp135 == 1)) {
                        this.Manager.Comment("reaching state \'S916\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1058\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1138\'");
                        int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SessionSetupResponseChecker1)));
                        if ((temp134 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1215();
                            goto label88;
                        }
                        if ((temp134 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1215();
                            goto label88;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SessionSetupResponseChecker1)));
                    label88:
;
                        goto label89;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NegotiateResponseChecker)));
                label89:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S178");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S178");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S418");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S418");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S818");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S818");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S818");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S818");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S818");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S818");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S818");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S818, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S818");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1215() {
            this.Manager.Comment("reaching state \'S1215\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1295\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1375\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1455\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1535\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1615\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1695\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                    this.Manager.Comment("reaching state \'S1775\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1855\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1935\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2015\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2095\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1375");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1375");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1615");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1615, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1615");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1615");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1855");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1855");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S179\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S419\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S499\'");
                    bool temp136;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp136);
                    this.Manager.Comment("reaching state \'S579\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp136, "createPipeStatus of CreatePipeAndMailslot, state S579");
                    this.Manager.Comment("reaching state \'S659\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S739\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S819\'");
                    int temp138 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NegotiateResponseChecker)));
                    if ((temp138 == 0)) {
                        this.Manager.Comment("reaching state \'S919\'");
                        goto label91;
                    }
                    if ((temp138 == 1)) {
                        this.Manager.Comment("reaching state \'S918\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1059\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1139\'");
                        int temp137 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SessionSetupResponseChecker1)));
                        if ((temp137 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1216();
                            goto label90;
                        }
                        if ((temp137 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1216();
                            goto label90;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SessionSetupResponseChecker1)));
                    label90:
;
                        goto label91;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NegotiateResponseChecker)));
                label91:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S179");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S179");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S419");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S419");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S819");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S819");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S819");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S819");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S819");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S819, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S819");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1216() {
            this.Manager.Comment("reaching state \'S1216\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1296\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1376\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1456\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1536\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1616\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1696\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1776\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1856\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1936\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2016\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2096\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1376");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1376");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1616");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1616, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1616");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1616");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1856");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S162\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S402\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S482\'");
                    bool temp139;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp139);
                    this.Manager.Comment("reaching state \'S562\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp139, "createPipeStatus of CreatePipeAndMailslot, state S562");
                    this.Manager.Comment("reaching state \'S642\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S722\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S802\'");
                    int temp141 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NegotiateResponseChecker)));
                    if ((temp141 == 0)) {
                        this.Manager.Comment("reaching state \'S885\'");
                        goto label93;
                    }
                    if ((temp141 == 1)) {
                        this.Manager.Comment("reaching state \'S884\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1042\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1122\'");
                        int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SessionSetupResponseChecker1)));
                        if ((temp140 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1199();
                            goto label92;
                        }
                        if ((temp140 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1199();
                            goto label92;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SessionSetupResponseChecker1)));
                    label92:
;
                        goto label93;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NegotiateResponseChecker)));
                label93:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S162");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S162");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S402");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S802");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S802");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S802");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S802");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S802");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S802");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S802");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S802, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S802");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1199() {
            this.Manager.Comment("reaching state \'S1199\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1279\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1359\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1439\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1519\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1599\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1679\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1759\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1839\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1919\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1999\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2079\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1359");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1359");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1599");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1599, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1599");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1599");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1839");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1839");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S180\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S420\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S500\'");
                    bool temp142;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp142);
                    this.Manager.Comment("reaching state \'S580\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp142, "createPipeStatus of CreatePipeAndMailslot, state S580");
                    this.Manager.Comment("reaching state \'S660\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S740\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S820\'");
                    int temp144 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NegotiateResponseChecker)));
                    if ((temp144 == 0)) {
                        this.Manager.Comment("reaching state \'S921\'");
                        goto label95;
                    }
                    if ((temp144 == 1)) {
                        this.Manager.Comment("reaching state \'S920\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1060\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1140\'");
                        int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SessionSetupResponseChecker1)));
                        if ((temp143 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1217();
                            goto label94;
                        }
                        if ((temp143 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1217();
                            goto label94;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SessionSetupResponseChecker1)));
                    label94:
;
                        goto label95;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NegotiateResponseChecker)));
                label95:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S180");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S180");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S420");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S420");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S820");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S820");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S820");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S820");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S820");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S820");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S820");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S820, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S820");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1217() {
            this.Manager.Comment("reaching state \'S1217\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1297\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1377\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1457\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1537\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1617\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1697\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1777\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1857\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1937\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2017\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2097\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1377");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1377");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1617");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1617, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1617");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1617");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1857");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1857");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S181\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S421\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S501\'");
                    bool temp145;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp145);
                    this.Manager.Comment("reaching state \'S581\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp145, "createPipeStatus of CreatePipeAndMailslot, state S581");
                    this.Manager.Comment("reaching state \'S661\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S741\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S821\'");
                    int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NegotiateResponseChecker)));
                    if ((temp147 == 0)) {
                        this.Manager.Comment("reaching state \'S923\'");
                        goto label97;
                    }
                    if ((temp147 == 1)) {
                        this.Manager.Comment("reaching state \'S922\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1061\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1141\'");
                        int temp146 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SessionSetupResponseChecker1)));
                        if ((temp146 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1218();
                            goto label96;
                        }
                        if ((temp146 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1218();
                            goto label96;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SessionSetupResponseChecker1)));
                    label96:
;
                        goto label97;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NegotiateResponseChecker)));
                label97:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S181");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S181");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S421");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S421");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S821");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S821");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S821");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S821");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S821");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S821");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S821");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S821, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S821");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1218() {
            this.Manager.Comment("reaching state \'S1218\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1298\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1378\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1458\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1538\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1618\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1698\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1778\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1858\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1938\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2018\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2098\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1378");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1378");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1618");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1618, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1618");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1618");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1858");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1858");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S182\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S422\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S502\'");
                    bool temp148;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp148);
                    this.Manager.Comment("reaching state \'S582\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp148, "createPipeStatus of CreatePipeAndMailslot, state S582");
                    this.Manager.Comment("reaching state \'S662\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S742\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S822\'");
                    int temp150 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NegotiateResponseChecker)));
                    if ((temp150 == 0)) {
                        this.Manager.Comment("reaching state \'S925\'");
                        goto label99;
                    }
                    if ((temp150 == 1)) {
                        this.Manager.Comment("reaching state \'S924\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1062\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1142\'");
                        int temp149 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SessionSetupResponseChecker1)));
                        if ((temp149 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1219();
                            goto label98;
                        }
                        if ((temp149 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1219();
                            goto label98;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SessionSetupResponseChecker1)));
                    label98:
;
                        goto label99;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NegotiateResponseChecker)));
                label99:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S182");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S182");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S422");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S422");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S822");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S822");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S822");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S822");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S822");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S822");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S822");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S822, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S822");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1219() {
            this.Manager.Comment("reaching state \'S1219\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1299\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1379\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1459\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1539\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1619\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1699\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1779\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1859\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1939\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2019\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2099\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1379");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1379");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1619");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1619, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1619");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1859");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1859");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S183\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S423\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S503\'");
                    bool temp151;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp151);
                    this.Manager.Comment("reaching state \'S583\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp151, "createPipeStatus of CreatePipeAndMailslot, state S583");
                    this.Manager.Comment("reaching state \'S663\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S743\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S823\'");
                    int temp153 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NegotiateResponseChecker)));
                    if ((temp153 == 0)) {
                        this.Manager.Comment("reaching state \'S927\'");
                        goto label101;
                    }
                    if ((temp153 == 1)) {
                        this.Manager.Comment("reaching state \'S926\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1063\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1143\'");
                        int temp152 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SessionSetupResponseChecker1)));
                        if ((temp152 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1220();
                            goto label100;
                        }
                        if ((temp152 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1220();
                            goto label100;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SessionSetupResponseChecker1)));
                    label100:
;
                        goto label101;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NegotiateResponseChecker)));
                label101:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S183");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S183");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S423");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S423");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S823");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S823");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S823");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S823");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S823");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S823");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S823");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S823, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S823");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1220() {
            this.Manager.Comment("reaching state \'S1220\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1300\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1380\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1460\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1540\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1620\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1700\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1780\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1860\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1940\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2020\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2100\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1380");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1380");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1620");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1620, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1620");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1860");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1860");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S184\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S424\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S504\'");
                    bool temp154;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp154);
                    this.Manager.Comment("reaching state \'S584\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp154, "createPipeStatus of CreatePipeAndMailslot, state S584");
                    this.Manager.Comment("reaching state \'S664\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S744\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S824\'");
                    int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NegotiateResponseChecker)));
                    if ((temp156 == 0)) {
                        this.Manager.Comment("reaching state \'S929\'");
                        goto label103;
                    }
                    if ((temp156 == 1)) {
                        this.Manager.Comment("reaching state \'S928\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1064\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1144\'");
                        int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SessionSetupResponseChecker1)));
                        if ((temp155 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1221();
                            goto label102;
                        }
                        if ((temp155 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1221();
                            goto label102;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SessionSetupResponseChecker1)));
                    label102:
;
                        goto label103;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NegotiateResponseChecker)));
                label103:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S184");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S184");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S424");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S424");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S824");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S824");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S824");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S824");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S824");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S824");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S824");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S824, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S824");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1221() {
            this.Manager.Comment("reaching state \'S1221\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1301\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1381\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1461\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1541\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1621\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1701\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1781\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1861\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1941\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2021\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2101\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1381");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1381");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1621");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1621, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1621");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1621");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1861");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1861");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S185\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S425\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S505\'");
                    bool temp157;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp157);
                    this.Manager.Comment("reaching state \'S585\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp157, "createPipeStatus of CreatePipeAndMailslot, state S585");
                    this.Manager.Comment("reaching state \'S665\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S745\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S825\'");
                    int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NegotiateResponseChecker)));
                    if ((temp159 == 0)) {
                        this.Manager.Comment("reaching state \'S931\'");
                        goto label105;
                    }
                    if ((temp159 == 1)) {
                        this.Manager.Comment("reaching state \'S930\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1065\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1145\'");
                        int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SessionSetupResponseChecker1)));
                        if ((temp158 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1222();
                            goto label104;
                        }
                        if ((temp158 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1222();
                            goto label104;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SessionSetupResponseChecker1)));
                    label104:
;
                        goto label105;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NegotiateResponseChecker)));
                label105:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S185");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S185");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S425");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S425");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S825");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S825");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S825");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S825, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S825");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1222() {
            this.Manager.Comment("reaching state \'S1222\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1302\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1382\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1462\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1542\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1622\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1702\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1782\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1862\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1942\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2022\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2102\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1382");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1382");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1622");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1622, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1622");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1622");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1862");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1862");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S186\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S426\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S506\'");
                    bool temp160;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp160);
                    this.Manager.Comment("reaching state \'S586\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp160, "createPipeStatus of CreatePipeAndMailslot, state S586");
                    this.Manager.Comment("reaching state \'S666\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S746\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S826\'");
                    int temp161 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NegotiateResponseChecker)));
                    if ((temp161 == 0)) {
                        this.Manager.Comment("reaching state \'S933\'");
                        goto label106;
                    }
                    if ((temp161 == 1)) {
                        this.Manager.Comment("reaching state \'S932\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1066\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1120();
                        goto label106;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NegotiateResponseChecker)));
                label106:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S186");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S186");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S426");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S426");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S826");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S826");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S826");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S826");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S826");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S826");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S826, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S187\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S427\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S507\'");
                    bool temp162;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp162);
                    this.Manager.Comment("reaching state \'S587\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp162, "createPipeStatus of CreatePipeAndMailslot, state S587");
                    this.Manager.Comment("reaching state \'S667\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S747\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S827\'");
                    int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NegotiateResponseChecker)));
                    if ((temp164 == 0)) {
                        this.Manager.Comment("reaching state \'S935\'");
                        goto label108;
                    }
                    if ((temp164 == 1)) {
                        this.Manager.Comment("reaching state \'S934\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1067\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1146\'");
                        int temp163 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SessionSetupResponseChecker1)));
                        if ((temp163 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1223();
                            goto label107;
                        }
                        if ((temp163 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1223();
                            goto label107;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SessionSetupResponseChecker1)));
                    label107:
;
                        goto label108;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NegotiateResponseChecker)));
                label108:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S187");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S187");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S427");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S427");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S827");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S827");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S827");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S827");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S827");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S827");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S827");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S827, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S827");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1223() {
            this.Manager.Comment("reaching state \'S1223\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1303\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1383\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1463\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1543\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1623\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1703\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1783\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1863\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1943\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2023\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2103\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1383");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1383");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1623");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1623, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1623");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1623");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1863");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1863");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S188\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S428\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S508\'");
                    bool temp165;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp165);
                    this.Manager.Comment("reaching state \'S588\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp165, "createPipeStatus of CreatePipeAndMailslot, state S588");
                    this.Manager.Comment("reaching state \'S668\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S748\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S828\'");
                    int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NegotiateResponseChecker)));
                    if ((temp167 == 0)) {
                        this.Manager.Comment("reaching state \'S937\'");
                        goto label110;
                    }
                    if ((temp167 == 1)) {
                        this.Manager.Comment("reaching state \'S936\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1068\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1147\'");
                        int temp166 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SessionSetupResponseChecker1)));
                        if ((temp166 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1224();
                            goto label109;
                        }
                        if ((temp166 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1224();
                            goto label109;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SessionSetupResponseChecker1)));
                    label109:
;
                        goto label110;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NegotiateResponseChecker)));
                label110:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S188");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S428");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S428");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S828");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S828");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S828");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S828");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S828");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S828");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S828");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S828, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S828");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1224() {
            this.Manager.Comment("reaching state \'S1224\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1304\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1384\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1464\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1544\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1624\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1704\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1784\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1864\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1944\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2024\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2104\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1384");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1384");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1624");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1624, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1624");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1624");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1864");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1864");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S189\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S429\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S509\'");
                    bool temp168;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp168);
                    this.Manager.Comment("reaching state \'S589\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp168, "createPipeStatus of CreatePipeAndMailslot, state S589");
                    this.Manager.Comment("reaching state \'S669\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S749\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S829\'");
                    int temp170 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NegotiateResponseChecker)));
                    if ((temp170 == 0)) {
                        this.Manager.Comment("reaching state \'S939\'");
                        goto label112;
                    }
                    if ((temp170 == 1)) {
                        this.Manager.Comment("reaching state \'S938\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1069\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1148\'");
                        int temp169 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SessionSetupResponseChecker1)));
                        if ((temp169 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1225();
                            goto label111;
                        }
                        if ((temp169 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1225();
                            goto label111;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SessionSetupResponseChecker1)));
                    label111:
;
                        goto label112;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NegotiateResponseChecker)));
                label112:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S189");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S429");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S429");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S829");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S829");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S829, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S829");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1225() {
            this.Manager.Comment("reaching state \'S1225\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1305\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1385\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1465\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1545\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1625\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1705\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1785\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1865\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1945\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2025\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2105\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1385");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1385");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1625");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1625, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S163\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S403\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S483\'");
                    bool temp171;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp171);
                    this.Manager.Comment("reaching state \'S563\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp171, "createPipeStatus of CreatePipeAndMailslot, state S563");
                    this.Manager.Comment("reaching state \'S643\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S723\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S803\'");
                    int temp173 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NegotiateResponseChecker)));
                    if ((temp173 == 0)) {
                        this.Manager.Comment("reaching state \'S887\'");
                        goto label114;
                    }
                    if ((temp173 == 1)) {
                        this.Manager.Comment("reaching state \'S886\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1043\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1123\'");
                        int temp172 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SessionSetupResponseChecker1)));
                        if ((temp172 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1200();
                            goto label113;
                        }
                        if ((temp172 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1200();
                            goto label113;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SessionSetupResponseChecker1)));
                    label113:
;
                        goto label114;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NegotiateResponseChecker)));
                label114:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S163");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S163");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S403");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S803");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S803");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S803");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S803");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S803");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S803");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S803, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1200() {
            this.Manager.Comment("reaching state \'S1200\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1280\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1360\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1440\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1520\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1600\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1680\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1760\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1840\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1920\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2000\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2080\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1360");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1360");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1600");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1600, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1840");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1840");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S190\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S430\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S510\'");
                    bool temp174;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp174);
                    this.Manager.Comment("reaching state \'S590\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp174, "createPipeStatus of CreatePipeAndMailslot, state S590");
                    this.Manager.Comment("reaching state \'S670\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S750\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S830\'");
                    int temp176 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NegotiateResponseChecker)));
                    if ((temp176 == 0)) {
                        this.Manager.Comment("reaching state \'S941\'");
                        goto label116;
                    }
                    if ((temp176 == 1)) {
                        this.Manager.Comment("reaching state \'S940\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1070\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1149\'");
                        int temp175 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SessionSetupResponseChecker1)));
                        if ((temp175 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1226();
                            goto label115;
                        }
                        if ((temp175 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1226();
                            goto label115;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SessionSetupResponseChecker1)));
                    label115:
;
                        goto label116;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NegotiateResponseChecker)));
                label116:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S190");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S430");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S430");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S830");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S830");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S830");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S830");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S830");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S830");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S830");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S830, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S830");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1226() {
            this.Manager.Comment("reaching state \'S1226\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1306\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1386\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1466\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1546\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1626\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1706\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1786\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1866\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1946\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2026\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2106\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1386");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1626");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1626, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1626");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1866");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S191\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S431\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S511\'");
                    bool temp177;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp177);
                    this.Manager.Comment("reaching state \'S591\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp177, "createPipeStatus of CreatePipeAndMailslot, state S591");
                    this.Manager.Comment("reaching state \'S671\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S751\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S831\'");
                    int temp179 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NegotiateResponseChecker)));
                    if ((temp179 == 0)) {
                        this.Manager.Comment("reaching state \'S943\'");
                        goto label118;
                    }
                    if ((temp179 == 1)) {
                        this.Manager.Comment("reaching state \'S942\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1071\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1150\'");
                        int temp178 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SessionSetupResponseChecker1)));
                        if ((temp178 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1227();
                            goto label117;
                        }
                        if ((temp178 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1227();
                            goto label117;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SessionSetupResponseChecker1)));
                    label117:
;
                        goto label118;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NegotiateResponseChecker)));
                label118:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S191");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S431");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S431");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S831");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S831");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S831");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S831");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S831");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S831");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S831");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S831, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S831");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1227() {
            this.Manager.Comment("reaching state \'S1227\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1307\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1387\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1467\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1547\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1627\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1707\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1787\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1867\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1947\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2027\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2107\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1387");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1387");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1627");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1627, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1627");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1627");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1867");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1867");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S192\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S432\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S512\'");
                    bool temp180;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp180);
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp180, "createPipeStatus of CreatePipeAndMailslot, state S592");
                    this.Manager.Comment("reaching state \'S672\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S752\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S832\'");
                    int temp182 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NegotiateResponseChecker)));
                    if ((temp182 == 0)) {
                        this.Manager.Comment("reaching state \'S945\'");
                        goto label120;
                    }
                    if ((temp182 == 1)) {
                        this.Manager.Comment("reaching state \'S944\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1072\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1151\'");
                        int temp181 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SessionSetupResponseChecker1)));
                        if ((temp181 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1228();
                            goto label119;
                        }
                        if ((temp181 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1228();
                            goto label119;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SessionSetupResponseChecker1)));
                    label119:
;
                        goto label120;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NegotiateResponseChecker)));
                label120:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S192");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S432");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S432");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S832");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S832");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S832");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S832");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S832");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S832");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S832");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S832, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S832");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1228() {
            this.Manager.Comment("reaching state \'S1228\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1308\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1388\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1468\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1548\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1628\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1708\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1788\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1868\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1948\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2028\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2108\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1388");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1388");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1628");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1628, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1628");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1628");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1868");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S193\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S353\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S433\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S513\'");
                    bool temp183;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp183);
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp183, "createPipeStatus of CreatePipeAndMailslot, state S593");
                    this.Manager.Comment("reaching state \'S673\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S753\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S833\'");
                    int temp185 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NegotiateResponseChecker)));
                    if ((temp185 == 0)) {
                        this.Manager.Comment("reaching state \'S947\'");
                        goto label122;
                    }
                    if ((temp185 == 1)) {
                        this.Manager.Comment("reaching state \'S946\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1073\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1152\'");
                        int temp184 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SessionSetupResponseChecker1)));
                        if ((temp184 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1229();
                            goto label121;
                        }
                        if ((temp184 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1229();
                            goto label121;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SessionSetupResponseChecker1)));
                    label121:
;
                        goto label122;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NegotiateResponseChecker)));
                label122:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S193");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S193");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S433");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S433");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S833");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S833");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S833");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S833");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S833");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S833");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S833, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1229() {
            this.Manager.Comment("reaching state \'S1229\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1309\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1389\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1469\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1549\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1629\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1709\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1789\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1869\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1949\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2029\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2109\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1389");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1389");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1629");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1629, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1869");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1869");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S194\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S354\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S434\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S514\'");
                    bool temp186;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp186);
                    this.Manager.Comment("reaching state \'S594\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp186, "createPipeStatus of CreatePipeAndMailslot, state S594");
                    this.Manager.Comment("reaching state \'S674\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S754\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S834\'");
                    int temp188 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NegotiateResponseChecker)));
                    if ((temp188 == 0)) {
                        this.Manager.Comment("reaching state \'S949\'");
                        goto label124;
                    }
                    if ((temp188 == 1)) {
                        this.Manager.Comment("reaching state \'S948\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1074\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1153\'");
                        int temp187 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SessionSetupResponseChecker1)));
                        if ((temp187 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1230();
                            goto label123;
                        }
                        if ((temp187 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1230();
                            goto label123;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SessionSetupResponseChecker1)));
                    label123:
;
                        goto label124;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NegotiateResponseChecker)));
                label124:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S194");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S194");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S434");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S434");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S834");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S834");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S834");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S834");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S834");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S834");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S834");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S834, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S834");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1230() {
            this.Manager.Comment("reaching state \'S1230\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1310\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1390\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1470\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1550\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1630\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1710\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1790\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1870\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1950\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2030\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2110\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1630");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1630, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1630");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1630");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1870");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1870");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S195\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S355\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S435\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S515\'");
                    bool temp189;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp189);
                    this.Manager.Comment("reaching state \'S595\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp189, "createPipeStatus of CreatePipeAndMailslot, state S595");
                    this.Manager.Comment("reaching state \'S675\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S755\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S835\'");
                    int temp191 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NegotiateResponseChecker)));
                    if ((temp191 == 0)) {
                        this.Manager.Comment("reaching state \'S951\'");
                        goto label126;
                    }
                    if ((temp191 == 1)) {
                        this.Manager.Comment("reaching state \'S950\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1075\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1154\'");
                        int temp190 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SessionSetupResponseChecker1)));
                        if ((temp190 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1231();
                            goto label125;
                        }
                        if ((temp190 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1231();
                            goto label125;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SessionSetupResponseChecker1)));
                    label125:
;
                        goto label126;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NegotiateResponseChecker)));
                label126:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S195");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S435");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S435");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S835");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S835");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S835");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S835");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S835");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S835");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S835");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S835, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S835");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1231() {
            this.Manager.Comment("reaching state \'S1231\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1311\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1391\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1471\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1551\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1631\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1711\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMoveFile)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMoveFile);
                    this.Manager.Comment("reaching state \'S1791\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1871\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1951\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2031\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2111\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1391");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1391");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1631");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1631, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1631");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1871");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1871");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1154");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S196\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S356\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S436\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S516\'");
                    bool temp192;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp192);
                    this.Manager.Comment("reaching state \'S596\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp192, "createPipeStatus of CreatePipeAndMailslot, state S596");
                    this.Manager.Comment("reaching state \'S676\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S756\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S836\'");
                    int temp193 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NegotiateResponseChecker)));
                    if ((temp193 == 0)) {
                        this.Manager.Comment("reaching state \'S953\'");
                        goto label127;
                    }
                    if ((temp193 == 1)) {
                        this.Manager.Comment("reaching state \'S952\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1076\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1155();
                        goto label127;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NegotiateResponseChecker)));
                label127:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S196");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S196");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S436");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S436");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S436");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S436");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S436");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S436");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S836");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S836");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S836");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S836");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S836, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S197\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S357\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S437\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S517\'");
                    bool temp194;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp194);
                    this.Manager.Comment("reaching state \'S597\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp194, "createPipeStatus of CreatePipeAndMailslot, state S597");
                    this.Manager.Comment("reaching state \'S677\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S757\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S837\'");
                    int temp196 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NegotiateResponseChecker)));
                    if ((temp196 == 0)) {
                        this.Manager.Comment("reaching state \'S955\'");
                        goto label129;
                    }
                    if ((temp196 == 1)) {
                        this.Manager.Comment("reaching state \'S954\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1077\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1156\'");
                        int temp195 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SessionSetupResponseChecker1)));
                        if ((temp195 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1234();
                            goto label128;
                        }
                        if ((temp195 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1234();
                            goto label128;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SessionSetupResponseChecker1)));
                    label128:
;
                        goto label129;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NegotiateResponseChecker)));
                label129:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S197");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S197");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S437");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S437");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S437");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S437");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S437");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S437");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S837");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S837");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S837");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S837");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S837");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S837");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S837");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S837, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S837");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1234() {
            this.Manager.Comment("reaching state \'S1234\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1314\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1394\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1474\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1554\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1634\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1714\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1794\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1874\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1954\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2034\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2114\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1394");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1394");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1634");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1634, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1634");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1874");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1874");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S198\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S438\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S518\'");
                    bool temp197;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp197);
                    this.Manager.Comment("reaching state \'S598\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp197, "createPipeStatus of CreatePipeAndMailslot, state S598");
                    this.Manager.Comment("reaching state \'S678\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S758\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S838\'");
                    int temp199 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NegotiateResponseChecker)));
                    if ((temp199 == 0)) {
                        this.Manager.Comment("reaching state \'S957\'");
                        goto label131;
                    }
                    if ((temp199 == 1)) {
                        this.Manager.Comment("reaching state \'S956\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1078\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1157\'");
                        int temp198 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SessionSetupResponseChecker1)));
                        if ((temp198 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1235();
                            goto label130;
                        }
                        if ((temp198 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1235();
                            goto label130;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SessionSetupResponseChecker1)));
                    label130:
;
                        goto label131;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NegotiateResponseChecker)));
                label131:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S198");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S198");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S438");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S438");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S438");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S438");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S438");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S438");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S838");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S838");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S838");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S838");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S838");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S838");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S838, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1235() {
            this.Manager.Comment("reaching state \'S1235\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1315\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1395\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1475\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1555\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1635\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1715\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1795\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1875\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1955\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2035\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2115\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1395");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1395");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1635");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1635, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1875");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1875");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S199\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S439\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S519\'");
                    bool temp200;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp200);
                    this.Manager.Comment("reaching state \'S599\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp200, "createPipeStatus of CreatePipeAndMailslot, state S599");
                    this.Manager.Comment("reaching state \'S679\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S759\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S839\'");
                    int temp202 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NegotiateResponseChecker)));
                    if ((temp202 == 0)) {
                        this.Manager.Comment("reaching state \'S959\'");
                        goto label133;
                    }
                    if ((temp202 == 1)) {
                        this.Manager.Comment("reaching state \'S958\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1079\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1158\'");
                        int temp201 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SessionSetupResponseChecker1)));
                        if ((temp201 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1236();
                            goto label132;
                        }
                        if ((temp201 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1236();
                            goto label132;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SessionSetupResponseChecker1)));
                    label132:
;
                        goto label133;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NegotiateResponseChecker)));
                label133:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S199");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S199");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S439");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S439");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S439");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S439");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S439");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S439");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S839");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S839");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S839");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S839");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S839");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S839");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S839");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S839, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S839");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1236() {
            this.Manager.Comment("reaching state \'S1236\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1316\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1396\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1476\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1556\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1636\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1716\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlMarkHandle)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlMarkHandle);
                    this.Manager.Comment("reaching state \'S1796\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1876\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1956\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2036\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2116\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1396");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1396");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1636");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1636, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1636");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1876");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S164\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S404\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S484\'");
                    bool temp203;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp203);
                    this.Manager.Comment("reaching state \'S564\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp203, "createPipeStatus of CreatePipeAndMailslot, state S564");
                    this.Manager.Comment("reaching state \'S644\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S724\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S804\'");
                    int temp205 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NegotiateResponseChecker)));
                    if ((temp205 == 0)) {
                        this.Manager.Comment("reaching state \'S889\'");
                        goto label135;
                    }
                    if ((temp205 == 1)) {
                        this.Manager.Comment("reaching state \'S888\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1044\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1124\'");
                        int temp204 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SessionSetupResponseChecker1)));
                        if ((temp204 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1201();
                            goto label134;
                        }
                        if ((temp204 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1201();
                            goto label134;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SessionSetupResponseChecker1)));
                    label134:
;
                        goto label135;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NegotiateResponseChecker)));
                label135:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S164");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S164");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S404");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S804");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S804");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S804");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S804");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S804");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S804");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S804, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1201() {
            this.Manager.Comment("reaching state \'S1201\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1281\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1361\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1441\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1521\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1601\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1681\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1761\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1841\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1921\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2001\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2081\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1361");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1361");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1601");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1601, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1841");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1841");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S200\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S440\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S520\'");
                    bool temp206;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp206);
                    this.Manager.Comment("reaching state \'S600\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp206, "createPipeStatus of CreatePipeAndMailslot, state S600");
                    this.Manager.Comment("reaching state \'S680\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S760\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S840\'");
                    int temp208 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NegotiateResponseChecker)));
                    if ((temp208 == 0)) {
                        this.Manager.Comment("reaching state \'S961\'");
                        goto label137;
                    }
                    if ((temp208 == 1)) {
                        this.Manager.Comment("reaching state \'S960\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1080\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1159\'");
                        int temp207 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SessionSetupResponseChecker1)));
                        if ((temp207 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1237();
                            goto label136;
                        }
                        if ((temp207 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1237();
                            goto label136;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SessionSetupResponseChecker1)));
                    label136:
;
                        goto label137;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NegotiateResponseChecker)));
                label137:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S200");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S200");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S440");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S440");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S440");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S440");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S440");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S440");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S840");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S840");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S840");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S840");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S840");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S840");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S840");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S840, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S840");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1237() {
            this.Manager.Comment("reaching state \'S1237\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1317\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1397\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1477\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1557\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1637\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1717\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1797\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1877\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1957\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2037\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2117\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1397");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1397");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1637");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1637, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1637");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1637");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1877");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1877");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S201\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S441\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S521\'");
                    bool temp209;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp209);
                    this.Manager.Comment("reaching state \'S601\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp209, "createPipeStatus of CreatePipeAndMailslot, state S601");
                    this.Manager.Comment("reaching state \'S681\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S761\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S841\'");
                    int temp211 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NegotiateResponseChecker)));
                    if ((temp211 == 0)) {
                        this.Manager.Comment("reaching state \'S963\'");
                        goto label139;
                    }
                    if ((temp211 == 1)) {
                        this.Manager.Comment("reaching state \'S962\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1081\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1160\'");
                        int temp210 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SessionSetupResponseChecker1)));
                        if ((temp210 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1238();
                            goto label138;
                        }
                        if ((temp210 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1238();
                            goto label138;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SessionSetupResponseChecker1)));
                    label138:
;
                        goto label139;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NegotiateResponseChecker)));
                label139:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S201");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S201");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S441");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S441");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S441");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S441");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S441");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S441");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S841");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S841");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S841");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S841");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S841");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S841");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S841");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S841, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S841");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1238() {
            this.Manager.Comment("reaching state \'S1238\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1318\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1398\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1478\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1558\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1638\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1718\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1798\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1878\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1958\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2038\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2118\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1398");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1398");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1638");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1638, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S202\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S442\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S522\'");
                    bool temp212;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp212);
                    this.Manager.Comment("reaching state \'S602\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp212, "createPipeStatus of CreatePipeAndMailslot, state S602");
                    this.Manager.Comment("reaching state \'S682\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S762\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S842\'");
                    int temp214 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NegotiateResponseChecker)));
                    if ((temp214 == 0)) {
                        this.Manager.Comment("reaching state \'S965\'");
                        goto label141;
                    }
                    if ((temp214 == 1)) {
                        this.Manager.Comment("reaching state \'S964\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1082\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1161\'");
                        int temp213 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SessionSetupResponseChecker1)));
                        if ((temp213 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1239();
                            goto label140;
                        }
                        if ((temp213 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1239();
                            goto label140;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SessionSetupResponseChecker1)));
                    label140:
;
                        goto label141;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NegotiateResponseChecker)));
                label141:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S202");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S202");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S442");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S442");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S442");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S442");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S442");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S442");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S842");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S842");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S842");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S842");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S842");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S842");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S842, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1239() {
            this.Manager.Comment("reaching state \'S1239\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1319\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1399\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1479\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1559\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1639\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1719\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlQueryRetrievalPoin" +
                            "ters)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlQueryRetrievalPointers);
                    this.Manager.Comment("reaching state \'S1799\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1879\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1959\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2039\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2119\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1399");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1399");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1639");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1639, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1639");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1639");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1879");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S203\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S443\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S523\'");
                    bool temp215;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp215);
                    this.Manager.Comment("reaching state \'S603\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp215, "createPipeStatus of CreatePipeAndMailslot, state S603");
                    this.Manager.Comment("reaching state \'S683\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S763\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S843\'");
                    int temp217 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NegotiateResponseChecker)));
                    if ((temp217 == 0)) {
                        this.Manager.Comment("reaching state \'S967\'");
                        goto label143;
                    }
                    if ((temp217 == 1)) {
                        this.Manager.Comment("reaching state \'S966\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1083\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1162\'");
                        int temp216 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SessionSetupResponseChecker1)));
                        if ((temp216 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1240();
                            goto label142;
                        }
                        if ((temp216 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1240();
                            goto label142;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SessionSetupResponseChecker1)));
                    label142:
;
                        goto label143;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NegotiateResponseChecker)));
                label143:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S203");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S203");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S443");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S443");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S443");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S443");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S443");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S443");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S843");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S843");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S843");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S843");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S843");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S843");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S843, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1240() {
            this.Manager.Comment("reaching state \'S1240\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1320\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1400\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1480\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1560\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1640\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1720\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1800\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1880\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1960\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2040\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2120\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1400");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1400");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1640");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1640, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1640");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1640");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1880");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1880");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1162");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S204\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S444\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S524\'");
                    bool temp218;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp218);
                    this.Manager.Comment("reaching state \'S604\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp218, "createPipeStatus of CreatePipeAndMailslot, state S604");
                    this.Manager.Comment("reaching state \'S684\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S764\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S844\'");
                    int temp220 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NegotiateResponseChecker)));
                    if ((temp220 == 0)) {
                        this.Manager.Comment("reaching state \'S969\'");
                        goto label145;
                    }
                    if ((temp220 == 1)) {
                        this.Manager.Comment("reaching state \'S968\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1084\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1163\'");
                        int temp219 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SessionSetupResponseChecker1)));
                        if ((temp219 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1241();
                            goto label144;
                        }
                        if ((temp219 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1241();
                            goto label144;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SessionSetupResponseChecker1)));
                    label144:
;
                        goto label145;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NegotiateResponseChecker)));
                label145:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S204");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S204");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S444");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S444");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S444");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S444");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S444");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S444");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S844");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S844");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S844");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S844");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S844");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S844");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S844");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S844, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S844");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1241() {
            this.Manager.Comment("reaching state \'S1241\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1321\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1401\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1481\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1561\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1641\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1721\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1801\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1881\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1961\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2041\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2121\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1401");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1401");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1641");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1641, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1641");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1641");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1881");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1881");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S205\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S445\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S525\'");
                    bool temp221;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp221);
                    this.Manager.Comment("reaching state \'S605\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp221, "createPipeStatus of CreatePipeAndMailslot, state S605");
                    this.Manager.Comment("reaching state \'S685\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S765\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S845\'");
                    int temp223 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NegotiateResponseChecker)));
                    if ((temp223 == 0)) {
                        this.Manager.Comment("reaching state \'S971\'");
                        goto label147;
                    }
                    if ((temp223 == 1)) {
                        this.Manager.Comment("reaching state \'S970\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1085\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1164\'");
                        int temp222 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SessionSetupResponseChecker1)));
                        if ((temp222 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1242();
                            goto label146;
                        }
                        if ((temp222 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1242();
                            goto label146;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SessionSetupResponseChecker1)));
                    label146:
;
                        goto label147;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NegotiateResponseChecker)));
                label147:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S205");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S205");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S445");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S445");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S445");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S445");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S445");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S445");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S845");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S845");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S845");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S845");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S845");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S845");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S845");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S845, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S845");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1242() {
            this.Manager.Comment("reaching state \'S1242\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1322\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1402\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1482\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1562\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1642\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1722\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOplockBreakAcknowl" +
                            "edge)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOplockBreakAcknowledge);
                    this.Manager.Comment("reaching state \'S1802\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1882\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1962\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2042\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2122\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1402");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1402");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1642");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1642, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1642");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1642");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1882");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1882");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S206\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S446\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S526\'");
                    bool temp224;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp224);
                    this.Manager.Comment("reaching state \'S606\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp224, "createPipeStatus of CreatePipeAndMailslot, state S606");
                    this.Manager.Comment("reaching state \'S686\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S766\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S846\'");
                    int temp226 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NegotiateResponseChecker)));
                    if ((temp226 == 0)) {
                        this.Manager.Comment("reaching state \'S973\'");
                        goto label149;
                    }
                    if ((temp226 == 1)) {
                        this.Manager.Comment("reaching state \'S972\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1086\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1165\'");
                        int temp225 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SessionSetupResponseChecker1)));
                        if ((temp225 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1243();
                            goto label148;
                        }
                        if ((temp225 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1243();
                            goto label148;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SessionSetupResponseChecker1)));
                    label148:
;
                        goto label149;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NegotiateResponseChecker)));
                label149:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S446");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S446");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S446");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S446");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S446");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S446");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S846");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S846");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S846");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S846, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S846");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1243() {
            this.Manager.Comment("reaching state \'S1243\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1323\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1403\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1483\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1563\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1643\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1723\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpLockBreakNotify)" +
                            "\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpLockBreakNotify);
                    this.Manager.Comment("reaching state \'S1803\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1883\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1963\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2043\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2123\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1403");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1403");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1643");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1643, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1643");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1643");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1883");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1883");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S207\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S447\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S527\'");
                    bool temp227;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp227);
                    this.Manager.Comment("reaching state \'S607\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp227, "createPipeStatus of CreatePipeAndMailslot, state S607");
                    this.Manager.Comment("reaching state \'S687\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S767\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S847\'");
                    int temp229 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NegotiateResponseChecker)));
                    if ((temp229 == 0)) {
                        this.Manager.Comment("reaching state \'S975\'");
                        goto label151;
                    }
                    if ((temp229 == 1)) {
                        this.Manager.Comment("reaching state \'S974\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1087\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1166\'");
                        int temp228 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SessionSetupResponseChecker1)));
                        if ((temp228 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1244();
                            goto label150;
                        }
                        if ((temp228 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1244();
                            goto label150;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SessionSetupResponseChecker1)));
                    label150:
;
                        goto label151;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NegotiateResponseChecker)));
                label151:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S207");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S447");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S447");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S447");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S447");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S447");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S447");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S847");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S847");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S847");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S847");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S847");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S847");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S847");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S847, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S847");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1244() {
            this.Manager.Comment("reaching state \'S1244\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1324\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1404\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1484\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1564\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1644\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1724\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1804\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1884\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1964\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2044\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2124\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1404");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1404");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1644");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1644, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1884");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1884");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96");
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S208\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S448\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S528\'");
                    bool temp230;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp230);
                    this.Manager.Comment("reaching state \'S608\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp230, "createPipeStatus of CreatePipeAndMailslot, state S608");
                    this.Manager.Comment("reaching state \'S688\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S768\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S848\'");
                    int temp232 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96NegotiateResponseChecker)));
                    if ((temp232 == 0)) {
                        this.Manager.Comment("reaching state \'S977\'");
                        goto label153;
                    }
                    if ((temp232 == 1)) {
                        this.Manager.Comment("reaching state \'S976\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1088\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1167\'");
                        int temp231 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SessionSetupResponseChecker1)));
                        if ((temp231 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1245();
                            goto label152;
                        }
                        if ((temp231 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1245();
                            goto label152;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SessionSetupResponseChecker1)));
                    label152:
;
                        goto label153;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96NegotiateResponseChecker)));
                label153:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S448");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S448");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S448");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S448");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S448");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S448");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S848");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S848");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S848");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S848");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S848");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S848");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S848");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S848, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S848");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1245() {
            this.Manager.Comment("reaching state \'S1245\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1325\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1405\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1485\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1565\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1645\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1725\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlPipeAssignEvent)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlPipeAssignEvent);
                    this.Manager.Comment("reaching state \'S1805\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1885\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1965\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2045\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2125\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1405");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1405");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1645");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1645, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1645");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1645");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1885");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1885");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S96SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98() {
            this.Manager.BeginTest("NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98");
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S209\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S449\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S529\'");
                    bool temp233;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp233);
                    this.Manager.Comment("reaching state \'S609\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp233, "createPipeStatus of CreatePipeAndMailslot, state S609");
                    this.Manager.Comment("reaching state \'S689\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S769\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S849\'");
                    int temp235 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98NegotiateResponseChecker)));
                    if ((temp235 == 0)) {
                        this.Manager.Comment("reaching state \'S979\'");
                        goto label155;
                    }
                    if ((temp235 == 1)) {
                        this.Manager.Comment("reaching state \'S978\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S1089\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S1168\'");
                        int temp234 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SessionSetupResponseChecker1)));
                        if ((temp234 == 0)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1246();
                            goto label154;
                        }
                        if ((temp234 == 1)) {
                            NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1246();
                            goto label154;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SessionSetupResponseChecker1)));
                    label154:
;
                        goto label155;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98NegotiateResponseChecker)));
                label155:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S449");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S449");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S449");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S449");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S449");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S449");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S849");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S849, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S1246() {
            this.Manager.Comment("reaching state \'S1246\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S1326\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S1406\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1486\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1566\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1646\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1726\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlOpBatchAckClosePen" +
                            "ding)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlOpBatchAckClosePending);
                    this.Manager.Comment("reaching state \'S1806\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1886\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1966\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S2046\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S2126\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1406");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1406");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1646");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1646, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1646");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1646");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1886");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1886");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S98SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S1168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
    }
}
