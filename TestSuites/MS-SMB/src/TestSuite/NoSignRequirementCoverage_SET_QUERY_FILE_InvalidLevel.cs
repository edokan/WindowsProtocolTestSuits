//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel : PtfTestClassBase {
        
        public NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void ErrorTrans2QueryFileInfoResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo ErrorTrans2QueryFileInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTrans2QueryFileInfoResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTrans2QueryFileInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S4\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S10\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S12\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S14\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S14");
                    this.Manager.Comment("reaching state \'S16\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S20\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S22\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S24\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S26\'");
                        int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SessionSetupResponseChecker1)));
                        if ((temp2 == 0)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS28();
                            goto label1;
                        }
                        if ((temp2 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS28();
                            goto label1;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SessionSetupResponseChecker1)));
                    label1:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S4");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S4");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S10");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S20");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S20");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S20");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S20");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S20");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S20, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S20");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS28() {
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S32\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S38\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(5,1,1,False,False,Invalid,0,0)\'");
                    this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(5, 1, 1, false, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, 0);
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S44\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker3)));
                    if ((temp1 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS46();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS46();
                        goto label0;
                    }
                    if ((temp1 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS47();
                        goto label0;
                    }
                    if ((temp1 == 3)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS47();
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker3)));
                label0:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S32");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S38");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S38, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S38");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S44");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4290");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4290");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS46() {
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS47();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS47() {
            this.Manager.Comment("reaching state \'S47\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S44");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4290");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4290");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S44");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S44");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S44");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S44");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S44");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS0SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S5\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S7\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S11\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S13\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp3);
                    this.Manager.Comment("reaching state \'S15\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp3, "createPipeStatus of CreatePipeAndMailslot, state S15");
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S19\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S21\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S23\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S25\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S27\'");
                        int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SessionSetupResponseChecker1)));
                        if ((temp5 == 0)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS29();
                            goto label3;
                        }
                        if ((temp5 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS29();
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SessionSetupResponseChecker1)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S5");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S5");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S11");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S21");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S21");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S21");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S21");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S21, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS29() {
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S33\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S39\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(5,1,1,False,False,Invalid,0,0)\'");
                    this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(5, 1, 1, false, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, 0);
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S45\'");
                    int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker3)));
                    if ((temp4 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS48();
                        goto label2;
                    }
                    if ((temp4 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS48();
                        goto label2;
                    }
                    if ((temp4 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS49();
                        goto label2;
                    }
                    if ((temp4 == 3)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS49();
                        goto label2;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker3)));
                label2:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S33");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S39");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S39, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S39");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S45");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4290");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4290");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS48() {
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS49();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS49() {
            this.Manager.Comment("reaching state \'S49\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S45");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4290");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4290");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S45");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S45");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S45");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S45");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevelS2SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
    }
}
