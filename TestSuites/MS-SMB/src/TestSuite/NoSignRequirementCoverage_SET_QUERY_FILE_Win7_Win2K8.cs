//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8 : PtfTestClassBase {
        
        public NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2SetFileInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTrans2QueryFileInfoResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented);
        
        public delegate void Trans2QueryFileInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2QueryFileInfoRequestDelegate1();
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo Trans2SetFileInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2SetFileInfoResponse");
        
        static System.Reflection.EventInfo ErrorTrans2QueryFileInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTrans2QueryFileInfoResponse");
        
        static System.Reflection.EventInfo Trans2QueryFileInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2QueryFileInfoResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.MethodBase Trans2QueryFileInfoRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2QueryFileInfoRequest", typeof(int), typeof(int), typeof(int), typeof(bool), typeof(bool), typeof(Microsoft.Protocol.TestSuites.Smb.InformationLevel), typeof(int), typeof(int));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTrans2QueryFileInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2QueryFileInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2SetFileInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S24\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S60\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S72\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S84\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S84");
                    this.Manager.Comment("reaching state \'S96\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S108\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S120\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S132\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S144\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S156\'");
                        int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SessionSetupResponseChecker1)));
                        if ((temp7 == 0)) {
                            this.Manager.Comment("reaching state \'S168\'");
                            goto label6;
                        }
                        if ((temp7 == 1)) {
                            this.Manager.Comment("reaching state \'S169\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S193\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S206\'");
                            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0TreeConnectResponseChecker)));
                            if ((temp4 == 0)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220();
                                goto label3;
                            }
                            if ((temp4 == 1)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220();
                                goto label3;
                            }
                            if ((temp4 == 2)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220();
                                goto label3;
                            }
                            if ((temp4 == 3)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220();
                                goto label3;
                            }
                            if ((temp4 == 4)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220();
                                goto label3;
                            }
                            if ((temp4 == 5)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220();
                                goto label3;
                            }
                            if ((temp4 == 6)) {
                                this.Manager.Comment("reaching state \'S219\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S246\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S258\'");
                                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker7)));
                                if ((temp3 == 0)) {
                                    this.Manager.Comment("reaching state \'S270\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,False,False,SmbSetFileB" +
                                            "asicInfo,0,\"NewName.txt\",False,0)\'");
                                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, false, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.SmbSetFileBasicInfo, 0, "NewName.txt", false, 0);
                                    this.Manager.Comment("reaching state \'S303\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                                    this.Manager.Comment("reaching state \'S324\'");
                                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0Trans2SetFileInfoResponseChecker)));
                                    if ((temp2 == 0)) {
                                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S346();
                                        goto label1;
                                    }
                                    if ((temp2 == 1)) {
                                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S346();
                                        goto label1;
                                    }
                                    if ((temp2 == 2)) {
                                        this.Manager.Comment("reaching state \'S347\'");
                                        goto label1;
                                    }
                                    if ((temp2 == 3)) {
                                        this.Manager.Comment("reaching state \'S348\'");
                                        goto label1;
                                    }
                                    if ((temp2 == 4)) {
                                        this.Manager.Comment("reaching state \'S345\'");
                                        this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(6,1,1,False,False,SmbInfoStandard" +
                                                ",0,0)\'");
                                        this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(6, 1, 1, false, false, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(0)), 0, 0);
                                        this.Manager.Comment("reaching state \'S375\'");
                                        this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
                                        this.Manager.Comment("reaching state \'S386\'");
                                        int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0Trans2QueryFileInfoResponseChecker)));
                                        if ((temp1 == 0)) {
                                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S395();
                                            goto label0;
                                        }
                                        if ((temp1 == 1)) {
                                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S395();
                                            goto label0;
                                        }
                                        if ((temp1 == 2)) {
                                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S396();
                                            goto label0;
                                        }
                                        if ((temp1 == 3)) {
                                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S396();
                                            goto label0;
                                        }
                                        if ((temp1 == 4)) {
                                            this.Manager.Comment("reaching state \'S394\'");
                                            goto label0;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0Trans2QueryFileInfoResponseChecker)));
                                    label0:
;
                                        goto label1;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0Trans2SetFileInfoResponseChecker)));
                                label1:
;
                                    goto label2;
                                }
                                if ((temp3 == 1)) {
                                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S271();
                                    goto label2;
                                }
                                if ((temp3 == 2)) {
                                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S271();
                                    goto label2;
                                }
                                if ((temp3 == 3)) {
                                    this.Manager.Comment("reaching state \'S272\'");
                                    goto label2;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker7)));
                            label2:
;
                                goto label3;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0TreeConnectResponseChecker)));
                        label3:
;
                            goto label6;
                        }
                        if ((temp7 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S170();
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SessionSetupResponseChecker1)));
                    label6:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S24");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S24");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S60");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S60");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S60");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S60");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S60");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S60");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S120");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S120, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S220() {
            this.Manager.Comment("reaching state \'S220\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S206");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S206");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S258");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S258, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S324");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S346() {
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S376\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S387\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S324");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S324");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S324");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S324");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S324");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S324");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFileInfoResponse, state S324");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S324");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NotSupported,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S386");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S395() {
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S400\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S396();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S396() {
            this.Manager.Comment("reaching state \'S396\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NotSupported,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S386");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S386");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S386");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0Trans2QueryFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryFileInfoResponse(6,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of Trans2QueryFileInfoResponse, state S386");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryFileInfoResponse, state S386");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryFileInfoResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryFileInfoResponse, state S386");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryFileInfoResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9319");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9319");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S258");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S258");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S271() {
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S304\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S325\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S258");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S258");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S258");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S258");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S170() {
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S194\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S207\'");
            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker7)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker8)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker9)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker10)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker11)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0TreeConnectResponseChecker1)));
            if ((temp6 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221();
                goto label5;
            }
            if ((temp6 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221();
                goto label5;
            }
            if ((temp6 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221();
                goto label5;
            }
            if ((temp6 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221();
                goto label5;
            }
            if ((temp6 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221();
                goto label5;
            }
            if ((temp6 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221();
                goto label5;
            }
            if ((temp6 == 6)) {
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                        "se,True,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S247();
                goto label5;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker7)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker8)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker9)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker10)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker11)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0TreeConnectResponseChecker1)));
        label5:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S207");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S221() {
            this.Manager.Comment("reaching state \'S221\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S207");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker10(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S207");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorTreeConnectResponseChecker11(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S207");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S207");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S207");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S247() {
            this.Manager.Comment("reaching state \'S247\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateRequestInfo, null, new CreateRequestDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S259\'");
            int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker8)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker9)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S326\'");
                goto label4;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S274\'");
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker8)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker9)));
        label4:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S259");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S259");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S0ErrorResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S259");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S259");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S29\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S65\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    bool temp8;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp8);
                    this.Manager.Comment("reaching state \'S89\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "createPipeStatus of CreatePipeAndMailslot, state S89");
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S113\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S125\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S137\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S149\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S161\'");
                        int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SessionSetupResponseChecker1)));
                        if ((temp12 == 0)) {
                            this.Manager.Comment("reaching state \'S180\'");
                            goto label10;
                        }
                        if ((temp12 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S179();
                            goto label10;
                        }
                        if ((temp12 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S179();
                            goto label10;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SessionSetupResponseChecker1)));
                    label10:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S29");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S29");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S65");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S125");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S125, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S179() {
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S212\'");
            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10TreeConnectResponseChecker)));
            if ((temp11 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232();
                goto label9;
            }
            if ((temp11 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232();
                goto label9;
            }
            if ((temp11 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232();
                goto label9;
            }
            if ((temp11 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232();
                goto label9;
            }
            if ((temp11 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232();
                goto label9;
            }
            if ((temp11 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232();
                goto label9;
            }
            if ((temp11 == 6)) {
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S264\'");
                int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker3)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S286\'");
                    this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(5,1,1,False,False,SmbInfoStandard" +
                            ",0,0)\'");
                    this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(5, 1, 1, false, false, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(0)), 0, 0);
                    this.Manager.Comment("reaching state \'S313\'");
                    this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S334\'");
                    int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10Trans2QueryFileInfoResponseChecker)));
                    if ((temp9 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S359();
                        goto label7;
                    }
                    if ((temp9 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S359();
                        goto label7;
                    }
                    if ((temp9 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S360();
                        goto label7;
                    }
                    if ((temp9 == 3)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S360();
                        goto label7;
                    }
                    if ((temp9 == 4)) {
                        this.Manager.Comment("reaching state \'S358\'");
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10Trans2QueryFileInfoResponseChecker)));
                label7:
;
                    goto label8;
                }
                if ((temp10 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S287();
                    goto label8;
                }
                if ((temp10 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S287();
                    goto label8;
                }
                if ((temp10 == 3)) {
                    this.Manager.Comment("reaching state \'S288\'");
                    goto label8;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker3)));
            label8:
;
                goto label9;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10TreeConnectResponseChecker)));
        label9:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S232() {
            this.Manager.Comment("reaching state \'S232\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S212");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S212");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S264");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S264, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S334");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S359() {
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S380\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S360();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S360() {
            this.Manager.Comment("reaching state \'S360\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S334");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S334");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S334");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S334");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10Trans2QueryFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryFileInfoResponse, state S334");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryFileInfoResponse, state S334");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryFileInfoResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryFileInfoResponse, state S334");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryFileInfoResponse, state S334");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9319");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9319");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S264");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S264");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S287() {
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S314\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S335\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S264");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S264");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S264");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S264");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S10SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S30\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S66\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S78\'");
                    bool temp13;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp13);
                    this.Manager.Comment("reaching state \'S90\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp13, "createPipeStatus of CreatePipeAndMailslot, state S90");
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S114\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S126\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S138\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S150\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S162\'");
                        int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SessionSetupResponseChecker1)));
                        if ((temp18 == 0)) {
                            this.Manager.Comment("reaching state \'S182\'");
                            goto label15;
                        }
                        if ((temp18 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S181();
                            goto label15;
                        }
                        if ((temp18 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S181();
                            goto label15;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SessionSetupResponseChecker1)));
                    label15:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S30");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S30");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S66");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S66");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S66");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S66");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S66");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S66");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S126");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S126, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S162");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S181() {
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S213\'");
            int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12TreeConnectResponseChecker)));
            if ((temp17 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234();
                goto label14;
            }
            if ((temp17 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234();
                goto label14;
            }
            if ((temp17 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234();
                goto label14;
            }
            if ((temp17 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234();
                goto label14;
            }
            if ((temp17 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234();
                goto label14;
            }
            if ((temp17 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234();
                goto label14;
            }
            if ((temp17 == 6)) {
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S265\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker7)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker8)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S289\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,True,True,FileRenameInf" +
                            "ormation,0,\"ExistTest.txt\",True,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "ExistTest.txt", true, 0);
                    this.Manager.Comment("reaching state \'S315\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S336\'");
                    int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2SetFileInfoResponseChecker)));
                    if ((temp15 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S362();
                        goto label12;
                    }
                    if ((temp15 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S362();
                        goto label12;
                    }
                    if ((temp15 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S362();
                        goto label12;
                    }
                    if ((temp15 == 3)) {
                        this.Manager.Comment("reaching state \'S363\'");
                        goto label12;
                    }
                    if ((temp15 == 4)) {
                        this.Manager.Comment("reaching state \'S364\'");
                        goto label12;
                    }
                    if ((temp15 == 5)) {
                        this.Manager.Comment("reaching state \'S361\'");
                        this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(6,1,1,False,False,SmbInfoStandard" +
                                ",0,0)\'");
                        this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(6, 1, 1, false, false, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(0)), 0, 0);
                        this.Manager.AddReturn(Trans2QueryFileInfoRequestInfo, null);
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S381();
                        goto label12;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2SetFileInfoResponseChecker)));
                label12:
;
                    goto label13;
                }
                if ((temp16 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S290();
                    goto label13;
                }
                if ((temp16 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S290();
                    goto label13;
                }
                if ((temp16 == 3)) {
                    this.Manager.Comment("reaching state \'S291\'");
                    goto label13;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker7)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker8)));
            label13:
;
                goto label14;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12TreeConnectResponseChecker)));
        label14:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S234() {
            this.Manager.Comment("reaching state \'S234\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S213");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S213");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S265");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S265, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S336");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S362() {
            this.Manager.Comment("reaching state \'S362\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S382\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S391\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S336");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S336");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S336");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S336");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S336");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S336");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S336");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFileInfoResponse, state S336");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S336");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S381() {
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoRequestInfo, null, new Trans2QueryFileInfoRequestDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2QueryFileInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S390\'");
            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2QueryFileInfoResponseChecker)));
            if ((temp14 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S398();
                goto label11;
            }
            if ((temp14 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S398();
                goto label11;
            }
            if ((temp14 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S399();
                goto label11;
            }
            if ((temp14 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S399();
                goto label11;
            }
            if ((temp14 == 4)) {
                this.Manager.Comment("reaching state \'S397\'");
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2QueryFileInfoResponseChecker)));
        label11:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2QueryFileInfoRequestChecker() {
            this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NotSupported,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S398() {
            this.Manager.Comment("reaching state \'S398\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S401\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S399();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S399() {
            this.Manager.Comment("reaching state \'S399\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NotSupported,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(6,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12Trans2QueryFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryFileInfoResponse(6,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of Trans2QueryFileInfoResponse, state S390");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryFileInfoResponse, state S390");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryFileInfoResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryFileInfoResponse, state S390");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryFileInfoResponse, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9319");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9319");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S265");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S265");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S290() {
            this.Manager.Comment("reaching state \'S290\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S316\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S337\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S265");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S265");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S265");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S265");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S12SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S162");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S31\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S67\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S79\'");
                    bool temp19;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp19);
                    this.Manager.Comment("reaching state \'S91\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp19, "createPipeStatus of CreatePipeAndMailslot, state S91");
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S115\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S127\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S139\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S151\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S163\'");
                        int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SessionSetupResponseChecker1)));
                        if ((temp23 == 0)) {
                            this.Manager.Comment("reaching state \'S184\'");
                            goto label19;
                        }
                        if ((temp23 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S183();
                            goto label19;
                        }
                        if ((temp23 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S183();
                            goto label19;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SessionSetupResponseChecker1)));
                    label19:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S31");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S31");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S67");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S127");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S127, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S183() {
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S214\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14TreeConnectResponseChecker)));
            if ((temp22 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236();
                goto label18;
            }
            if ((temp22 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236();
                goto label18;
            }
            if ((temp22 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236();
                goto label18;
            }
            if ((temp22 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236();
                goto label18;
            }
            if ((temp22 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236();
                goto label18;
            }
            if ((temp22 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236();
                goto label18;
            }
            if ((temp22 == 6)) {
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S266\'");
                int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker7)));
                if ((temp21 == 0)) {
                    this.Manager.Comment("reaching state \'S292\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,True,True,Invalid,0,\"Ex" +
                            "istTest.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, "ExistTest.txt", false, 0);
                    this.Manager.Comment("reaching state \'S317\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S338\'");
                    int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14Trans2SetFileInfoResponseChecker)));
                    if ((temp20 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S366();
                        goto label16;
                    }
                    if ((temp20 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S366();
                        goto label16;
                    }
                    if ((temp20 == 2)) {
                        this.Manager.Comment("reaching state \'S367\'");
                        goto label16;
                    }
                    if ((temp20 == 3)) {
                        this.Manager.Comment("reaching state \'S368\'");
                        goto label16;
                    }
                    if ((temp20 == 4)) {
                        this.Manager.Comment("reaching state \'S365\'");
                        this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(6,1,1,False,False,SmbInfoStandard" +
                                ",0,0)\'");
                        this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(6, 1, 1, false, false, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(0)), 0, 0);
                        this.Manager.AddReturn(Trans2QueryFileInfoRequestInfo, null);
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S381();
                        goto label16;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14Trans2SetFileInfoResponseChecker)));
                label16:
;
                    goto label17;
                }
                if ((temp21 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S293();
                    goto label17;
                }
                if ((temp21 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S293();
                    goto label17;
                }
                if ((temp21 == 3)) {
                    this.Manager.Comment("reaching state \'S294\'");
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker7)));
            label17:
;
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14TreeConnectResponseChecker)));
        label18:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S236() {
            this.Manager.Comment("reaching state \'S236\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S214");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S214");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S266");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S266, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S266");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S266");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S338");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S366() {
            this.Manager.Comment("reaching state \'S366\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S383\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S392\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S338");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S338");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30035");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30035");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S338");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S338");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S338");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFileInfoResponse, state S338");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S266");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S266");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S293() {
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S318\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S339\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S266");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S266");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S266");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S266");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S14SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S32\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S68\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S80\'");
                    bool temp24;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp24);
                    this.Manager.Comment("reaching state \'S92\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "createPipeStatus of CreatePipeAndMailslot, state S92");
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S116\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S128\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S140\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S152\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S164\'");
                        int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SessionSetupResponseChecker1)));
                        if ((temp28 == 0)) {
                            this.Manager.Comment("reaching state \'S186\'");
                            goto label23;
                        }
                        if ((temp28 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S185();
                            goto label23;
                        }
                        if ((temp28 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S185();
                            goto label23;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SessionSetupResponseChecker1)));
                    label23:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S32");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S32");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S68");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S68");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S128");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S128, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S185() {
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S215\'");
            int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16TreeConnectResponseChecker)));
            if ((temp27 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238();
                goto label22;
            }
            if ((temp27 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238();
                goto label22;
            }
            if ((temp27 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238();
                goto label22;
            }
            if ((temp27 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238();
                goto label22;
            }
            if ((temp27 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238();
                goto label22;
            }
            if ((temp27 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238();
                goto label22;
            }
            if ((temp27 == 6)) {
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S267\'");
                int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker7)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker8)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S295\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,True,True,FileRenameInf" +
                            "ormation,0,\"ExistTest.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "ExistTest.txt", false, 0);
                    this.Manager.Comment("reaching state \'S319\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S340\'");
                    int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16Trans2SetFileInfoResponseChecker)));
                    if ((temp25 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S370();
                        goto label20;
                    }
                    if ((temp25 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S370();
                        goto label20;
                    }
                    if ((temp25 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S370();
                        goto label20;
                    }
                    if ((temp25 == 3)) {
                        this.Manager.Comment("reaching state \'S371\'");
                        goto label20;
                    }
                    if ((temp25 == 4)) {
                        this.Manager.Comment("reaching state \'S372\'");
                        goto label20;
                    }
                    if ((temp25 == 5)) {
                        this.Manager.Comment("reaching state \'S369\'");
                        this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(6,1,1,False,False,SmbInfoStandard" +
                                ",0,0)\'");
                        this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(6, 1, 1, false, false, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(0)), 0, 0);
                        this.Manager.AddReturn(Trans2QueryFileInfoRequestInfo, null);
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S381();
                        goto label20;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16Trans2SetFileInfoResponseChecker)));
                label20:
;
                    goto label21;
                }
                if ((temp26 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S296();
                    goto label21;
                }
                if ((temp26 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S296();
                    goto label21;
                }
                if ((temp26 == 3)) {
                    this.Manager.Comment("reaching state \'S297\'");
                    goto label21;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker7)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker8)));
            label21:
;
                goto label22;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16TreeConnectResponseChecker)));
        label22:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S238() {
            this.Manager.Comment("reaching state \'S238\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S215");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S215");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S267");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S267, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30033");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30033");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S370() {
            this.Manager.Comment("reaching state \'S370\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S384\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S393\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S340");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S340");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S340");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S340");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S340");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFileInfoResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S267");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S267");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S296() {
            this.Manager.Comment("reaching state \'S296\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S320\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S341\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S267");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S267");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S267");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S267");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S16SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S33\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S69\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S81\'");
                    bool temp29;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp29);
                    this.Manager.Comment("reaching state \'S93\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp29, "createPipeStatus of CreatePipeAndMailslot, state S93");
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S117\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S129\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S141\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S153\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S165\'");
                        int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SessionSetupResponseChecker1)));
                        if ((temp31 == 0)) {
                            this.Manager.Comment("reaching state \'S188\'");
                            goto label25;
                        }
                        if ((temp31 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S187();
                            goto label25;
                        }
                        if ((temp31 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S187();
                            goto label25;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SessionSetupResponseChecker1)));
                    label25:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S33");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S33");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S69");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S129");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S129, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S187() {
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S216\'");
            int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18TreeConnectResponseChecker)));
            if ((temp30 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240();
                goto label24;
            }
            if ((temp30 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240();
                goto label24;
            }
            if ((temp30 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240();
                goto label24;
            }
            if ((temp30 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240();
                goto label24;
            }
            if ((temp30 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240();
                goto label24;
            }
            if ((temp30 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240();
                goto label24;
            }
            if ((temp30 == 6)) {
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                        "se,True,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S247();
                goto label24;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18TreeConnectResponseChecker)));
        label24:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S240() {
            this.Manager.Comment("reaching state \'S240\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S216");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S216");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S18SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S25\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S61\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S73\'");
                    bool temp32;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp32);
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp32, "createPipeStatus of CreatePipeAndMailslot, state S85");
                    this.Manager.Comment("reaching state \'S97\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S109\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S121\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S133\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S145\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S157\'");
                        int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SessionSetupResponseChecker1)));
                        if ((temp35 == 0)) {
                            this.Manager.Comment("reaching state \'S172\'");
                            goto label28;
                        }
                        if ((temp35 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S171();
                            goto label28;
                        }
                        if ((temp35 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S171();
                            goto label28;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SessionSetupResponseChecker1)));
                    label28:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S25");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S25");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S61");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S121");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S121, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S171() {
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S208\'");
            int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2TreeConnectResponseChecker)));
            if ((temp34 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224();
                goto label27;
            }
            if ((temp34 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224();
                goto label27;
            }
            if ((temp34 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224();
                goto label27;
            }
            if ((temp34 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224();
                goto label27;
            }
            if ((temp34 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224();
                goto label27;
            }
            if ((temp34 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224();
                goto label27;
            }
            if ((temp34 == 6)) {
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                        "se,True,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S260\'");
                int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker2)));
                if ((temp33 == 0)) {
                    this.Manager.Comment("reaching state \'S275\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S306\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S327\'");
                    goto label26;
                }
                if ((temp33 == 1)) {
                    this.Manager.Comment("reaching state \'S276\'");
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker2)));
            label26:
;
                goto label27;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2TreeConnectResponseChecker)));
        label27:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S224() {
            this.Manager.Comment("reaching state \'S224\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S208");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S208");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S260");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S260");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S260");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S260");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S2SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S34\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S70\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S82\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp36);
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "createPipeStatus of CreatePipeAndMailslot, state S94");
                    this.Manager.Comment("reaching state \'S106\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S118\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S130\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S142\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S154\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S166\'");
                        int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SessionSetupResponseChecker1)));
                        if ((temp39 == 0)) {
                            this.Manager.Comment("reaching state \'S190\'");
                            goto label31;
                        }
                        if ((temp39 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S170();
                            goto label31;
                        }
                        if ((temp39 == 2)) {
                            this.Manager.Comment("reaching state \'S189\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S204\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S217\'");
                            int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20TreeConnectResponseChecker)));
                            if ((temp38 == 0)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S242();
                                goto label30;
                            }
                            if ((temp38 == 1)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S242();
                                goto label30;
                            }
                            if ((temp38 == 2)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S242();
                                goto label30;
                            }
                            if ((temp38 == 3)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S242();
                                goto label30;
                            }
                            if ((temp38 == 4)) {
                                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S242();
                                goto label30;
                            }
                            if ((temp38 == 5)) {
                                this.Manager.Comment("reaching state \'S243\'");
                                goto label30;
                            }
                            if ((temp38 == 6)) {
                                this.Manager.Comment("reaching state \'S241\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                                        "se,True,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                                this.Manager.Comment("reaching state \'S256\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S268\'");
                                int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker2)));
                                if ((temp37 == 0)) {
                                    this.Manager.Comment("reaching state \'S298\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S321\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S342\'");
                                    goto label29;
                                }
                                if ((temp37 == 1)) {
                                    this.Manager.Comment("reaching state \'S299\'");
                                    goto label29;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker2)));
                            label29:
;
                                goto label30;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20TreeConnectResponseChecker)));
                        label30:
;
                            goto label31;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SessionSetupResponseChecker1)));
                    label31:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S34");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S34");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S70");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S70");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S130");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S130, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S242() {
            this.Manager.Comment("reaching state \'S242\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S217");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S217");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S268");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S268");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S20ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S268");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S268");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S35\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S71\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S83\'");
                    bool temp40;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp40);
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp40, "createPipeStatus of CreatePipeAndMailslot, state S95");
                    this.Manager.Comment("reaching state \'S107\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S119\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S131\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S143\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S155\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S167\'");
                        int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SessionSetupResponseChecker1)));
                        if ((temp44 == 0)) {
                            this.Manager.Comment("reaching state \'S192\'");
                            goto label35;
                        }
                        if ((temp44 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S191();
                            goto label35;
                        }
                        if ((temp44 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S191();
                            goto label35;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SessionSetupResponseChecker1)));
                    label35:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S35");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S35");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S71");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S131");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S131");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S131, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S191() {
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S205\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S218\'");
            int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22TreeConnectResponseChecker)));
            if ((temp43 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245();
                goto label34;
            }
            if ((temp43 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245();
                goto label34;
            }
            if ((temp43 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245();
                goto label34;
            }
            if ((temp43 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245();
                goto label34;
            }
            if ((temp43 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245();
                goto label34;
            }
            if ((temp43 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245();
                goto label34;
            }
            if ((temp43 == 6)) {
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S269\'");
                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker3)));
                if ((temp42 == 0)) {
                    this.Manager.Comment("reaching state \'S300\'");
                    this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(5,1,1,False,False,SmbQueryFileStr" +
                            "eamInfo,0,0)\'");
                    this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(5, 1, 1, false, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.SmbQueryFileStreamInfo, 0, 0);
                    this.Manager.Comment("reaching state \'S322\'");
                    this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S343\'");
                    int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker5)));
                    if ((temp41 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S373();
                        goto label32;
                    }
                    if ((temp41 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S373();
                        goto label32;
                    }
                    if ((temp41 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S374();
                        goto label32;
                    }
                    if ((temp41 == 3)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S374();
                        goto label32;
                    }
                    if ((temp41 == 4)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S374();
                        goto label32;
                    }
                    if ((temp41 == 5)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S374();
                        goto label32;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker5)));
                label32:
;
                    goto label33;
                }
                if ((temp42 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S301();
                    goto label33;
                }
                if ((temp42 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S301();
                    goto label33;
                }
                if ((temp42 == 3)) {
                    this.Manager.Comment("reaching state \'S302\'");
                    goto label33;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker3)));
            label33:
;
                goto label34;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22TreeConnectResponseChecker)));
        label34:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S245() {
            this.Manager.Comment("reaching state \'S245\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S218");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S218");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S269");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S269, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S343");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S373() {
            this.Manager.Comment("reaching state \'S373\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S343");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S343");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S374() {
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S385\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S373();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,InvalidParameter,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2073, MS-SMB_R2076");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2073");
            this.Manager.Checkpoint("MS-SMB_R2076");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S343");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S343");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorTrans2QueryFileInfoResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,InvalidParameter,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2073, MS-SMB_R2076");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2073");
            this.Manager.Checkpoint("MS-SMB_R2076");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S269");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S269");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S301() {
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S344\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S269");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S269");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S269");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S269");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S22SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S26\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S62\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    bool temp45;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp45);
                    this.Manager.Comment("reaching state \'S86\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp45, "createPipeStatus of CreatePipeAndMailslot, state S86");
                    this.Manager.Comment("reaching state \'S98\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S110\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S122\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S134\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S146\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S158\'");
                        int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SessionSetupResponseChecker1)));
                        if ((temp49 == 0)) {
                            this.Manager.Comment("reaching state \'S174\'");
                            goto label39;
                        }
                        if ((temp49 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S173();
                            goto label39;
                        }
                        if ((temp49 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S173();
                            goto label39;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SessionSetupResponseChecker1)));
                    label39:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S26");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S26");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S62");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S62");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S62");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S62");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S62");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S62");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S122");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S122, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S173() {
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S209\'");
            int temp48 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4TreeConnectResponseChecker)));
            if ((temp48 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226();
                goto label38;
            }
            if ((temp48 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226();
                goto label38;
            }
            if ((temp48 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226();
                goto label38;
            }
            if ((temp48 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226();
                goto label38;
            }
            if ((temp48 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226();
                goto label38;
            }
            if ((temp48 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226();
                goto label38;
            }
            if ((temp48 == 6)) {
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S261\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker7)));
                if ((temp47 == 0)) {
                    this.Manager.Comment("reaching state \'S277\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,False,True,FileLinkInfo" +
                            "rmation,0,\"ExistTest.txt\",True,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileLinkInformation, 0, "ExistTest.txt", true, 0);
                    this.Manager.Comment("reaching state \'S307\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S328\'");
                    int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker4)));
                    if ((temp46 == 0)) {
                        this.Manager.Comment("reaching state \'S349\'");
                        goto label36;
                    }
                    if ((temp46 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S350();
                        goto label36;
                    }
                    if ((temp46 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S350();
                        goto label36;
                    }
                    if ((temp46 == 3)) {
                        this.Manager.Comment("reaching state \'S351\'");
                        goto label36;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker4)));
                label36:
;
                    goto label37;
                }
                if ((temp47 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S278();
                    goto label37;
                }
                if ((temp47 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S278();
                    goto label37;
                }
                if ((temp47 == 3)) {
                    this.Manager.Comment("reaching state \'S279\'");
                    goto label37;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker7)));
            label37:
;
                goto label38;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4TreeConnectResponseChecker)));
        label38:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S226() {
            this.Manager.Comment("reaching state \'S226\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S209");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S209");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S261");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S261, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S328");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S328");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9587");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9587");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S350() {
            this.Manager.Comment("reaching state \'S350\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S388\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S328");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S328");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S261");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S261");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S278() {
            this.Manager.Comment("reaching state \'S278\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S308\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S329\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S261");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S261");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S261");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S261");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S4SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S27\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S63\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S75\'");
                    bool temp50;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp50);
                    this.Manager.Comment("reaching state \'S87\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp50, "createPipeStatus of CreatePipeAndMailslot, state S87");
                    this.Manager.Comment("reaching state \'S99\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S111\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S123\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S135\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S147\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S159\'");
                        int temp54 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SessionSetupResponseChecker1)));
                        if ((temp54 == 0)) {
                            this.Manager.Comment("reaching state \'S176\'");
                            goto label43;
                        }
                        if ((temp54 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S175();
                            goto label43;
                        }
                        if ((temp54 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S175();
                            goto label43;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SessionSetupResponseChecker1)));
                    label43:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S27");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S27");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S63");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S123");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S123, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S175() {
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S210\'");
            int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6TreeConnectResponseChecker)));
            if ((temp53 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228();
                goto label42;
            }
            if ((temp53 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228();
                goto label42;
            }
            if ((temp53 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228();
                goto label42;
            }
            if ((temp53 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228();
                goto label42;
            }
            if ((temp53 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228();
                goto label42;
            }
            if ((temp53 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228();
                goto label42;
            }
            if ((temp53 == 6)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S262\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker3)));
                if ((temp52 == 0)) {
                    this.Manager.Comment("reaching state \'S280\'");
                    this.Manager.Comment("executing step \'call Trans2QueryFileInfoRequest(5,1,1,False,True,FileAccessInform" +
                            "ation,0,0)\'");
                    this.ISmbAdapterInstance.Trans2QueryFileInfoRequest(5, 1, 1, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileAccessInformation, 0, 0);
                    this.Manager.Comment("reaching state \'S309\'");
                    this.Manager.Comment("checking step \'return Trans2QueryFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S330\'");
                    int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6Trans2QueryFileInfoResponseChecker)));
                    if ((temp51 == 0)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S353();
                        goto label40;
                    }
                    if ((temp51 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S353();
                        goto label40;
                    }
                    if ((temp51 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S354();
                        goto label40;
                    }
                    if ((temp51 == 3)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S354();
                        goto label40;
                    }
                    if ((temp51 == 4)) {
                        this.Manager.Comment("reaching state \'S352\'");
                        goto label40;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTrans2QueryFileInfoResponseInfo, null, new ErrorTrans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.Trans2QueryFileInfoResponseInfo, null, new Trans2QueryFileInfoResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6Trans2QueryFileInfoResponseChecker)));
                label40:
;
                    goto label41;
                }
                if ((temp52 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S281();
                    goto label41;
                }
                if ((temp52 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S281();
                    goto label41;
                }
                if ((temp52 == 3)) {
                    this.Manager.Comment("reaching state \'S282\'");
                    goto label41;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker3)));
            label41:
;
                goto label42;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6TreeConnectResponseChecker)));
        label42:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S228() {
            this.Manager.Comment("reaching state \'S228\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S210");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S210");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S262");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S262, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S330");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S353() {
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S354();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S354() {
            this.Manager.Comment("reaching state \'S354\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NotSupported,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S330");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S330");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorTrans2QueryFileInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2073Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryFileInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryFileInfoResponse, state S330");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2073Implemented, "isRS2073Implemented of ErrorTrans2QueryFileInfoResponse, state S330");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6Trans2QueryFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryFileInfoResponse, state S330");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryFileInfoResponse, state S330");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryFileInfoResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryFileInfoResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryFileInfoResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9319, MS-SMB_R30048, MS-SMB_R30028");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9319");
            this.Manager.Checkpoint("MS-SMB_R30048");
            this.Manager.Checkpoint("MS-SMB_R30028");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S262");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S262");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S281() {
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S331\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S262");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S262");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S262");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S262");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S6SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8() {
            this.Manager.BeginTest("NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S28\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S64\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S76\'");
                    bool temp55;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp55);
                    this.Manager.Comment("reaching state \'S88\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp55, "createPipeStatus of CreatePipeAndMailslot, state S88");
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S112\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S124\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S136\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S148\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S160\'");
                        int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SessionSetupResponseChecker1)));
                        if ((temp59 == 0)) {
                            this.Manager.Comment("reaching state \'S178\'");
                            goto label47;
                        }
                        if ((temp59 == 1)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S177();
                            goto label47;
                        }
                        if ((temp59 == 2)) {
                            NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S177();
                            goto label47;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SessionSetupResponseChecker1)));
                    label47:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S28");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S28");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S64");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S64");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S64");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S64");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S64");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S64");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S124");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S124, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S177() {
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S198\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S211\'");
            int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8TreeConnectResponseChecker)));
            if ((temp58 == 0)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230();
                goto label46;
            }
            if ((temp58 == 1)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230();
                goto label46;
            }
            if ((temp58 == 2)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230();
                goto label46;
            }
            if ((temp58 == 3)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230();
                goto label46;
            }
            if ((temp58 == 4)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230();
                goto label46;
            }
            if ((temp58 == 5)) {
                NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230();
                goto label46;
            }
            if ((temp58 == 6)) {
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S263\'");
                int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker7)));
                if ((temp57 == 0)) {
                    this.Manager.Comment("reaching state \'S283\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,False,True,FileRenameIn" +
                            "formation,0,\"ExistTest.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "ExistTest.txt", false, 0);
                    this.Manager.Comment("reaching state \'S311\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S332\'");
                    int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker4)));
                    if ((temp56 == 0)) {
                        this.Manager.Comment("reaching state \'S355\'");
                        goto label44;
                    }
                    if ((temp56 == 1)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S356();
                        goto label44;
                    }
                    if ((temp56 == 2)) {
                        NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S356();
                        goto label44;
                    }
                    if ((temp56 == 3)) {
                        this.Manager.Comment("reaching state \'S357\'");
                        goto label44;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker4)));
                label44:
;
                    goto label45;
                }
                if ((temp57 == 1)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S284();
                    goto label45;
                }
                if ((temp57 == 2)) {
                    NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S284();
                    goto label45;
                }
                if ((temp57 == 3)) {
                    this.Manager.Comment("reaching state \'S285\'");
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker6)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker7)));
            label45:
;
                goto label46;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8TreeConnectResponseChecker)));
        label46:
;
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S230() {
            this.Manager.Comment("reaching state \'S230\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S211");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S211");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S263");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S263, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S263");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S332");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S332");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S332");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9587");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9587");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S356() {
            this.Manager.Comment("reaching state \'S356\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S389\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S332");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S332");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S332");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S263");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S263");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S284() {
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S312\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S333\'");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S263");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S263");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S263");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S263");
        }
        
        private void NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8S8SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
    }
}
