//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName : PtfTestClassBase {
        
        public NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NonExtendedSessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2SetFileInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NonExtendedNegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NonExtendedNegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedNegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo NonExtendedSessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedSessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.EventInfo Trans2SetFileInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2SetFileInfoResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedNegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedSessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2SetFileInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S18\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S45\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S54\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S63\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S63");
                    this.Manager.Comment("reaching state \'S72\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S81\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S90\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S99\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S108\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S117\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker3)));
                        if ((temp4 == 0)) {
                            this.Manager.Comment("reaching state \'S127\'");
                            goto label3;
                        }
                        if ((temp4 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS126();
                            goto label3;
                        }
                        if ((temp4 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS126();
                            goto label3;
                        }
                        if ((temp4 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS126();
                            goto label3;
                        }
                        if ((temp4 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS126();
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker3)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S18");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S18");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S45");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S90");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S90");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S90, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S117");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS126() {
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S153\'");
            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0TreeConnectResponseChecker)));
            if ((temp3 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163();
                goto label2;
            }
            if ((temp3 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163();
                goto label2;
            }
            if ((temp3 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163();
                goto label2;
            }
            if ((temp3 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163();
                goto label2;
            }
            if ((temp3 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163();
                goto label2;
            }
            if ((temp3 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163();
                goto label2;
            }
            if ((temp3 == 6)) {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S188\'");
                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker7)));
                if ((temp2 == 0)) {
                    this.Manager.Comment("reaching state \'S196\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,False,True,Invalid,0,\"D" +
                            "ir1\\Test1.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, "Dir1\\Test1.txt", false, 0);
                    this.Manager.Comment("reaching state \'S218\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S232\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker4)));
                    if ((temp1 == 0)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS246();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS246();
                        goto label0;
                    }
                    if ((temp1 == 2)) {
                        this.Manager.Comment("reaching state \'S247\'");
                        goto label0;
                    }
                    if ((temp1 == 3)) {
                        this.Manager.Comment("reaching state \'S248\'");
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker4)));
                label0:
;
                    goto label1;
                }
                if ((temp2 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS197();
                    goto label1;
                }
                if ((temp2 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS197();
                    goto label1;
                }
                if ((temp2 == 3)) {
                    this.Manager.Comment("reaching state \'S198\'");
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker7)));
            label1:
;
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0TreeConnectResponseChecker)));
        label2:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS163() {
            this.Manager.Comment("reaching state \'S163\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S153");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S188");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S188, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S232");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS246() {
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S272\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S232");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S232");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30035");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30035");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S188");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS197() {
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S233\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S188");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S188");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS0NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S117");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S23\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S50\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S59\'");
                    bool temp5;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp5);
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "createPipeStatus of CreatePipeAndMailslot, state S68");
                    this.Manager.Comment("reaching state \'S77\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S86\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S95\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S104\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S113\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S122\'");
                        int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker3)));
                        if ((temp8 == 0)) {
                            this.Manager.Comment("reaching state \'S137\'");
                            goto label6;
                        }
                        if ((temp8 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS136();
                            goto label6;
                        }
                        if ((temp8 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS136();
                            goto label6;
                        }
                        if ((temp8 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS136();
                            goto label6;
                        }
                        if ((temp8 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS136();
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker3)));
                    label6:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S23");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S23");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S50");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S95");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S95");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S95");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S95");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S95");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S95, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S95");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS136() {
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S158\'");
            int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10TreeConnectResponseChecker)));
            if ((temp7 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173();
                goto label5;
            }
            if ((temp7 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173();
                goto label5;
            }
            if ((temp7 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173();
                goto label5;
            }
            if ((temp7 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173();
                goto label5;
            }
            if ((temp7 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173();
                goto label5;
            }
            if ((temp7 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173();
                goto label5;
            }
            if ((temp7 == 6)) {
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                        "se,True,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS185();
                goto label5;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10TreeConnectResponseChecker)));
        label5:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS173() {
            this.Manager.Comment("reaching state \'S173\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S158");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S158");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS185() {
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateRequestInfo, null, new CreateRequestDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S193\'");
            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker2)));
            if ((temp6 == 0)) {
                this.Manager.Comment("reaching state \'S211\'");
                goto label4;
            }
            if ((temp6 == 1)) {
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S242\'");
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker2)));
        label4:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S193");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S193");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S193");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S193");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS10NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S24\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S51\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S60\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp9);
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "createPipeStatus of CreatePipeAndMailslot, state S69");
                    this.Manager.Comment("reaching state \'S78\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S87\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S96\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S105\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S114\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S123\'");
                        int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker3)));
                        if ((temp11 == 0)) {
                            this.Manager.Comment("reaching state \'S139\'");
                            goto label8;
                        }
                        if ((temp11 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS138();
                            goto label8;
                        }
                        if ((temp11 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS138();
                            goto label8;
                        }
                        if ((temp11 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS138();
                            goto label8;
                        }
                        if ((temp11 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS138();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker3)));
                    label8:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S24");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S24");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S51");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S96");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S96");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S96");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S96");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S96");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S96, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S96");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS138() {
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S159\'");
            int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12TreeConnectResponseChecker)));
            if ((temp10 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174();
                goto label7;
            }
            if ((temp10 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174();
                goto label7;
            }
            if ((temp10 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174();
                goto label7;
            }
            if ((temp10 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174();
                goto label7;
            }
            if ((temp10 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174();
                goto label7;
            }
            if ((temp10 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174();
                goto label7;
            }
            if ((temp10 == 6)) {
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                        "se,True,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS185();
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12TreeConnectResponseChecker)));
        label7:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S159");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS174() {
            this.Manager.Comment("reaching state \'S174\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S159");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S159");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S159");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S159");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS12NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S25\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S52\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S61\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S70\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S70");
                    this.Manager.Comment("reaching state \'S79\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S88\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S97\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S106\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S115\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S124\'");
                        int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker3)));
                        if ((temp15 == 0)) {
                            this.Manager.Comment("reaching state \'S141\'");
                            goto label11;
                        }
                        if ((temp15 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS140();
                            goto label11;
                        }
                        if ((temp15 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS140();
                            goto label11;
                        }
                        if ((temp15 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS140();
                            goto label11;
                        }
                        if ((temp15 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS140();
                            goto label11;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker3)));
                    label11:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S25");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S25");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S52");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S97");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S97");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S97");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S97");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S97");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S97, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S97");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS140() {
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S160\'");
            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14TreeConnectResponseChecker)));
            if ((temp14 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177();
                goto label10;
            }
            if ((temp14 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177();
                goto label10;
            }
            if ((temp14 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177();
                goto label10;
            }
            if ((temp14 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177();
                goto label10;
            }
            if ((temp14 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177();
                goto label10;
            }
            if ((temp14 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177();
                goto label10;
            }
            if ((temp14 == 6)) {
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Dir1\\Test1.txt\",Disk,Fal" +
                        "se,True,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Dir1\\Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, true, false, false);
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S194\'");
                int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker2)));
                if ((temp13 == 0)) {
                    this.Manager.Comment("reaching state \'S213\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S229\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S243\'");
                    goto label9;
                }
                if ((temp13 == 1)) {
                    this.Manager.Comment("reaching state \'S214\'");
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker2)));
            label9:
;
                goto label10;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14TreeConnectResponseChecker)));
        label10:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS177() {
            this.Manager.Comment("reaching state \'S177\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S160");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S194");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S194");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S194");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S194");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS14NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S124");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S26\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S53\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S62\'");
                    bool temp16;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp16);
                    this.Manager.Comment("reaching state \'S71\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp16, "createPipeStatus of CreatePipeAndMailslot, state S71");
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S89\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S98\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S107\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S116\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S125\'");
                        int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker3)));
                        if ((temp23 == 0)) {
                            this.Manager.Comment("reaching state \'S143\'");
                            goto label18;
                        }
                        if ((temp23 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS132();
                            goto label18;
                        }
                        if ((temp23 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS138();
                            goto label18;
                        }
                        if ((temp23 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS142();
                            goto label18;
                        }
                        if ((temp23 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS142();
                            goto label18;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker3)));
                    label18:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S26");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S26");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S53");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S98");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S98");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S98");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S98");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S98");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S98, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S98");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS132() {
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S156\'");
            int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16TreeConnectResponseChecker)));
            if ((temp19 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169();
                goto label14;
            }
            if ((temp19 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169();
                goto label14;
            }
            if ((temp19 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169();
                goto label14;
            }
            if ((temp19 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169();
                goto label14;
            }
            if ((temp19 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169();
                goto label14;
            }
            if ((temp19 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169();
                goto label14;
            }
            if ((temp19 == 6)) {
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S191\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker8)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,True,True,FileRenameInf" +
                            "ormation,0,\"Dir1\\Test1.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "Dir1\\Test1.txt", false, 0);
                    this.Manager.Comment("reaching state \'S224\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S238\'");
                    int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16Trans2SetFileInfoResponseChecker)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S257\'");
                        goto label12;
                    }
                    if ((temp17 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS258();
                        goto label12;
                    }
                    if ((temp17 == 2)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS258();
                        goto label12;
                    }
                    if ((temp17 == 3)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS258();
                        goto label12;
                    }
                    if ((temp17 == 4)) {
                        this.Manager.Comment("reaching state \'S259\'");
                        goto label12;
                    }
                    if ((temp17 == 5)) {
                        this.Manager.Comment("reaching state \'S256\'");
                        goto label12;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16Trans2SetFileInfoResponseChecker)));
                label12:
;
                    goto label13;
                }
                if ((temp18 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS206();
                    goto label13;
                }
                if ((temp18 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS206();
                    goto label13;
                }
                if ((temp18 == 3)) {
                    this.Manager.Comment("reaching state \'S207\'");
                    goto label13;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker8)));
            label13:
;
                goto label14;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16TreeConnectResponseChecker)));
        label14:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS169() {
            this.Manager.Comment("reaching state \'S169\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S191");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S191, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S191");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S238");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30033");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30033");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS258() {
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S275\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S238");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430, MS-SMB_R30034");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
            this.Manager.Checkpoint("MS-SMB_R30034");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S238");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S238");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S238");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFileInfoResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S191");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS206() {
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S239\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S191");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S191");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS142() {
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S161\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16TreeConnectResponseChecker1)));
            if ((temp22 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179();
                goto label17;
            }
            if ((temp22 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179();
                goto label17;
            }
            if ((temp22 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179();
                goto label17;
            }
            if ((temp22 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179();
                goto label17;
            }
            if ((temp22 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179();
                goto label17;
            }
            if ((temp22 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179();
                goto label17;
            }
            if ((temp22 == 6)) {
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S195\'");
                int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16CreateResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker13)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker14)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker15)));
                if ((temp21 == 0)) {
                    this.Manager.Comment("reaching state \'S215\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,False,True,FileRenameIn" +
                            "formation,0,\"Dir1\\Test1.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "Dir1\\Test1.txt", false, 0);
                    this.Manager.Comment("reaching state \'S230\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S244\'");
                    int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker12)));
                    if ((temp20 == 0)) {
                        this.Manager.Comment("reaching state \'S263\'");
                        goto label15;
                    }
                    if ((temp20 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS264();
                        goto label15;
                    }
                    if ((temp20 == 2)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS264();
                        goto label15;
                    }
                    if ((temp20 == 3)) {
                        this.Manager.Comment("reaching state \'S265\'");
                        goto label15;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker12)));
                label15:
;
                    goto label16;
                }
                if ((temp21 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS216();
                    goto label16;
                }
                if ((temp21 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS216();
                    goto label16;
                }
                if ((temp21 == 3)) {
                    this.Manager.Comment("reaching state \'S217\'");
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16CreateResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker13)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker14)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker15)));
            label16:
;
                goto label17;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16TreeConnectResponseChecker1)));
        label17:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS179() {
            this.Manager.Comment("reaching state \'S179\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker10(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorTreeConnectResponseChecker11(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S161");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S195");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S195, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S244");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker10(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9587");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9587");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS264() {
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S277\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker11(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430, MS-SMB_R30034");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
            this.Manager.Checkpoint("MS-SMB_R30034");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker12(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S244");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker13(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S195");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS216() {
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S245\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker14(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S195");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16ErrorResponseChecker15(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S195");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS16NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S19\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S46\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S55\'");
                    bool temp24;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp24);
                    this.Manager.Comment("reaching state \'S64\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "createPipeStatus of CreatePipeAndMailslot, state S64");
                    this.Manager.Comment("reaching state \'S73\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S82\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S91\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S100\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S109\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S118\'");
                        int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker3)));
                        if ((temp28 == 0)) {
                            this.Manager.Comment("reaching state \'S129\'");
                            goto label22;
                        }
                        if ((temp28 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS128();
                            goto label22;
                        }
                        if ((temp28 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS128();
                            goto label22;
                        }
                        if ((temp28 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS128();
                            goto label22;
                        }
                        if ((temp28 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS128();
                            goto label22;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker3)));
                    label22:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S19");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S19");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S46");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S46");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S91");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S91");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S91, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S118");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS128() {
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S154\'");
            int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2TreeConnectResponseChecker)));
            if ((temp27 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165();
                goto label21;
            }
            if ((temp27 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165();
                goto label21;
            }
            if ((temp27 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165();
                goto label21;
            }
            if ((temp27 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165();
                goto label21;
            }
            if ((temp27 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165();
                goto label21;
            }
            if ((temp27 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165();
                goto label21;
            }
            if ((temp27 == 6)) {
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S189\'");
                int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker7)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,False,True,Invalid,0,\"D" +
                            "ir1\\Test1.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, 0, "Dir1\\Test1.txt", false, 0);
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S234\'");
                    int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker4)));
                    if ((temp25 == 0)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS249();
                        goto label19;
                    }
                    if ((temp25 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS249();
                        goto label19;
                    }
                    if ((temp25 == 2)) {
                        this.Manager.Comment("reaching state \'S250\'");
                        goto label19;
                    }
                    if ((temp25 == 3)) {
                        this.Manager.Comment("reaching state \'S251\'");
                        goto label19;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker4)));
                label19:
;
                    goto label20;
                }
                if ((temp26 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS200();
                    goto label20;
                }
                if ((temp26 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS200();
                    goto label20;
                }
                if ((temp26 == 3)) {
                    this.Manager.Comment("reaching state \'S201\'");
                    goto label20;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker7)));
            label20:
;
                goto label21;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2TreeConnectResponseChecker)));
        label21:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS165() {
            this.Manager.Comment("reaching state \'S165\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S189");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S189, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S189");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S234");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS249() {
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S273\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S234");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S234");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30035");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30035");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S189");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS200() {
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S221\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S235\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S189");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S189");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS2NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S118");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S20\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S47\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S56\'");
                    bool temp29;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp29);
                    this.Manager.Comment("reaching state \'S65\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp29, "createPipeStatus of CreatePipeAndMailslot, state S65");
                    this.Manager.Comment("reaching state \'S74\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S83\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S92\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S101\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S110\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S119\'");
                        int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker3)));
                        if ((temp33 == 0)) {
                            this.Manager.Comment("reaching state \'S131\'");
                            goto label26;
                        }
                        if ((temp33 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS130();
                            goto label26;
                        }
                        if ((temp33 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS130();
                            goto label26;
                        }
                        if ((temp33 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS130();
                            goto label26;
                        }
                        if ((temp33 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS130();
                            goto label26;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker3)));
                    label26:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S20");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S20");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S47");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S92");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S92");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S92, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S119");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS130() {
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S155\'");
            int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4TreeConnectResponseChecker)));
            if ((temp32 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167();
                goto label25;
            }
            if ((temp32 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167();
                goto label25;
            }
            if ((temp32 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167();
                goto label25;
            }
            if ((temp32 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167();
                goto label25;
            }
            if ((temp32 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167();
                goto label25;
            }
            if ((temp32 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167();
                goto label25;
            }
            if ((temp32 == 6)) {
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S190\'");
                int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker8)));
                if ((temp31 == 0)) {
                    this.Manager.Comment("reaching state \'S202\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,True,True,FileRenameInf" +
                            "ormation,0,\"Dir1\\Test1.txt\",True,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileRenameInformation, 0, "Dir1\\Test1.txt", true, 0);
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S236\'");
                    int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4Trans2SetFileInfoResponseChecker)));
                    if ((temp30 == 0)) {
                        this.Manager.Comment("reaching state \'S253\'");
                        goto label23;
                    }
                    if ((temp30 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS254();
                        goto label23;
                    }
                    if ((temp30 == 2)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS254();
                        goto label23;
                    }
                    if ((temp30 == 3)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS254();
                        goto label23;
                    }
                    if ((temp30 == 4)) {
                        this.Manager.Comment("reaching state \'S255\'");
                        goto label23;
                    }
                    if ((temp30 == 5)) {
                        this.Manager.Comment("reaching state \'S252\'");
                        goto label23;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.Trans2SetFileInfoResponseInfo, null, new Trans2SetFileInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4Trans2SetFileInfoResponseChecker)));
                label23:
;
                    goto label24;
                }
                if ((temp31 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS203();
                    goto label24;
                }
                if ((temp31 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS203();
                    goto label24;
                }
                if ((temp31 == 3)) {
                    this.Manager.Comment("reaching state \'S204\'");
                    goto label24;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker8)));
            label24:
;
                goto label25;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4TreeConnectResponseChecker)));
        label25:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS167() {
            this.Manager.Comment("reaching state \'S167\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S190");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S190, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S190");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S236");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S236");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS254() {
            this.Manager.Comment("reaching state \'S254\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S268\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S274\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S236");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430, MS-SMB_R30034");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
            this.Manager.Checkpoint("MS-SMB_R30034");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S236");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4Trans2SetFileInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFileInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFileInfoResponse, state S236");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFileInfoResponse, state S236");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFileInfoResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFileInfoResponse, state S236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFileInfoResponse, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9323, MS-SMB_R30030, MS-SMB_R30036, MS-SMB_R" +
                        "9588");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9323");
            this.Manager.Checkpoint("MS-SMB_R30030");
            this.Manager.Checkpoint("MS-SMB_R30036");
            this.Manager.Checkpoint("MS-SMB_R9588");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S190");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS203() {
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S237\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S190");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S190");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS4NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S119");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S48\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S57\'");
                    bool temp34;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp34);
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp34, "createPipeStatus of CreatePipeAndMailslot, state S66");
                    this.Manager.Comment("reaching state \'S75\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S84\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S93\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S102\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S111\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S120\'");
                        int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker3)));
                        if ((temp35 == 0)) {
                            this.Manager.Comment("reaching state \'S133\'");
                            goto label27;
                        }
                        if ((temp35 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS132();
                            goto label27;
                        }
                        if ((temp35 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS132();
                            goto label27;
                        }
                        if ((temp35 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS132();
                            goto label27;
                        }
                        if ((temp35 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS132();
                            goto label27;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker3)));
                    label27:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S21");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S21");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S48");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S48");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S48");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S48");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S48");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S48");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S93");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S93");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S93");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S93");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S93");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S93, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S93");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS6NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S22\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S49\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S58\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp36);
                    this.Manager.Comment("reaching state \'S67\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "createPipeStatus of CreatePipeAndMailslot, state S67");
                    this.Manager.Comment("reaching state \'S76\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S94\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S103\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S112\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S121\'");
                        int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker3)));
                        if ((temp40 == 0)) {
                            this.Manager.Comment("reaching state \'S135\'");
                            goto label31;
                        }
                        if ((temp40 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS134();
                            goto label31;
                        }
                        if ((temp40 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS134();
                            goto label31;
                        }
                        if ((temp40 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS134();
                            goto label31;
                        }
                        if ((temp40 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS134();
                            goto label31;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker3)));
                    label31:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S22");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S22");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S49");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S94");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S94");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S94");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S94");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S94");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S94, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S94");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS134() {
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S157\'");
            int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8TreeConnectResponseChecker)));
            if ((temp39 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171();
                goto label30;
            }
            if ((temp39 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171();
                goto label30;
            }
            if ((temp39 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171();
                goto label30;
            }
            if ((temp39 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171();
                goto label30;
            }
            if ((temp39 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171();
                goto label30;
            }
            if ((temp39 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171();
                goto label30;
            }
            if ((temp39 == 6)) {
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S192\'");
                int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker7)));
                if ((temp38 == 0)) {
                    this.Manager.Comment("reaching state \'S208\'");
                    this.Manager.Comment("executing step \'call Trans2SetFileInfoRequest(5,1,1,False,True,True,FileLinkInfor" +
                            "mation,0,\"Dir1\\Test1.txt\",False,0)\'");
                    this.ISmbAdapterInstance.Trans2SetFileInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileLinkInformation, 0, "Dir1\\Test1.txt", false, 0);
                    this.Manager.Comment("reaching state \'S226\'");
                    this.Manager.Comment("checking step \'return Trans2SetFileInfoRequest\'");
                    this.Manager.Comment("reaching state \'S240\'");
                    int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker4)));
                    if ((temp37 == 0)) {
                        this.Manager.Comment("reaching state \'S260\'");
                        goto label28;
                    }
                    if ((temp37 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS261();
                        goto label28;
                    }
                    if ((temp37 == 2)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS261();
                        goto label28;
                    }
                    if ((temp37 == 3)) {
                        this.Manager.Comment("reaching state \'S262\'");
                        goto label28;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker4)));
                label28:
;
                    goto label29;
                }
                if ((temp38 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS209();
                    goto label29;
                }
                if ((temp38 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS209();
                    goto label29;
                }
                if ((temp38 == 3)) {
                    this.Manager.Comment("reaching state \'S210\'");
                    goto label29;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker7)));
            label29:
;
                goto label30;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8TreeConnectResponseChecker)));
        label30:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS171() {
            this.Manager.Comment("reaching state \'S171\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S157");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S157");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S192");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S192, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusOs2InvalidLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusOs2InvalidLevel, messageStatus, "messageStatus of ErrorResponse, state S240");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,ObjectNameNotCollision)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotCollision, messageStatus, "messageStatus of ErrorResponse, state S240");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS261() {
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S270\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S276\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8430");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8430");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S240");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,AccessDenied)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S192");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS209() {
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S241\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S192");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S192");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileNameS8NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
    }
}
