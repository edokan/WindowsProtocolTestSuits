//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignRequirementCoverage_QueryQuota_Win7_Win2K8 : PtfTestClassBase {
        
        public NoSignRequirementCoverage_QueryQuota_Win7_Win2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NtTransQueryQuotaResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, int quotaInfo, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NtTransSetQuotaResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo NtTransQueryQuotaResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NtTransQueryQuotaResponse");
        
        static System.Reflection.EventInfo NtTransSetQuotaResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NtTransSetQuotaResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NtTransQueryQuotaResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NtTransSetQuotaResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0() {
            this.Manager.BeginTest("NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S12\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S30\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S36\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S42");
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S54\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S60\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S66\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S72\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S78\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SessionSetupResponseChecker1)));
                        if ((temp4 == 0)) {
                            this.Manager.Comment("reaching state \'S84\'");
                            goto label3;
                        }
                        if ((temp4 == 1)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S85();
                            goto label3;
                        }
                        if ((temp4 == 2)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S85();
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SessionSetupResponseChecker1)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S12");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S12");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S30");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S30");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S30");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S30");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S30");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S30");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S60");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S60");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S60, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S78");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S85() {
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share2\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share2", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S102\'");
            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0TreeConnectResponseChecker)));
            if ((temp3 == 0)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108();
                goto label2;
            }
            if ((temp3 == 1)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108();
                goto label2;
            }
            if ((temp3 == 2)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108();
                goto label2;
            }
            if ((temp3 == 3)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108();
                goto label2;
            }
            if ((temp3 == 4)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108();
                goto label2;
            }
            if ((temp3 == 5)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108();
                goto label2;
            }
            if ((temp3 == 6)) {
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S120();
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0TreeConnectResponseChecker)));
        label2:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S102");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S108() {
            this.Manager.Comment("reaching state \'S108\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S102");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S102");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S102");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S102");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S102");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S120() {
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateRequestInfo, null, new CreateRequestDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S125\'");
            int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker4)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("executing step \'call NtTransQueryQuotaRequest(5,1,1,False,0,False,False,0,0,0)\'");
                this.ISmbAdapterInstance.NtTransQueryQuotaRequest(5, 1, 1, false, 0, false, false, 0, 0, 0);
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("checking step \'return NtTransQueryQuotaRequest\'");
                this.Manager.Comment("reaching state \'S155\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransQueryQuotaResponseInfo, null, new NtTransQueryQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0NtTransQueryQuotaResponseChecker)));
                if ((temp1 == 0)) {
                    this.Manager.Comment("reaching state \'S166\'");
                    goto label0;
                }
                if ((temp1 == 1)) {
                    this.Manager.Comment("reaching state \'S167\'");
                    goto label0;
                }
                if ((temp1 == 2)) {
                    this.Manager.Comment("reaching state \'S165\'");
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransQueryQuotaResponseInfo, null, new NtTransQueryQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0NtTransQueryQuotaResponseChecker)));
            label0:
;
                goto label1;
            }
            if ((temp2 == 1)) {
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S156\'");
                goto label1;
            }
            if ((temp2 == 2)) {
                this.Manager.Comment("reaching state \'S132\'");
                goto label1;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker4)));
        label1:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S125");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S125, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S155");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8459");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8459");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S155");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0NtTransQueryQuotaResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, int quotaInfo, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NtTransQueryQuotaResponse(5,1,1,False,0,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of NtTransQueryQuotaResponse, state S155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NtTransQueryQuotaResponse, state S155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of NtTransQueryQuotaResponse, state S155");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NtTransQueryQuotaResponse, state S155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, quotaInfo, "quotaInfo of NtTransQueryQuotaResponse, state S155");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NtTransQueryQuotaResponse, state S155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9451");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9451");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S125");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S125");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S125");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S125");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S0SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S78");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10() {
            this.Manager.BeginTest("NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S17\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S35\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S41\'");
                    bool temp5;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp5);
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "createPipeStatus of CreatePipeAndMailslot, state S47");
                    this.Manager.Comment("reaching state \'S53\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S65\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S71\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S77\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S83\'");
                        int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SessionSetupResponseChecker1)));
                        if ((temp9 == 0)) {
                            this.Manager.Comment("reaching state \'S95\'");
                            goto label7;
                        }
                        if ((temp9 == 1)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S94();
                            goto label7;
                        }
                        if ((temp9 == 2)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S94();
                            goto label7;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SessionSetupResponseChecker1)));
                    label7:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S17");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S17");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S35");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S65");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S65, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S94() {
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share2\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share2", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S107\'");
            int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10TreeConnectResponseChecker)));
            if ((temp8 == 0)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119();
                goto label6;
            }
            if ((temp8 == 1)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119();
                goto label6;
            }
            if ((temp8 == 2)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119();
                goto label6;
            }
            if ((temp8 == 3)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119();
                goto label6;
            }
            if ((temp8 == 4)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119();
                goto label6;
            }
            if ((temp8 == 5)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119();
                goto label6;
            }
            if ((temp8 == 6)) {
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S129\'");
                int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker5)));
                if ((temp7 == 0)) {
                    this.Manager.Comment("reaching state \'S142\'");
                    this.Manager.Comment("executing step \'call NtTransQueryQuotaRequest(5,1,1,False,0,True,False,0,0,0)\'");
                    this.ISmbAdapterInstance.NtTransQueryQuotaRequest(5, 1, 1, false, 0, true, false, 0, 0, 0);
                    this.Manager.Comment("reaching state \'S153\'");
                    this.Manager.Comment("checking step \'return NtTransQueryQuotaRequest\'");
                    this.Manager.Comment("reaching state \'S163\'");
                    int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker3)));
                    if ((temp6 == 0)) {
                        this.Manager.Comment("reaching state \'S177\'");
                        goto label4;
                    }
                    if ((temp6 == 1)) {
                        this.Manager.Comment("reaching state \'S178\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S182\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S185\'");
                        goto label4;
                    }
                    if ((temp6 == 2)) {
                        this.Manager.Comment("reaching state \'S179\'");
                        goto label4;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker3)));
                label4:
;
                    goto label5;
                }
                if ((temp7 == 1)) {
                    this.Manager.Comment("reaching state \'S143\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S154\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S164\'");
                    goto label5;
                }
                if ((temp7 == 2)) {
                    this.Manager.Comment("reaching state \'S144\'");
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker5)));
            label5:
;
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10TreeConnectResponseChecker)));
        label6:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S119() {
            this.Manager.Comment("reaching state \'S119\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S107");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S107");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S129");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S129, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S163");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S163");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusInvalidDeviceRequest)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S163");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusInvalidDeviceRequest, messageStatus, "messageStatus of ErrorResponse, state S163");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8459");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8459");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S129");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S129");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S129");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S129");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S10SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2() {
            this.Manager.BeginTest("NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S13\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S31\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S37\'");
                    bool temp10;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp10);
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp10, "createPipeStatus of CreatePipeAndMailslot, state S43");
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S55\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S61\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S67\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S73\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S79\'");
                        int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SessionSetupResponseChecker1)));
                        if ((temp14 == 0)) {
                            this.Manager.Comment("reaching state \'S87\'");
                            goto label11;
                        }
                        if ((temp14 == 1)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S86();
                            goto label11;
                        }
                        if ((temp14 == 2)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S86();
                            goto label11;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SessionSetupResponseChecker1)));
                    label11:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S13");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S13");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S31");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S61");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S61, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S79");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S86() {
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share2\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share2", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S103\'");
            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2TreeConnectResponseChecker)));
            if ((temp13 == 0)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111();
                goto label10;
            }
            if ((temp13 == 1)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111();
                goto label10;
            }
            if ((temp13 == 2)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111();
                goto label10;
            }
            if ((temp13 == 3)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111();
                goto label10;
            }
            if ((temp13 == 4)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111();
                goto label10;
            }
            if ((temp13 == 5)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111();
                goto label10;
            }
            if ((temp13 == 6)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S126\'");
                int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker4)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S133\'");
                    this.Manager.Comment("executing step \'call NtTransQueryQuotaRequest(5,1,1,False,0,True,False,0,0,0)\'");
                    this.ISmbAdapterInstance.NtTransQueryQuotaRequest(5, 1, 1, false, 0, true, false, 0, 0, 0);
                    this.Manager.Comment("reaching state \'S147\'");
                    this.Manager.Comment("checking step \'return NtTransQueryQuotaRequest\'");
                    this.Manager.Comment("reaching state \'S157\'");
                    int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransQueryQuotaResponseInfo, null, new NtTransQueryQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2NtTransQueryQuotaResponseChecker)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S169\'");
                        goto label8;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S170\'");
                        goto label8;
                    }
                    if ((temp11 == 2)) {
                        this.Manager.Comment("reaching state \'S168\'");
                        goto label8;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransQueryQuotaResponseInfo, null, new NtTransQueryQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2NtTransQueryQuotaResponseChecker)));
                label8:
;
                    goto label9;
                }
                if ((temp12 == 1)) {
                    this.Manager.Comment("reaching state \'S134\'");
                    goto label9;
                }
                if ((temp12 == 2)) {
                    this.Manager.Comment("reaching state \'S135\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S148\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S158\'");
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker4)));
            label9:
;
                goto label10;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2TreeConnectResponseChecker)));
        label10:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S111() {
            this.Manager.Comment("reaching state \'S111\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S103");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S126");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S126, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S126");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S157");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8459");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8459");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2NtTransQueryQuotaResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, int quotaInfo, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NtTransQueryQuotaResponse(5,1,1,False,0,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of NtTransQueryQuotaResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NtTransQueryQuotaResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of NtTransQueryQuotaResponse, state S157");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NtTransQueryQuotaResponse, state S157");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, quotaInfo, "quotaInfo of NtTransQueryQuotaResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NtTransQueryQuotaResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9451");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9451");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S126");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S126");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S126");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S126");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S2SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S79");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4() {
            this.Manager.BeginTest("NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S14\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S32\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S38\'");
                    bool temp15;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp15);
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "createPipeStatus of CreatePipeAndMailslot, state S44");
                    this.Manager.Comment("reaching state \'S50\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S56\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S62\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S68\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S74\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S80\'");
                        int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SessionSetupResponseChecker1)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S89\'");
                            goto label16;
                        }
                        if ((temp20 == 1)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S88();
                            goto label16;
                        }
                        if ((temp20 == 2)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S88();
                            goto label16;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SessionSetupResponseChecker1)));
                    label16:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S14");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S14");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S32");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S32");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S62");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S62, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S88() {
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share2\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share2", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S104\'");
            int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4TreeConnectResponseChecker)));
            if ((temp19 == 0)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113();
                goto label15;
            }
            if ((temp19 == 1)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113();
                goto label15;
            }
            if ((temp19 == 2)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113();
                goto label15;
            }
            if ((temp19 == 3)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113();
                goto label15;
            }
            if ((temp19 == 4)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113();
                goto label15;
            }
            if ((temp19 == 5)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113();
                goto label15;
            }
            if ((temp19 == 6)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S127\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker6)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S136\'");
                    this.Manager.Comment("executing step \'call NtTransSetQuotaRequest(5,1,1,0,False,1)\'");
                    this.ISmbAdapterInstance.NtTransSetQuotaRequest(5, 1, 1, 0, false, 1);
                    this.Manager.Comment("reaching state \'S149\'");
                    this.Manager.Comment("checking step \'return NtTransSetQuotaRequest\'");
                    this.Manager.Comment("reaching state \'S159\'");
                    int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransSetQuotaResponseInfo, null, new NtTransSetQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NtTransSetQuotaResponseChecker)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S172\'");
                        goto label13;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S173\'");
                        goto label13;
                    }
                    if ((temp17 == 2)) {
                        this.Manager.Comment("reaching state \'S171\'");
                        this.Manager.Comment("executing step \'call NtTransQueryQuotaRequest(6,1,1,False,0,True,False,0,0,0)\'");
                        this.ISmbAdapterInstance.NtTransQueryQuotaRequest(6, 1, 1, false, 0, true, false, 0, 0, 0);
                        this.Manager.Comment("reaching state \'S180\'");
                        this.Manager.Comment("checking step \'return NtTransQueryQuotaRequest\'");
                        this.Manager.Comment("reaching state \'S183\'");
                        int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransQueryQuotaResponseInfo, null, new NtTransQueryQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NtTransQueryQuotaResponseChecker)));
                        if ((temp16 == 0)) {
                            this.Manager.Comment("reaching state \'S187\'");
                            goto label12;
                        }
                        if ((temp16 == 1)) {
                            this.Manager.Comment("reaching state \'S188\'");
                            goto label12;
                        }
                        if ((temp16 == 2)) {
                            this.Manager.Comment("reaching state \'S186\'");
                            goto label12;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransQueryQuotaResponseInfo, null, new NtTransQueryQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NtTransQueryQuotaResponseChecker)));
                    label12:
;
                        goto label13;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NtTransSetQuotaResponseInfo, null, new NtTransSetQuotaResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NtTransSetQuotaResponseChecker)));
                label13:
;
                    goto label14;
                }
                if ((temp18 == 1)) {
                    this.Manager.Comment("reaching state \'S137\'");
                    goto label14;
                }
                if ((temp18 == 2)) {
                    this.Manager.Comment("reaching state \'S138\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S150\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S160\'");
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker6)));
            label14:
;
                goto label15;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4TreeConnectResponseChecker)));
        label15:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S113() {
            this.Manager.Comment("reaching state \'S113\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S104");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S104");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S127");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S127, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S159");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusBufferTooSmall)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBufferTooSmall, messageStatus, "messageStatus of ErrorResponse, state S159");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NtTransSetQuotaResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NtTransSetQuotaResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of NtTransSetQuotaResponse, state S159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NtTransSetQuotaResponse, state S159");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of NtTransSetQuotaResponse, state S159");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NtTransSetQuotaResponse, state S159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NtTransSetQuotaResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9463, MS-SMB_R5024");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9463");
            this.Manager.Checkpoint("MS-SMB_R5024");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(6,InvalidParameter)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorResponse, state S183");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorResponse, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8459");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8459");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(6,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorResponse, state S183");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S183");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4NtTransQueryQuotaResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, int quotaInfo, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NtTransQueryQuotaResponse(6,1,1,False,0,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of NtTransQueryQuotaResponse, state S183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NtTransQueryQuotaResponse, state S183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of NtTransQueryQuotaResponse, state S183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NtTransQueryQuotaResponse, state S183");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, quotaInfo, "quotaInfo of NtTransQueryQuotaResponse, state S183");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NtTransQueryQuotaResponse, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9451");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9451");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S127");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S127");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S127");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S127");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S4SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6() {
            this.Manager.BeginTest("NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S15\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S33\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S39\'");
                    bool temp21;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp21);
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "createPipeStatus of CreatePipeAndMailslot, state S45");
                    this.Manager.Comment("reaching state \'S51\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S57\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S63\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S69\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S75\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S81\'");
                        int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SessionSetupResponseChecker1)));
                        if ((temp25 == 0)) {
                            this.Manager.Comment("reaching state \'S91\'");
                            goto label20;
                        }
                        if ((temp25 == 1)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S90();
                            goto label20;
                        }
                        if ((temp25 == 2)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S90();
                            goto label20;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SessionSetupResponseChecker1)));
                    label20:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S15");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S15");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S33");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S63");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S63");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S63, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S81");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S81");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S90() {
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share2\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share2", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S105\'");
            int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6TreeConnectResponseChecker)));
            if ((temp24 == 0)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115();
                goto label19;
            }
            if ((temp24 == 1)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115();
                goto label19;
            }
            if ((temp24 == 2)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115();
                goto label19;
            }
            if ((temp24 == 3)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115();
                goto label19;
            }
            if ((temp24 == 4)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115();
                goto label19;
            }
            if ((temp24 == 5)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115();
                goto label19;
            }
            if ((temp24 == 6)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S128\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker5)));
                if ((temp23 == 0)) {
                    this.Manager.Comment("reaching state \'S139\'");
                    this.Manager.Comment("executing step \'call NtTransSetQuotaRequest(5,1,1,0,False,1)\'");
                    this.ISmbAdapterInstance.NtTransSetQuotaRequest(5, 1, 1, 0, false, 1);
                    this.Manager.Comment("reaching state \'S151\'");
                    this.Manager.Comment("checking step \'return NtTransSetQuotaRequest\'");
                    this.Manager.Comment("reaching state \'S161\'");
                    int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker3)));
                    if ((temp22 == 0)) {
                        this.Manager.Comment("reaching state \'S174\'");
                        goto label17;
                    }
                    if ((temp22 == 1)) {
                        this.Manager.Comment("reaching state \'S175\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S181\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S184\'");
                        goto label17;
                    }
                    if ((temp22 == 2)) {
                        this.Manager.Comment("reaching state \'S176\'");
                        goto label17;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker3)));
                label17:
;
                    goto label18;
                }
                if ((temp23 == 1)) {
                    this.Manager.Comment("reaching state \'S140\'");
                    goto label18;
                }
                if ((temp23 == 2)) {
                    this.Manager.Comment("reaching state \'S141\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S152\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S162\'");
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6CreateResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker5)));
            label18:
;
                goto label19;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6TreeConnectResponseChecker)));
        label19:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S115() {
            this.Manager.Comment("reaching state \'S115\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S105");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S105");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S128");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S128, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S161");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusInvalidDeviceRequest)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusInvalidDeviceRequest, messageStatus, "messageStatus of ErrorResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5035");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5035");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,StatusBufferTooSmall)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBufferTooSmall, messageStatus, "messageStatus of ErrorResponse, state S161");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S128");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S128");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S128");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S128");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S6SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S81");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8() {
            this.Manager.BeginTest("NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S16\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S34\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S40\'");
                    bool temp26;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp26);
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp26, "createPipeStatus of CreatePipeAndMailslot, state S46");
                    this.Manager.Comment("reaching state \'S52\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Disabled,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S64\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S70\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs,CapExtended" +
                                "Security},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S76\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S82\'");
                        int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SessionSetupResponseChecker1)));
                        if ((temp28 == 0)) {
                            this.Manager.Comment("reaching state \'S93\'");
                            goto label22;
                        }
                        if ((temp28 == 1)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S92();
                            goto label22;
                        }
                        if ((temp28 == 2)) {
                            NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S92();
                            goto label22;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SessionSetupResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SessionSetupResponseChecker1)));
                    label22:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S16");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S16");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S34");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S34");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S34");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S34");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S34");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S34");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,False,5,{CapNtSmbs,CapExtendedSecu" +
                    "rity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S64");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S64, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S92() {
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share2\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share2", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S106\'");
            int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8TreeConnectResponseChecker)));
            if ((temp27 == 0)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116();
                goto label21;
            }
            if ((temp27 == 1)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116();
                goto label21;
            }
            if ((temp27 == 2)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116();
                goto label21;
            }
            if ((temp27 == 3)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116();
                goto label21;
            }
            if ((temp27 == 4)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116();
                goto label21;
            }
            if ((temp27 == 5)) {
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116();
                goto label21;
            }
            if ((temp27 == 6)) {
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S120();
                goto label21;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignRequirementCoverage_QueryQuota_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8TreeConnectResponseChecker)));
        label21:
;
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S116() {
            this.Manager.Comment("reaching state \'S116\'");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S106");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S106");
        }
        
        private void NoSignRequirementCoverage_QueryQuota_Win7_Win2K8S8SessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R4784, MS-SMB_R21" +
                        "93, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        #endregion
    }
}
