//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8 : PtfTestClassBase {
        
        public NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NonExtendedNegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NonExtendedSessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo NonExtendedNegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedNegotiateResponse");
        
        static System.Reflection.EventInfo NonExtendedSessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedSessionSetupResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedNegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedSessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S96\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S240\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S288\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S336\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S336");
                    this.Manager.Comment("reaching state \'S384\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S432\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S480\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedNegotiateResponseChecker)));
                    if ((temp2 == 0)) {
                        this.Manager.Comment("reaching state \'S528\'");
                        goto label1;
                    }
                    if ((temp2 == 1)) {
                        this.Manager.Comment("reaching state \'S529\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S624\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S672\'");
                        int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker3)));
                        if ((temp1 == 0)) {
                            this.Manager.Comment("reaching state \'S720\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S816\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S912\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1008\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1104\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1200\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1296\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1392\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1488\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1584\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1680\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1776\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker)));
                            }
                            goto label0;
                        }
                        if ((temp1 == 1)) {
                            this.Manager.Comment("reaching state \'S721\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S817\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S913\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1009\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1105\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1201\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1297\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1393\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1489\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1585\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1681\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1777\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker1)));
                            }
                            goto label0;
                        }
                        if ((temp1 == 2)) {
                            this.Manager.Comment("reaching state \'S722\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S818\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S914\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1010\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1106\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1202\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1298\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1394\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1490\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1586\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1682\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1778\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker2)));
                            }
                            goto label0;
                        }
                        if ((temp1 == 3)) {
                            this.Manager.Comment("reaching state \'S723\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S819\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S915\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1011\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1107\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1203\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1299\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1395\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1491\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1587\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1683\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1779\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker3)));
                            }
                            goto label0;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker3)));
                    label0:
;
                        goto label1;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedNegotiateResponseChecker)));
                label1:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S96");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S96");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S240");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S240");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S480");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S480");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S480");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S480");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S480");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S480");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S480");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S480, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S480");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S912");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S912");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1200");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1200, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S913");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S913");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1201");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1201, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1489");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S914");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S914");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1202");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1202, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1490");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1490");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S915");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S915");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1203");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1203, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S101\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S245\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S293\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp3);
                    this.Manager.Comment("reaching state \'S341\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp3, "createPipeStatus of CreatePipeAndMailslot, state S341");
                    this.Manager.Comment("reaching state \'S389\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S437\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S485\'");
                    int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedNegotiateResponseChecker)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S539\'");
                        goto label3;
                    }
                    if ((temp5 == 1)) {
                        this.Manager.Comment("reaching state \'S538\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S629\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S677\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker3)));
                        if ((temp4 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S728();
                            goto label2;
                        }
                        if ((temp4 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S728();
                            goto label2;
                        }
                        if ((temp4 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S728();
                            goto label2;
                        }
                        if ((temp4 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S728();
                            goto label2;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker3)));
                    label2:
;
                        goto label3;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedNegotiateResponseChecker)));
                label3:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S101");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S101");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S245");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S245");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S485");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S485");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S485");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S485");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S485");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S485, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S485");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S728() {
            this.Manager.Comment("reaching state \'S728\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S824\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S920\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1016\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1112\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1208\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1304\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1400\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1496\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1592\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1688\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1784\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S920");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S920");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1208");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1208, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1496");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1496");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S10NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S102\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S246\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S294\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp6);
                    this.Manager.Comment("reaching state \'S342\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "createPipeStatus of CreatePipeAndMailslot, state S342");
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S438\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S486\'");
                    int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedNegotiateResponseChecker)));
                    if ((temp8 == 0)) {
                        this.Manager.Comment("reaching state \'S541\'");
                        goto label5;
                    }
                    if ((temp8 == 1)) {
                        this.Manager.Comment("reaching state \'S540\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S630\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S678\'");
                        int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker3)));
                        if ((temp7 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S729();
                            goto label4;
                        }
                        if ((temp7 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S729();
                            goto label4;
                        }
                        if ((temp7 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S729();
                            goto label4;
                        }
                        if ((temp7 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S729();
                            goto label4;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker3)));
                    label4:
;
                        goto label5;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedNegotiateResponseChecker)));
                label5:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S102");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S246");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S246");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S486");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S486");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S486");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S486");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S486");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S486");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S486");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S486, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S486");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S678");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S729() {
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S825\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S921\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1017\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1113\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1209\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1305\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1401\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1497\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1593\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1689\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1785\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S921");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S921");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1209");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1209, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1497");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1497");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S678");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S678");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S12NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S678");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S678");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S103\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S247\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S295\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp9);
                    this.Manager.Comment("reaching state \'S343\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "createPipeStatus of CreatePipeAndMailslot, state S343");
                    this.Manager.Comment("reaching state \'S391\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S439\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S487\'");
                    int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedNegotiateResponseChecker)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S543\'");
                        goto label7;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S542\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S631\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S679\'");
                        int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker3)));
                        if ((temp10 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S730();
                            goto label6;
                        }
                        if ((temp10 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S730();
                            goto label6;
                        }
                        if ((temp10 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S730();
                            goto label6;
                        }
                        if ((temp10 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S730();
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker3)));
                    label6:
;
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedNegotiateResponseChecker)));
                label7:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S103");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S247");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S247");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S487");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S487");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S487");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S487");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S487");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S487");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S487");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S487, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S487");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S679");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S730() {
            this.Manager.Comment("reaching state \'S730\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S826\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S922\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1018\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1114\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1210\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1306\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1402\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1498\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1594\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1690\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1786\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S922");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S922");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1210");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1210, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1498");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S679");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S679");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S14NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S679");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S679");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S104\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S248\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S296\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S344");
                    this.Manager.Comment("reaching state \'S392\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S440\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S488\'");
                    int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedNegotiateResponseChecker)));
                    if ((temp14 == 0)) {
                        this.Manager.Comment("reaching state \'S545\'");
                        goto label9;
                    }
                    if ((temp14 == 1)) {
                        this.Manager.Comment("reaching state \'S544\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S632\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S680\'");
                        int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker3)));
                        if ((temp13 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S731();
                            goto label8;
                        }
                        if ((temp13 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S731();
                            goto label8;
                        }
                        if ((temp13 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S731();
                            goto label8;
                        }
                        if ((temp13 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S731();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker3)));
                    label8:
;
                        goto label9;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedNegotiateResponseChecker)));
                label9:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S104");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S248");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S248");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S488");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S488");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S488");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S488");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S488");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S488, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S488");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S731() {
            this.Manager.Comment("reaching state \'S731\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S827\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S923\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1019\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1115\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1211\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1307\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1403\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1499\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1595\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1691\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1787\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S923");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S923");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1211");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1211, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S16NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S680");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S105\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S249\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S297\'");
                    bool temp15;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp15);
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "createPipeStatus of CreatePipeAndMailslot, state S345");
                    this.Manager.Comment("reaching state \'S393\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S441\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S489\'");
                    int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedNegotiateResponseChecker)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S547\'");
                        goto label11;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S546\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S633\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S681\'");
                        int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker3)));
                        if ((temp16 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S732();
                            goto label10;
                        }
                        if ((temp16 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S732();
                            goto label10;
                        }
                        if ((temp16 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S732();
                            goto label10;
                        }
                        if ((temp16 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S732();
                            goto label10;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker3)));
                    label10:
;
                        goto label11;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedNegotiateResponseChecker)));
                label11:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S105");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S249");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S249");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S489");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S489");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S489");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S489");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S489");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S489");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S489, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S489");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S732() {
            this.Manager.Comment("reaching state \'S732\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S828\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S924\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1020\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1116\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1212\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1308\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1404\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1500\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1596\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1692\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1788\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S924");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S924");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1212");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1212, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1212");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1500");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1500");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S18NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S681");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S97\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S241\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S289\'");
                    bool temp18;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp18);
                    this.Manager.Comment("reaching state \'S337\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp18, "createPipeStatus of CreatePipeAndMailslot, state S337");
                    this.Manager.Comment("reaching state \'S385\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S433\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S481\'");
                    int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedNegotiateResponseChecker)));
                    if ((temp20 == 0)) {
                        this.Manager.Comment("reaching state \'S531\'");
                        goto label13;
                    }
                    if ((temp20 == 1)) {
                        this.Manager.Comment("reaching state \'S530\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S625\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S673\'");
                        int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker3)));
                        if ((temp19 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S724();
                            goto label12;
                        }
                        if ((temp19 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S724();
                            goto label12;
                        }
                        if ((temp19 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S724();
                            goto label12;
                        }
                        if ((temp19 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S724();
                            goto label12;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker3)));
                    label12:
;
                        goto label13;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedNegotiateResponseChecker)));
                label13:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S97");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S97");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S241");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S241");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S481");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S481");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S481");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S481");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S481");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S481");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S481");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S481, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S481");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S724() {
            this.Manager.Comment("reaching state \'S724\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S820\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S916\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1012\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1108\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1204\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1300\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1396\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1492\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1588\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1684\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1780\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S916");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S916");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1204");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1204, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1492");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1492");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S106\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S250\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S298\'");
                    bool temp21;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp21);
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "createPipeStatus of CreatePipeAndMailslot, state S346");
                    this.Manager.Comment("reaching state \'S394\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S442\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S490\'");
                    int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedNegotiateResponseChecker)));
                    if ((temp23 == 0)) {
                        this.Manager.Comment("reaching state \'S549\'");
                        goto label15;
                    }
                    if ((temp23 == 1)) {
                        this.Manager.Comment("reaching state \'S548\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S634\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S682\'");
                        int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker3)));
                        if ((temp22 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S733();
                            goto label14;
                        }
                        if ((temp22 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S733();
                            goto label14;
                        }
                        if ((temp22 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S733();
                            goto label14;
                        }
                        if ((temp22 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S733();
                            goto label14;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker3)));
                    label14:
;
                        goto label15;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedNegotiateResponseChecker)));
                label15:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S106");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S250");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S250");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S490");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S490");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S490");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S490");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S490");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S490");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S490");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S490, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S490");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S682");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S733() {
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S829\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S925\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1021\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1117\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1213\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1309\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1405\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1501\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1597\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1693\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1789\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S925");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S925");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1213");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1213, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S682");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S682");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S20NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S682");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S107\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S251\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S299\'");
                    bool temp24;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp24);
                    this.Manager.Comment("reaching state \'S347\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "createPipeStatus of CreatePipeAndMailslot, state S347");
                    this.Manager.Comment("reaching state \'S395\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S443\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S491\'");
                    int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedNegotiateResponseChecker)));
                    if ((temp26 == 0)) {
                        this.Manager.Comment("reaching state \'S551\'");
                        goto label17;
                    }
                    if ((temp26 == 1)) {
                        this.Manager.Comment("reaching state \'S550\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S635\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S683\'");
                        int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker3)));
                        if ((temp25 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S734();
                            goto label16;
                        }
                        if ((temp25 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S734();
                            goto label16;
                        }
                        if ((temp25 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S734();
                            goto label16;
                        }
                        if ((temp25 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S734();
                            goto label16;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker3)));
                    label16:
;
                        goto label17;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedNegotiateResponseChecker)));
                label17:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S107");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S251");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S251");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S491");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S491");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S491");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S491");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S491");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S491, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S491");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S683");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S734() {
            this.Manager.Comment("reaching state \'S734\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S830\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S926\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1022\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1118\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1214\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1310\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1406\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1502\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1598\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1694\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1790\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S926");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S926");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1214");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1214, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1214");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1502");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1502");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S683");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S683");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S22NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S683");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S683");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S108\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S252\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S300\'");
                    bool temp27;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp27);
                    this.Manager.Comment("reaching state \'S348\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp27, "createPipeStatus of CreatePipeAndMailslot, state S348");
                    this.Manager.Comment("reaching state \'S396\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S444\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S492\'");
                    int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedNegotiateResponseChecker)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S553\'");
                        goto label19;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S552\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S636\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S684\'");
                        int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker3)));
                        if ((temp28 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S735();
                            goto label18;
                        }
                        if ((temp28 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S735();
                            goto label18;
                        }
                        if ((temp28 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S735();
                            goto label18;
                        }
                        if ((temp28 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S735();
                            goto label18;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker3)));
                    label18:
;
                        goto label19;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedNegotiateResponseChecker)));
                label19:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S108");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S108");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S252");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S252");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S252");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S252");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S252");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S252");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S492");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S492");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S492");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S492");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S492");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S492");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S492");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S492, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S492");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S735() {
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S831\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S927\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1023\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1119\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1215\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1311\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1407\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1503\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1599\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1695\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1791\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S927");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S927");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1215");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1215, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S24NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S109\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S253\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S301\'");
                    bool temp30;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp30);
                    this.Manager.Comment("reaching state \'S349\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp30, "createPipeStatus of CreatePipeAndMailslot, state S349");
                    this.Manager.Comment("reaching state \'S397\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S445\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S493\'");
                    int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedNegotiateResponseChecker)));
                    if ((temp32 == 0)) {
                        this.Manager.Comment("reaching state \'S555\'");
                        goto label21;
                    }
                    if ((temp32 == 1)) {
                        this.Manager.Comment("reaching state \'S554\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S637\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S685\'");
                        int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker3)));
                        if ((temp31 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S736();
                            goto label20;
                        }
                        if ((temp31 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S736();
                            goto label20;
                        }
                        if ((temp31 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S736();
                            goto label20;
                        }
                        if ((temp31 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S736();
                            goto label20;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker3)));
                    label20:
;
                        goto label21;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedNegotiateResponseChecker)));
                label21:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S109");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S109");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S253");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S253");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S253");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S253");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S253");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S253");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S493");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S493");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S493");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S493");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S493");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S493");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S493");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S493, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S493");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S685");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S736() {
            this.Manager.Comment("reaching state \'S736\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S832\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S928\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1024\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1120\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1216\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1312\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1408\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1504\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1600\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1696\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1792\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S928");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S928");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1216");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1216, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S685");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S685");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S26NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S685");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S685");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S110\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S254\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S302\'");
                    bool temp33;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp33);
                    this.Manager.Comment("reaching state \'S350\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp33, "createPipeStatus of CreatePipeAndMailslot, state S350");
                    this.Manager.Comment("reaching state \'S398\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S446\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S494\'");
                    int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedNegotiateResponseChecker)));
                    if ((temp35 == 0)) {
                        this.Manager.Comment("reaching state \'S557\'");
                        goto label23;
                    }
                    if ((temp35 == 1)) {
                        this.Manager.Comment("reaching state \'S556\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S638\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S686\'");
                        int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker3)));
                        if ((temp34 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S737();
                            goto label22;
                        }
                        if ((temp34 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S737();
                            goto label22;
                        }
                        if ((temp34 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S737();
                            goto label22;
                        }
                        if ((temp34 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S737();
                            goto label22;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker3)));
                    label22:
;
                        goto label23;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedNegotiateResponseChecker)));
                label23:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S110");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S110");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S254");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S254");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S254");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S254");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S254");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S254");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S494");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S494");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S494");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S494");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S494");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S494");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S494");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S494, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S494");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S686");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S737() {
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S929\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1025\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1121\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1217\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1313\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1409\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1505\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1601\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1697\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1793\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S929");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S929");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1217");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1217, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1217");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1505");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1505");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S686");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S686");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S28NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S686");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S686");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S111\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S255\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S303\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp36);
                    this.Manager.Comment("reaching state \'S351\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "createPipeStatus of CreatePipeAndMailslot, state S351");
                    this.Manager.Comment("reaching state \'S399\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S447\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S495\'");
                    int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedNegotiateResponseChecker)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S559\'");
                        goto label25;
                    }
                    if ((temp38 == 1)) {
                        this.Manager.Comment("reaching state \'S558\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S639\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S687\'");
                        int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker3)));
                        if ((temp37 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S738();
                            goto label24;
                        }
                        if ((temp37 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S738();
                            goto label24;
                        }
                        if ((temp37 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S738();
                            goto label24;
                        }
                        if ((temp37 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S738();
                            goto label24;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker3)));
                    label24:
;
                        goto label25;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedNegotiateResponseChecker)));
                label25:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S111");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S111");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S255");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S255");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S255");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S255");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S255");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S255");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S495");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S495");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S495");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S495");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S495");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S495");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S495");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S495, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S495");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S738() {
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S834\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S930\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1026\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1122\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1218\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1314\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1410\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1506\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1602\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1698\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1794\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S930");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S930");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1218");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1218, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1506");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1506");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S30NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S687");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S112\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S256\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S304\'");
                    bool temp39;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp39);
                    this.Manager.Comment("reaching state \'S352\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp39, "createPipeStatus of CreatePipeAndMailslot, state S352");
                    this.Manager.Comment("reaching state \'S400\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S448\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S496\'");
                    int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedNegotiateResponseChecker)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S561\'");
                        goto label27;
                    }
                    if ((temp41 == 1)) {
                        this.Manager.Comment("reaching state \'S560\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S640\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S688\'");
                        int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker3)));
                        if ((temp40 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S739();
                            goto label26;
                        }
                        if ((temp40 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S739();
                            goto label26;
                        }
                        if ((temp40 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S739();
                            goto label26;
                        }
                        if ((temp40 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S739();
                            goto label26;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker3)));
                    label26:
;
                        goto label27;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedNegotiateResponseChecker)));
                label27:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S112");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S256");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S256");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S256");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S256");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S256");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S256");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S496");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S496");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S496");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S496");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S496");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S496");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S496");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S496, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S496");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S739() {
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S931\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1027\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1123\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1219\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1315\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1411\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1507\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1603\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1699\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1795\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S931");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S931");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1219");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1219, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1219");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1507");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1507");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S32NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S113\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S257\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S305\'");
                    bool temp42;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp42);
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp42, "createPipeStatus of CreatePipeAndMailslot, state S353");
                    this.Manager.Comment("reaching state \'S401\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S449\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S497\'");
                    int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedNegotiateResponseChecker)));
                    if ((temp44 == 0)) {
                        this.Manager.Comment("reaching state \'S563\'");
                        goto label29;
                    }
                    if ((temp44 == 1)) {
                        this.Manager.Comment("reaching state \'S562\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S641\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S689\'");
                        int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker3)));
                        if ((temp43 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S740();
                            goto label28;
                        }
                        if ((temp43 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S740();
                            goto label28;
                        }
                        if ((temp43 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S740();
                            goto label28;
                        }
                        if ((temp43 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S740();
                            goto label28;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker3)));
                    label28:
;
                        goto label29;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedNegotiateResponseChecker)));
                label29:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S257");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S257");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S257");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S257");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S257");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S257");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S497");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S497");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S497");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S497");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S497");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S497");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S497");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S497, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S497");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S689");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S740() {
            this.Manager.Comment("reaching state \'S740\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S836\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S932\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1028\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1124\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1220\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1316\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1412\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1508\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1604\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1700\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1796\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S932");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S932");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1220");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1220, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1508");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1508");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S689");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S689");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S34NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S689");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S114\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S258\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S306\'");
                    bool temp45;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp45);
                    this.Manager.Comment("reaching state \'S354\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp45, "createPipeStatus of CreatePipeAndMailslot, state S354");
                    this.Manager.Comment("reaching state \'S402\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S450\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S498\'");
                    int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedNegotiateResponseChecker)));
                    if ((temp47 == 0)) {
                        this.Manager.Comment("reaching state \'S565\'");
                        goto label31;
                    }
                    if ((temp47 == 1)) {
                        this.Manager.Comment("reaching state \'S564\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S642\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S690\'");
                        int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker3)));
                        if ((temp46 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S741();
                            goto label30;
                        }
                        if ((temp46 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S741();
                            goto label30;
                        }
                        if ((temp46 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S741();
                            goto label30;
                        }
                        if ((temp46 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S741();
                            goto label30;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker3)));
                    label30:
;
                        goto label31;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedNegotiateResponseChecker)));
                label31:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S114");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S114");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S258");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S258");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S258");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S258");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S258");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S258");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S498");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S498");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S498");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S498");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S498");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S498");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S498, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S498");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S741() {
            this.Manager.Comment("reaching state \'S741\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S837\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S933\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1029\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1125\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1221\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1317\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1413\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1509\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1605\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1701\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1797\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S933");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S933");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1221");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1221, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1509");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1509");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S36NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S115\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S259\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S307\'");
                    bool temp48;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp48);
                    this.Manager.Comment("reaching state \'S355\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp48, "createPipeStatus of CreatePipeAndMailslot, state S355");
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S451\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S499\'");
                    int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedNegotiateResponseChecker)));
                    if ((temp50 == 0)) {
                        this.Manager.Comment("reaching state \'S567\'");
                        goto label33;
                    }
                    if ((temp50 == 1)) {
                        this.Manager.Comment("reaching state \'S566\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S643\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S691\'");
                        int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker3)));
                        if ((temp49 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S742();
                            goto label32;
                        }
                        if ((temp49 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S742();
                            goto label32;
                        }
                        if ((temp49 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S742();
                            goto label32;
                        }
                        if ((temp49 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S742();
                            goto label32;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker3)));
                    label32:
;
                        goto label33;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedNegotiateResponseChecker)));
                label33:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S115");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S115");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S259");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S259");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S259");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S259");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S259");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S259");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S499");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S499");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S499");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S499");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S499");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S499, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S499");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S691");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S742() {
            this.Manager.Comment("reaching state \'S742\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S838\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S934\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1030\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1126\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1222\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1318\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1414\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1510\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1606\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1702\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1798\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S934");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S934");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1222");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1222, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1510");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S691");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S691");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S38NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S691");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S691");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S98\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S242\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S290\'");
                    bool temp51;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp51);
                    this.Manager.Comment("reaching state \'S338\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp51, "createPipeStatus of CreatePipeAndMailslot, state S338");
                    this.Manager.Comment("reaching state \'S386\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S434\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S482\'");
                    int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedNegotiateResponseChecker)));
                    if ((temp53 == 0)) {
                        this.Manager.Comment("reaching state \'S533\'");
                        goto label35;
                    }
                    if ((temp53 == 1)) {
                        this.Manager.Comment("reaching state \'S532\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S626\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S674\'");
                        int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker3)));
                        if ((temp52 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S725();
                            goto label34;
                        }
                        if ((temp52 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S725();
                            goto label34;
                        }
                        if ((temp52 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S725();
                            goto label34;
                        }
                        if ((temp52 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S725();
                            goto label34;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker3)));
                    label34:
;
                        goto label35;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedNegotiateResponseChecker)));
                label35:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S98");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S98");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S242");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S242");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S482");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S482");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S482");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S482");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S482");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S482, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S482");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S725() {
            this.Manager.Comment("reaching state \'S725\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S917\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1013\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1109\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1205\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1301\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1397\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1493\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1589\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1685\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1781\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S917");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S917");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1205");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1205, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1493");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1493");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S116\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S260\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S308\'");
                    bool temp54;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp54);
                    this.Manager.Comment("reaching state \'S356\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp54, "createPipeStatus of CreatePipeAndMailslot, state S356");
                    this.Manager.Comment("reaching state \'S404\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S452\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S500\'");
                    int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedNegotiateResponseChecker)));
                    if ((temp56 == 0)) {
                        this.Manager.Comment("reaching state \'S569\'");
                        goto label37;
                    }
                    if ((temp56 == 1)) {
                        this.Manager.Comment("reaching state \'S568\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S644\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S692\'");
                        int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker3)));
                        if ((temp55 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S743();
                            goto label36;
                        }
                        if ((temp55 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S743();
                            goto label36;
                        }
                        if ((temp55 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S743();
                            goto label36;
                        }
                        if ((temp55 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S743();
                            goto label36;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker3)));
                    label36:
;
                        goto label37;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedNegotiateResponseChecker)));
                label37:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S116");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S116");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S260");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S260");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S260");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S260");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S260");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S260");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S500");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S500");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S500");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S500");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S500");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S500");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S500");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S500, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S500");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S743() {
            this.Manager.Comment("reaching state \'S743\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S839\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S935\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1031\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1127\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1223\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1319\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1415\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1511\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1607\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1703\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1799\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S935");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S935");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1223");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1223, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1511");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1511");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S40NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S117\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S261\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S309\'");
                    bool temp57;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp57);
                    this.Manager.Comment("reaching state \'S357\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp57, "createPipeStatus of CreatePipeAndMailslot, state S357");
                    this.Manager.Comment("reaching state \'S405\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S453\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S501\'");
                    int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedNegotiateResponseChecker)));
                    if ((temp59 == 0)) {
                        this.Manager.Comment("reaching state \'S571\'");
                        goto label39;
                    }
                    if ((temp59 == 1)) {
                        this.Manager.Comment("reaching state \'S570\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S645\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S693\'");
                        int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker3)));
                        if ((temp58 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S744();
                            goto label38;
                        }
                        if ((temp58 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S744();
                            goto label38;
                        }
                        if ((temp58 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S744();
                            goto label38;
                        }
                        if ((temp58 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S744();
                            goto label38;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker3)));
                    label38:
;
                        goto label39;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedNegotiateResponseChecker)));
                label39:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S117");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S261");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S261");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S261");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S261");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S261");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S261");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S501");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S501, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S501");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S744() {
            this.Manager.Comment("reaching state \'S744\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S840\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S936\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1032\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1128\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1224\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1320\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1416\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1512\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1608\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1704\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1800\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S936");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S936");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1224");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1224, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S42NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S118\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S262\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S310\'");
                    bool temp60;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp60);
                    this.Manager.Comment("reaching state \'S358\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp60, "createPipeStatus of CreatePipeAndMailslot, state S358");
                    this.Manager.Comment("reaching state \'S406\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S454\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S502\'");
                    int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedNegotiateResponseChecker)));
                    if ((temp62 == 0)) {
                        this.Manager.Comment("reaching state \'S573\'");
                        goto label41;
                    }
                    if ((temp62 == 1)) {
                        this.Manager.Comment("reaching state \'S572\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S646\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S694\'");
                        int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker3)));
                        if ((temp61 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S745();
                            goto label40;
                        }
                        if ((temp61 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S745();
                            goto label40;
                        }
                        if ((temp61 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S745();
                            goto label40;
                        }
                        if ((temp61 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S745();
                            goto label40;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker3)));
                    label40:
;
                        goto label41;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedNegotiateResponseChecker)));
                label41:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S118");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S262");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S262");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S262");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S262");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S262");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S262");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S502");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S502");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S502");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S502");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S502");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S502");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S502");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S502, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S502");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S694");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S745() {
            this.Manager.Comment("reaching state \'S745\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S841\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S937\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1033\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1129\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1225\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1321\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1417\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1513\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1609\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1705\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1801\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S937");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S937");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1225");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1225, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1225");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1513");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1513");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S694");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S694");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S44NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S694");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S694");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S119\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S263\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S311\'");
                    bool temp63;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp63);
                    this.Manager.Comment("reaching state \'S359\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp63, "createPipeStatus of CreatePipeAndMailslot, state S359");
                    this.Manager.Comment("reaching state \'S407\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S455\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S503\'");
                    int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedNegotiateResponseChecker)));
                    if ((temp65 == 0)) {
                        this.Manager.Comment("reaching state \'S575\'");
                        goto label43;
                    }
                    if ((temp65 == 1)) {
                        this.Manager.Comment("reaching state \'S574\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S647\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S695\'");
                        int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker3)));
                        if ((temp64 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S746();
                            goto label42;
                        }
                        if ((temp64 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S746();
                            goto label42;
                        }
                        if ((temp64 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S746();
                            goto label42;
                        }
                        if ((temp64 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S746();
                            goto label42;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker3)));
                    label42:
;
                        goto label43;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedNegotiateResponseChecker)));
                label43:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S263");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S263");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S263");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S263");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S263");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S263");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S503");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S503");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S503");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S503");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S503");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S503, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S503");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S695");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S746() {
            this.Manager.Comment("reaching state \'S746\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S842\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S938\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1034\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1130\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1226\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1322\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1418\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1514\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1610\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1706\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1802\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S938");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S938");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1226");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1226, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1226");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1226");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1514");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1514");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S695");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S695");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S46NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S695");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S695");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S120\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S264\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S312\'");
                    bool temp66;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp66);
                    this.Manager.Comment("reaching state \'S360\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp66, "createPipeStatus of CreatePipeAndMailslot, state S360");
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S456\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S504\'");
                    int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedNegotiateResponseChecker)));
                    if ((temp68 == 0)) {
                        this.Manager.Comment("reaching state \'S577\'");
                        goto label45;
                    }
                    if ((temp68 == 1)) {
                        this.Manager.Comment("reaching state \'S576\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S648\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S696\'");
                        int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker3)));
                        if ((temp67 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S747();
                            goto label44;
                        }
                        if ((temp67 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S747();
                            goto label44;
                        }
                        if ((temp67 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S747();
                            goto label44;
                        }
                        if ((temp67 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S747();
                            goto label44;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker3)));
                    label44:
;
                        goto label45;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedNegotiateResponseChecker)));
                label45:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S120");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S264");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S264");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S264");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S264");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S264");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S264");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S504");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S504");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S504");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S504");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S504");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S504, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S504");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S747() {
            this.Manager.Comment("reaching state \'S747\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S843\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S939\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1035\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1131\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1227\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1323\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1419\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1515\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1611\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1707\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1803\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S939");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S939");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1227");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1227, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1515");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1515");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S48NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S121\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S265\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S313\'");
                    bool temp69;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp69);
                    this.Manager.Comment("reaching state \'S361\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp69, "createPipeStatus of CreatePipeAndMailslot, state S361");
                    this.Manager.Comment("reaching state \'S409\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S457\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S505\'");
                    int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedNegotiateResponseChecker)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S579\'");
                        goto label47;
                    }
                    if ((temp71 == 1)) {
                        this.Manager.Comment("reaching state \'S578\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S649\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S697\'");
                        int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker3)));
                        if ((temp70 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S748();
                            goto label46;
                        }
                        if ((temp70 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S748();
                            goto label46;
                        }
                        if ((temp70 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S748();
                            goto label46;
                        }
                        if ((temp70 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S748();
                            goto label46;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker3)));
                    label46:
;
                        goto label47;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedNegotiateResponseChecker)));
                label47:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S121");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S265");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S265");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S265");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S265");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S265");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S265");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S505");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S505");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S505");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S505");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S505");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S505");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S505");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S505, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S505");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S748() {
            this.Manager.Comment("reaching state \'S748\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S844\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S940\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1036\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1132\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1228\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1324\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1420\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1516\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1612\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1708\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1804\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S940");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S940");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1228");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1228, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1516");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1516");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S50NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S122\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S266\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S314\'");
                    bool temp72;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp72);
                    this.Manager.Comment("reaching state \'S362\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp72, "createPipeStatus of CreatePipeAndMailslot, state S362");
                    this.Manager.Comment("reaching state \'S410\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S458\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S506\'");
                    int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedNegotiateResponseChecker)));
                    if ((temp74 == 0)) {
                        this.Manager.Comment("reaching state \'S581\'");
                        goto label49;
                    }
                    if ((temp74 == 1)) {
                        this.Manager.Comment("reaching state \'S580\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S650\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S698\'");
                        int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker3)));
                        if ((temp73 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S749();
                            goto label48;
                        }
                        if ((temp73 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S749();
                            goto label48;
                        }
                        if ((temp73 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S749();
                            goto label48;
                        }
                        if ((temp73 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S749();
                            goto label48;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker3)));
                    label48:
;
                        goto label49;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedNegotiateResponseChecker)));
                label49:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S122");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S266");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S266");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S266");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S266");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S266");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S266");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S506");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S506");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S506");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S506");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S506");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S506");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S506");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S506, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S506");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S698");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S749() {
            this.Manager.Comment("reaching state \'S749\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S845\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S941\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1037\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1133\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1229\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1325\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1421\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1517\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1613\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1709\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1805\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S941");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S941");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1229");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1229, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1517");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1517");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S698");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S698");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S52NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S698");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S123\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S267\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S315\'");
                    bool temp75;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp75);
                    this.Manager.Comment("reaching state \'S363\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp75, "createPipeStatus of CreatePipeAndMailslot, state S363");
                    this.Manager.Comment("reaching state \'S411\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S459\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S507\'");
                    int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedNegotiateResponseChecker)));
                    if ((temp77 == 0)) {
                        this.Manager.Comment("reaching state \'S583\'");
                        goto label51;
                    }
                    if ((temp77 == 1)) {
                        this.Manager.Comment("reaching state \'S582\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S651\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S699\'");
                        int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker3)));
                        if ((temp76 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S750();
                            goto label50;
                        }
                        if ((temp76 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S750();
                            goto label50;
                        }
                        if ((temp76 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S750();
                            goto label50;
                        }
                        if ((temp76 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S750();
                            goto label50;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker3)));
                    label50:
;
                        goto label51;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedNegotiateResponseChecker)));
                label51:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S123");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S123");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S267");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S267");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S267");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S267");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S267");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S267");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S507");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S507");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S507");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S507");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S507");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S507");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S507");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S507, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S507");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S750() {
            this.Manager.Comment("reaching state \'S750\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S846\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S942\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1038\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1134\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1230\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1326\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1422\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1518\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1614\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1710\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1806\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S942");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S942");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1230");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1230, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1518");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1518");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S54NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S124\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S268\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S316\'");
                    bool temp78;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp78);
                    this.Manager.Comment("reaching state \'S364\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp78, "createPipeStatus of CreatePipeAndMailslot, state S364");
                    this.Manager.Comment("reaching state \'S412\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S460\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S508\'");
                    int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedNegotiateResponseChecker)));
                    if ((temp80 == 0)) {
                        this.Manager.Comment("reaching state \'S585\'");
                        goto label53;
                    }
                    if ((temp80 == 1)) {
                        this.Manager.Comment("reaching state \'S584\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S652\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S700\'");
                        int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker3)));
                        if ((temp79 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S751();
                            goto label52;
                        }
                        if ((temp79 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S751();
                            goto label52;
                        }
                        if ((temp79 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S751();
                            goto label52;
                        }
                        if ((temp79 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S751();
                            goto label52;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker3)));
                    label52:
;
                        goto label53;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedNegotiateResponseChecker)));
                label53:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S124");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S124");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S268");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S268");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S268");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S268");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S268");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S268");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S508");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S508");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S508");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S508");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S508");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S508");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S508");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S508, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S508");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S751() {
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S847\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S943\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1039\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1135\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1231\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1327\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1423\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1519\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1615\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1711\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1807\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S943");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S943");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1231");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1231, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S56NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S125\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S269\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S317\'");
                    bool temp81;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp81);
                    this.Manager.Comment("reaching state \'S365\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp81, "createPipeStatus of CreatePipeAndMailslot, state S365");
                    this.Manager.Comment("reaching state \'S413\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S461\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S509\'");
                    int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedNegotiateResponseChecker)));
                    if ((temp83 == 0)) {
                        this.Manager.Comment("reaching state \'S587\'");
                        goto label55;
                    }
                    if ((temp83 == 1)) {
                        this.Manager.Comment("reaching state \'S586\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S653\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S701\'");
                        int temp82 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker3)));
                        if ((temp82 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S752();
                            goto label54;
                        }
                        if ((temp82 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S752();
                            goto label54;
                        }
                        if ((temp82 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S752();
                            goto label54;
                        }
                        if ((temp82 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S752();
                            goto label54;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker3)));
                    label54:
;
                        goto label55;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedNegotiateResponseChecker)));
                label55:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S125");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S125");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S269");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S269");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S269");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S269");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S269");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S269");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S509");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S509");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S509");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S509");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S509");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S509");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S509");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S509, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S509");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S752() {
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S848\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S944\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1040\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1136\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1232\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1328\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1424\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1520\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1616\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1712\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1808\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S944");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S944");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1232");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1232, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1520");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S58NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S701");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S99\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S147\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S243\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S291\'");
                    bool temp84;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp84);
                    this.Manager.Comment("reaching state \'S339\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp84, "createPipeStatus of CreatePipeAndMailslot, state S339");
                    this.Manager.Comment("reaching state \'S387\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S435\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S483\'");
                    int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedNegotiateResponseChecker)));
                    if ((temp86 == 0)) {
                        this.Manager.Comment("reaching state \'S535\'");
                        goto label57;
                    }
                    if ((temp86 == 1)) {
                        this.Manager.Comment("reaching state \'S534\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S627\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S675\'");
                        int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker3)));
                        if ((temp85 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S726();
                            goto label56;
                        }
                        if ((temp85 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S726();
                            goto label56;
                        }
                        if ((temp85 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S726();
                            goto label56;
                        }
                        if ((temp85 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S726();
                            goto label56;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker3)));
                    label56:
;
                        goto label57;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedNegotiateResponseChecker)));
                label57:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S99");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S99");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S243");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S243");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S483");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S483");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S483");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S483");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S483");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S483");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S483");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S483, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S483");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S675");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S726() {
            this.Manager.Comment("reaching state \'S726\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S822\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S918\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1014\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1110\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1206\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1302\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                            ")\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                    this.Manager.Comment("reaching state \'S1398\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1494\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1590\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1686\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1782\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S918");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S918");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1206");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1206, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1494");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1494");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S675");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S675");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S675");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S126\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S270\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S318\'");
                    bool temp87;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp87);
                    this.Manager.Comment("reaching state \'S366\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp87, "createPipeStatus of CreatePipeAndMailslot, state S366");
                    this.Manager.Comment("reaching state \'S414\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S462\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S510\'");
                    int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedNegotiateResponseChecker)));
                    if ((temp89 == 0)) {
                        this.Manager.Comment("reaching state \'S589\'");
                        goto label59;
                    }
                    if ((temp89 == 1)) {
                        this.Manager.Comment("reaching state \'S588\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S654\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S702\'");
                        int temp88 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker3)));
                        if ((temp88 == 0)) {
                            this.Manager.Comment("reaching state \'S753\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S849\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S945\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1041\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1137\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1233\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1329\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1425\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1521\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1617\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1713\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1809\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker)));
                            }
                            goto label58;
                        }
                        if ((temp88 == 1)) {
                            this.Manager.Comment("reaching state \'S754\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S850\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S946\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1042\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1138\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1234\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1330\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1426\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1522\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1618\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1714\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1810\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker1)));
                            }
                            goto label58;
                        }
                        if ((temp88 == 2)) {
                            this.Manager.Comment("reaching state \'S755\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S851\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S947\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1043\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1139\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1235\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1331\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1427\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1523\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1619\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1715\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1811\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker2)));
                            }
                            goto label58;
                        }
                        if ((temp88 == 3)) {
                            this.Manager.Comment("reaching state \'S756\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S852\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S948\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1044\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1140\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1236\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1332\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1428\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1524\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1620\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1716\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1812\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker3)));
                            }
                            goto label58;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker3)));
                    label58:
;
                        goto label59;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedNegotiateResponseChecker)));
                label59:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S126");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S126");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S270");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S270");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S270");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S270");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S270");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S270");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S510");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S510");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S510");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S510");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S510");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S510");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S510, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S510");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S945");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S945");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1233");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1233, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1521");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S946");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S946");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1234");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1234, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1522");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1522");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S947");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S947");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1235");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1235, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1235");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1523");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1523");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S948");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S948");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1236");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1236, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S60ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1524");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1524");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S127\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S271\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S319\'");
                    bool temp90;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp90);
                    this.Manager.Comment("reaching state \'S367\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp90, "createPipeStatus of CreatePipeAndMailslot, state S367");
                    this.Manager.Comment("reaching state \'S415\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S463\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S511\'");
                    int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedNegotiateResponseChecker)));
                    if ((temp92 == 0)) {
                        this.Manager.Comment("reaching state \'S591\'");
                        goto label61;
                    }
                    if ((temp92 == 1)) {
                        this.Manager.Comment("reaching state \'S590\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S655\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S703\'");
                        int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker3)));
                        if ((temp91 == 0)) {
                            this.Manager.Comment("reaching state \'S757\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S853\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S949\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1045\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1141\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1237\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1333\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1429\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1525\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1621\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1717\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1813\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker)));
                            }
                            goto label60;
                        }
                        if ((temp91 == 1)) {
                            this.Manager.Comment("reaching state \'S758\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S854\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S950\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1046\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1142\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1238\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1334\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1430\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1526\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1622\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1718\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1814\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker1)));
                            }
                            goto label60;
                        }
                        if ((temp91 == 2)) {
                            this.Manager.Comment("reaching state \'S759\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S855\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S951\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1047\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1143\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1239\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1335\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1431\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1527\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1623\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1719\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1815\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker2)));
                            }
                            goto label60;
                        }
                        if ((temp91 == 3)) {
                            this.Manager.Comment("reaching state \'S760\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S856\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S952\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1048\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1144\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1240\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1336\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1432\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1528\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1624\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1720\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1816\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker3)));
                            }
                            goto label60;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker3)));
                    label60:
;
                        goto label61;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedNegotiateResponseChecker)));
                label61:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S127");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S127");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S271");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S271");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S271");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S271");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S271");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S271");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S511");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S511");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S511");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S511");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S511");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S511");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S511");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S511, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S511");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S949");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S949");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1237");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1237, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1525");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1525");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S950");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S950");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1238");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1238, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1526");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1526");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S951");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S951");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1239");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1239, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1527");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S703");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S952");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S952");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1240");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1240, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S62ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1528");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1528");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S128\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S272\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S320\'");
                    bool temp93;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp93);
                    this.Manager.Comment("reaching state \'S368\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp93, "createPipeStatus of CreatePipeAndMailslot, state S368");
                    this.Manager.Comment("reaching state \'S416\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S464\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S512\'");
                    int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedNegotiateResponseChecker)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S593\'");
                        goto label63;
                    }
                    if ((temp95 == 1)) {
                        this.Manager.Comment("reaching state \'S592\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S656\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S704\'");
                        int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker3)));
                        if ((temp94 == 0)) {
                            this.Manager.Comment("reaching state \'S761\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S857\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S953\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1049\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1145\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1241\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1337\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1433\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1529\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1625\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1721\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1817\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker)));
                            }
                            goto label62;
                        }
                        if ((temp94 == 1)) {
                            this.Manager.Comment("reaching state \'S762\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S858\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S954\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1050\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1146\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1242\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1338\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1434\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1530\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1626\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1722\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1818\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker1)));
                            }
                            goto label62;
                        }
                        if ((temp94 == 2)) {
                            this.Manager.Comment("reaching state \'S763\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S859\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S955\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1051\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1147\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1243\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1339\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1435\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1531\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1627\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1723\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1819\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker2)));
                            }
                            goto label62;
                        }
                        if ((temp94 == 3)) {
                            this.Manager.Comment("reaching state \'S764\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S860\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S956\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1052\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1148\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1244\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1340\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1436\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1532\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1628\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1724\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1820\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker3)));
                            }
                            goto label62;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker3)));
                    label62:
;
                        goto label63;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedNegotiateResponseChecker)));
                label63:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S128");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S128");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S272");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S272");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S272");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S272");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S272");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S272");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S512");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S512");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S512");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S512");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S512");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S512, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S512");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S953");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S953");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1241");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1241, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1529");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1529");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S954");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S954");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1242");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1242, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1530");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1530");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S955");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S955");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1243");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1243, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1243");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1531");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1531");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S956");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S956");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1244");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1244, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S64ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1532");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S129\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S273\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S321\'");
                    bool temp96;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp96);
                    this.Manager.Comment("reaching state \'S369\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp96, "createPipeStatus of CreatePipeAndMailslot, state S369");
                    this.Manager.Comment("reaching state \'S417\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S465\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S513\'");
                    int temp98 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedNegotiateResponseChecker)));
                    if ((temp98 == 0)) {
                        this.Manager.Comment("reaching state \'S595\'");
                        goto label65;
                    }
                    if ((temp98 == 1)) {
                        this.Manager.Comment("reaching state \'S594\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S657\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S705\'");
                        int temp97 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker3)));
                        if ((temp97 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S765();
                            goto label64;
                        }
                        if ((temp97 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S765();
                            goto label64;
                        }
                        if ((temp97 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S765();
                            goto label64;
                        }
                        if ((temp97 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S765();
                            goto label64;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker3)));
                    label64:
;
                        goto label65;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedNegotiateResponseChecker)));
                label65:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S129");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S129");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S273");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S273");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S273");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S273");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S273");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S273");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S513");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S513");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S513");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S513");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S513");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S513");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S513");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S513, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S513");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S705");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S765() {
            this.Manager.Comment("reaching state \'S765\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S861\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S957\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1053\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1149\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1245\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1341\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1437\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1533\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1629\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1725\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1821\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S957");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S957");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1245");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1245, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1533");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1533");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S705");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S705");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S66NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S705");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S705");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S130\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S274\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S322\'");
                    bool temp99;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp99);
                    this.Manager.Comment("reaching state \'S370\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp99, "createPipeStatus of CreatePipeAndMailslot, state S370");
                    this.Manager.Comment("reaching state \'S418\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S466\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S514\'");
                    int temp101 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedNegotiateResponseChecker)));
                    if ((temp101 == 0)) {
                        this.Manager.Comment("reaching state \'S597\'");
                        goto label67;
                    }
                    if ((temp101 == 1)) {
                        this.Manager.Comment("reaching state \'S596\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S658\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S706\'");
                        int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker3)));
                        if ((temp100 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S766();
                            goto label66;
                        }
                        if ((temp100 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S766();
                            goto label66;
                        }
                        if ((temp100 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S766();
                            goto label66;
                        }
                        if ((temp100 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S766();
                            goto label66;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker3)));
                    label66:
;
                        goto label67;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedNegotiateResponseChecker)));
                label67:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S130");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S130");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S274");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S274");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S274");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S274");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S274");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S274");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S514");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S514");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S514");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S514");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S514");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S514");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S514");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S514, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S514");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S706");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S766() {
            this.Manager.Comment("reaching state \'S766\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S862\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S958\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1054\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1150\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1246\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1342\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                            "1)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                    this.Manager.Comment("reaching state \'S1438\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1534\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1630\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1726\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1822\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S958");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S958");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1246");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1246, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1246");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1534");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1534");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S706");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S706");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S68NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S706");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S131\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S275\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S323\'");
                    bool temp102;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp102);
                    this.Manager.Comment("reaching state \'S371\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp102, "createPipeStatus of CreatePipeAndMailslot, state S371");
                    this.Manager.Comment("reaching state \'S419\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S467\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S515\'");
                    int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedNegotiateResponseChecker)));
                    if ((temp104 == 0)) {
                        this.Manager.Comment("reaching state \'S599\'");
                        goto label69;
                    }
                    if ((temp104 == 1)) {
                        this.Manager.Comment("reaching state \'S598\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S659\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S707\'");
                        int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker3)));
                        if ((temp103 == 0)) {
                            this.Manager.Comment("reaching state \'S767\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S863\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S959\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1055\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1151\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1247\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1343\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1439\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1535\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1631\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1727\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1823\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker)));
                            }
                            goto label68;
                        }
                        if ((temp103 == 1)) {
                            this.Manager.Comment("reaching state \'S768\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S864\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S960\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1056\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1152\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1248\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1344\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1440\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1536\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1632\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1728\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1824\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker1)));
                            }
                            goto label68;
                        }
                        if ((temp103 == 2)) {
                            this.Manager.Comment("reaching state \'S769\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S865\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S961\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1057\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1153\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1249\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1345\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1441\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1537\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1633\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1729\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1825\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker2)));
                            }
                            goto label68;
                        }
                        if ((temp103 == 3)) {
                            this.Manager.Comment("reaching state \'S770\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S866\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S962\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1058\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1154\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1250\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1346\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1442\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1538\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1634\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1730\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1826\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker3)));
                            }
                            goto label68;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker3)));
                    label68:
;
                        goto label69;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedNegotiateResponseChecker)));
                label69:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S131");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S131");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S275");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S275");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S275");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S275");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S275");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S275");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S515");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S515");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S515");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S515");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S515");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S515");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S515");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S515, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S515");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S959");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S959");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1247");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1247, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1535");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1535");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S960");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S960");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1248");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1248, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1536");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S961");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S961");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1249");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1249, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1537");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1537");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S962");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S962");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1250");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1250, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S70ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1538");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1538");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S132\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S276\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S324\'");
                    bool temp105;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp105);
                    this.Manager.Comment("reaching state \'S372\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp105, "createPipeStatus of CreatePipeAndMailslot, state S372");
                    this.Manager.Comment("reaching state \'S420\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S468\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S516\'");
                    int temp107 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedNegotiateResponseChecker)));
                    if ((temp107 == 0)) {
                        this.Manager.Comment("reaching state \'S601\'");
                        goto label71;
                    }
                    if ((temp107 == 1)) {
                        this.Manager.Comment("reaching state \'S600\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S660\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S708\'");
                        int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker3)));
                        if ((temp106 == 0)) {
                            this.Manager.Comment("reaching state \'S771\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S867\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S963\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1059\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1155\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1251\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1347\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1443\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1539\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1635\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1731\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1827\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker)));
                            }
                            goto label70;
                        }
                        if ((temp106 == 1)) {
                            this.Manager.Comment("reaching state \'S772\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S868\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S964\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1060\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1156\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1252\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1348\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1444\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1540\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1636\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1732\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1828\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker1)));
                            }
                            goto label70;
                        }
                        if ((temp106 == 2)) {
                            this.Manager.Comment("reaching state \'S773\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S869\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S965\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1061\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1157\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1253\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1349\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1445\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1541\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1637\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1733\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1829\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker2)));
                            }
                            goto label70;
                        }
                        if ((temp106 == 3)) {
                            this.Manager.Comment("reaching state \'S774\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S870\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S966\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1062\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1158\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1254\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1350\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1446\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1542\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1638\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1734\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1830\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker3)));
                            }
                            goto label70;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker3)));
                    label70:
;
                        goto label71;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedNegotiateResponseChecker)));
                label71:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S132");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S132");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S276");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S276");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S276");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S276");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S276");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S276");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S516");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S516");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S516");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S516");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S516");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S516");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S516");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S516, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S516");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S708");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S963");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S963");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1251");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1251, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1539");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1539");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S708");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S964");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S964");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1252");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1252, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1540");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1540");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S708");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S965");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S965");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1253");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1253, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1541");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1541");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S708");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S966");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S966");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1254");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1254, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S72ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1542");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1542");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S133\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S277\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S325\'");
                    bool temp108;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp108);
                    this.Manager.Comment("reaching state \'S373\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp108, "createPipeStatus of CreatePipeAndMailslot, state S373");
                    this.Manager.Comment("reaching state \'S421\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S469\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S517\'");
                    int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedNegotiateResponseChecker)));
                    if ((temp110 == 0)) {
                        this.Manager.Comment("reaching state \'S603\'");
                        goto label73;
                    }
                    if ((temp110 == 1)) {
                        this.Manager.Comment("reaching state \'S602\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S661\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S709\'");
                        int temp109 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker3)));
                        if ((temp109 == 0)) {
                            this.Manager.Comment("reaching state \'S775\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S871\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S967\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1063\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1159\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1255\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1351\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1447\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1543\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1639\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1735\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1831\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker)));
                            }
                            goto label72;
                        }
                        if ((temp109 == 1)) {
                            this.Manager.Comment("reaching state \'S776\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S872\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S968\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1064\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1160\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1256\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1352\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1448\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1544\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1640\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1736\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1832\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker1)));
                            }
                            goto label72;
                        }
                        if ((temp109 == 2)) {
                            this.Manager.Comment("reaching state \'S777\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S873\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S969\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1065\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1161\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1257\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1353\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1449\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1545\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1641\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1737\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1833\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker2)));
                            }
                            goto label72;
                        }
                        if ((temp109 == 3)) {
                            this.Manager.Comment("reaching state \'S778\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S874\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S970\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1066\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1162\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1258\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1354\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1450\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1546\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1642\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1738\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1834\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker3)));
                            }
                            goto label72;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker3)));
                    label72:
;
                        goto label73;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedNegotiateResponseChecker)));
                label73:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S133");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S133");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S277");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S277");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S277");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S277");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S277");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S277");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S517");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S517");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S517");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S517");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S517");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S517");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S517");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S517, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S517");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S967");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S967");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1255");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1255, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1543");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S968");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S968");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1256");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1256, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1544");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1544");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S969");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S969");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1257");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1257, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1545");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1545");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S709");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S970");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S970");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1258");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1258, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S74ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1546");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1546");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S134\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S278\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S326\'");
                    bool temp111;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp111);
                    this.Manager.Comment("reaching state \'S374\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp111, "createPipeStatus of CreatePipeAndMailslot, state S374");
                    this.Manager.Comment("reaching state \'S422\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S470\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S518\'");
                    int temp113 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedNegotiateResponseChecker)));
                    if ((temp113 == 0)) {
                        this.Manager.Comment("reaching state \'S605\'");
                        goto label75;
                    }
                    if ((temp113 == 1)) {
                        this.Manager.Comment("reaching state \'S604\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S662\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S710\'");
                        int temp112 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker3)));
                        if ((temp112 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S779();
                            goto label74;
                        }
                        if ((temp112 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S779();
                            goto label74;
                        }
                        if ((temp112 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S779();
                            goto label74;
                        }
                        if ((temp112 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S779();
                            goto label74;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker3)));
                    label74:
;
                        goto label75;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedNegotiateResponseChecker)));
                label75:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S134");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S134");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S278");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S278");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S278");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S278");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S278");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S278");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S518");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S518");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S518");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S518");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S518");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S518");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S518");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S518, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S518");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S779() {
            this.Manager.Comment("reaching state \'S779\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S875\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S971\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1067\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S1163\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1259\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1355\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1451\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1547\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1643\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1739\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1835\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S971");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S971");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1259");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1259, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1547");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S76NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S135\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S279\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S327\'");
                    bool temp114;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp114);
                    this.Manager.Comment("reaching state \'S375\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp114, "createPipeStatus of CreatePipeAndMailslot, state S375");
                    this.Manager.Comment("reaching state \'S423\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S471\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S519\'");
                    int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedNegotiateResponseChecker)));
                    if ((temp116 == 0)) {
                        this.Manager.Comment("reaching state \'S607\'");
                        goto label77;
                    }
                    if ((temp116 == 1)) {
                        this.Manager.Comment("reaching state \'S606\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S663\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S711\'");
                        int temp115 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker3)));
                        if ((temp115 == 0)) {
                            this.Manager.Comment("reaching state \'S780\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S876\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S972\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1068\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1164\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1260\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1356\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1452\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1548\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1644\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1740\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1836\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker)));
                            }
                            goto label76;
                        }
                        if ((temp115 == 1)) {
                            this.Manager.Comment("reaching state \'S781\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S877\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S973\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1069\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1165\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1261\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1357\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1453\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1549\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1645\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1741\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1837\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker1)));
                            }
                            goto label76;
                        }
                        if ((temp115 == 2)) {
                            this.Manager.Comment("reaching state \'S782\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S878\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S974\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1070\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1166\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1262\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1358\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1454\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1550\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1646\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1742\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1838\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker2)));
                            }
                            goto label76;
                        }
                        if ((temp115 == 3)) {
                            this.Manager.Comment("reaching state \'S783\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S879\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S975\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1071\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1167\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1263\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1359\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1455\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1551\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1647\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1743\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1839\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker3)));
                            }
                            goto label76;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker3)));
                    label76:
;
                        goto label77;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedNegotiateResponseChecker)));
                label77:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S135");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S135");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S279");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S279");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S279");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S279");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S279");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S279");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S519");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S519");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S519");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S519");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S519");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S519, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S519");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S711");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S972");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S972");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1260");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1260, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1548");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1548");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S711");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S973");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S973");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1261");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1261, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1549");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1549");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S711");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S974");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S974");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1262");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1262, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S711");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S711");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S975");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S975");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1263");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1263, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1263");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S78ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1551");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1551");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S100\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, true);
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S244\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S292\'");
                    bool temp117;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp117);
                    this.Manager.Comment("reaching state \'S340\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp117, "createPipeStatus of CreatePipeAndMailslot, state S340");
                    this.Manager.Comment("reaching state \'S388\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S436\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S484\'");
                    int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedNegotiateResponseChecker)));
                    if ((temp119 == 0)) {
                        this.Manager.Comment("reaching state \'S537\'");
                        goto label79;
                    }
                    if ((temp119 == 1)) {
                        this.Manager.Comment("reaching state \'S536\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S628\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S676\'");
                        int temp118 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker3)));
                        if ((temp118 == 0)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S727();
                            goto label78;
                        }
                        if ((temp118 == 1)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S727();
                            goto label78;
                        }
                        if ((temp118 == 2)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S727();
                            goto label78;
                        }
                        if ((temp118 == 3)) {
                            NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S727();
                            goto label78;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker3)));
                    label78:
;
                        goto label79;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedNegotiateResponseChecker)));
                label79:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S100");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S100");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S244");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S244");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S484");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S484");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S484");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S484");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S484");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S484");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S484");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S484, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S484");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S727() {
            this.Manager.Comment("reaching state \'S727\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S823\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S919\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1015\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S1111\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1207\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1303\'");
                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                            "2)\'");
                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                    this.Manager.Comment("reaching state \'S1399\'");
                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                    this.Manager.Comment("reaching state \'S1495\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S1591\'");
                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                        this.ISmbAdapterInstance.SessionClose(1);
                        this.Manager.Checkpoint("MS-SMB_R2299");
                        this.Manager.Comment("reaching state \'S1687\'");
                        this.Manager.Comment("checking step \'return SessionClose\'");
                        this.Manager.Comment("reaching state \'S1783\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker1)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S919");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S919");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1207");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1207, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1495");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1495");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S676");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S136\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S280\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S328\'");
                    bool temp120;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp120);
                    this.Manager.Comment("reaching state \'S376\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp120, "createPipeStatus of CreatePipeAndMailslot, state S376");
                    this.Manager.Comment("reaching state \'S424\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S472\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S520\'");
                    int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedNegotiateResponseChecker)));
                    if ((temp122 == 0)) {
                        this.Manager.Comment("reaching state \'S609\'");
                        goto label81;
                    }
                    if ((temp122 == 1)) {
                        this.Manager.Comment("reaching state \'S608\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S664\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S712\'");
                        int temp121 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker3)));
                        if ((temp121 == 0)) {
                            this.Manager.Comment("reaching state \'S784\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S880\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S976\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1072\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1168\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1264\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1360\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1456\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1552\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1648\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1744\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1840\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker)));
                            }
                            goto label80;
                        }
                        if ((temp121 == 1)) {
                            this.Manager.Comment("reaching state \'S785\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S881\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S977\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1073\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1169\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1265\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1361\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1457\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1553\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1649\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1745\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1841\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker1)));
                            }
                            goto label80;
                        }
                        if ((temp121 == 2)) {
                            this.Manager.Comment("reaching state \'S786\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S882\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S978\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1074\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1170\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1266\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1362\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1458\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1554\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1650\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1746\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1842\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker2)));
                            }
                            goto label80;
                        }
                        if ((temp121 == 3)) {
                            this.Manager.Comment("reaching state \'S787\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S883\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S979\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1075\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1171\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1267\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1363\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1459\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1555\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1651\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1747\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1843\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker3)));
                            }
                            goto label80;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker3)));
                    label80:
;
                        goto label81;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedNegotiateResponseChecker)));
                label81:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S136");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S280");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S280");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S280");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S280");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S280");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S280");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S520");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S520");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S520");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S520");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S520");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S520");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S520, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S520");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S712");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S976");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S976");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1264");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1264, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1552");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S712");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S977");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S977");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1265");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1265, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1265");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S712");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S978");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S978");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1266");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1266, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1266");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S712");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S712");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S979");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S979");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1267");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1267, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S80ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1555");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1555");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S137\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S281\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S329\'");
                    bool temp123;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp123);
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp123, "createPipeStatus of CreatePipeAndMailslot, state S377");
                    this.Manager.Comment("reaching state \'S425\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S473\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S521\'");
                    int temp125 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedNegotiateResponseChecker)));
                    if ((temp125 == 0)) {
                        this.Manager.Comment("reaching state \'S611\'");
                        goto label83;
                    }
                    if ((temp125 == 1)) {
                        this.Manager.Comment("reaching state \'S610\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S665\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S713\'");
                        int temp124 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker3)));
                        if ((temp124 == 0)) {
                            this.Manager.Comment("reaching state \'S788\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S884\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S980\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1076\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1172\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1268\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1364\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1460\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1556\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1652\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1748\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1844\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker)));
                            }
                            goto label82;
                        }
                        if ((temp124 == 1)) {
                            this.Manager.Comment("reaching state \'S789\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S885\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S981\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1077\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1173\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1269\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1365\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1461\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1557\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1653\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1749\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1845\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker1)));
                            }
                            goto label82;
                        }
                        if ((temp124 == 2)) {
                            this.Manager.Comment("reaching state \'S790\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S886\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S982\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1078\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1174\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1270\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1366\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1462\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1558\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1654\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1750\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1846\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker2)));
                            }
                            goto label82;
                        }
                        if ((temp124 == 3)) {
                            this.Manager.Comment("reaching state \'S791\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S887\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S983\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1079\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1175\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1271\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1367\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1463\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1559\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1655\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1751\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1847\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker3)));
                            }
                            goto label82;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker3)));
                    label82:
;
                        goto label83;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedNegotiateResponseChecker)));
                label83:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S137");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S281");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S281");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S281");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S281");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S281");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S281");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S521");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S521");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S521");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S521");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S521");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S521");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S521, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S521");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S980");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S980");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1268");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1268, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1556");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1556");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S981");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S981");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1269");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1269, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S982");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S982");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1270");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1270, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1558");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1558");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S983");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S983");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1271");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1271, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1271");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S82ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1559");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S138\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S282\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S330\'");
                    bool temp126;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp126);
                    this.Manager.Comment("reaching state \'S378\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp126, "createPipeStatus of CreatePipeAndMailslot, state S378");
                    this.Manager.Comment("reaching state \'S426\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S474\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S522\'");
                    int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedNegotiateResponseChecker)));
                    if ((temp128 == 0)) {
                        this.Manager.Comment("reaching state \'S613\'");
                        goto label85;
                    }
                    if ((temp128 == 1)) {
                        this.Manager.Comment("reaching state \'S612\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S666\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S714\'");
                        int temp127 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker3)));
                        if ((temp127 == 0)) {
                            this.Manager.Comment("reaching state \'S792\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S888\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S984\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1080\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1176\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1272\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1368\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1464\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1560\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1656\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1752\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1848\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker)));
                            }
                            goto label84;
                        }
                        if ((temp127 == 1)) {
                            this.Manager.Comment("reaching state \'S793\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S889\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S985\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1081\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1177\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1273\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1369\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1465\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1561\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1657\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1753\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1849\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker1)));
                            }
                            goto label84;
                        }
                        if ((temp127 == 2)) {
                            this.Manager.Comment("reaching state \'S794\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S890\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S986\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1082\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1178\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1274\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1370\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1466\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1562\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1658\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1754\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1850\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker2)));
                            }
                            goto label84;
                        }
                        if ((temp127 == 3)) {
                            this.Manager.Comment("reaching state \'S795\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S891\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S987\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1083\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1179\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1275\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1371\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1467\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1563\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1659\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1755\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1851\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker3)));
                            }
                            goto label84;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker3)));
                    label84:
;
                        goto label85;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedNegotiateResponseChecker)));
                label85:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S138");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S282");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S282");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S282");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S282");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S282");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S282");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S522");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S522");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S522");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S522");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S522");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S522");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S522");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S522, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S522");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S714");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S984");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S984");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1272");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1272, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S714");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S985");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S985");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1273");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1273, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1273");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1273");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1561");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1561");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S714");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S986");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S986");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1274");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1274, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1562");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1562");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S714");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S714");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S987");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S987");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1275");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1275, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1275");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S84ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S139\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S283\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S331\'");
                    bool temp129;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp129);
                    this.Manager.Comment("reaching state \'S379\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp129, "createPipeStatus of CreatePipeAndMailslot, state S379");
                    this.Manager.Comment("reaching state \'S427\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S475\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S523\'");
                    int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedNegotiateResponseChecker)));
                    if ((temp131 == 0)) {
                        this.Manager.Comment("reaching state \'S615\'");
                        goto label87;
                    }
                    if ((temp131 == 1)) {
                        this.Manager.Comment("reaching state \'S614\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S667\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S715\'");
                        int temp130 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker3)));
                        if ((temp130 == 0)) {
                            this.Manager.Comment("reaching state \'S796\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S892\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S988\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1084\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1180\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1276\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1372\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1468\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1564\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1660\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1756\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1852\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker)));
                            }
                            goto label86;
                        }
                        if ((temp130 == 1)) {
                            this.Manager.Comment("reaching state \'S797\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S893\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S989\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1085\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1181\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1277\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1373\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1469\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1565\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1661\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1757\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1853\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker1)));
                            }
                            goto label86;
                        }
                        if ((temp130 == 2)) {
                            this.Manager.Comment("reaching state \'S798\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S894\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S990\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1086\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1182\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1278\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1374\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1470\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1566\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1662\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1758\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1854\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker2)));
                            }
                            goto label86;
                        }
                        if ((temp130 == 3)) {
                            this.Manager.Comment("reaching state \'S799\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S895\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S991\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1087\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1183\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1279\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1375\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1471\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1567\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1663\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1759\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1855\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker3)));
                            }
                            goto label86;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker3)));
                    label86:
;
                        goto label87;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedNegotiateResponseChecker)));
                label87:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S139");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S283");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S283");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S283");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S283");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S283");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S283");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S523");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S523");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S523");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S523");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S523");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S523");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S523");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S523, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S523");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S715");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S988");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S988");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1276");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1276, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1564");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1564");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S715");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S989");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S989");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1277");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1277, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1565");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S715");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S990");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S990");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1278");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1278, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1278");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S715");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S715");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S991");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S991");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1279");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1279, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1279");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1279");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S86ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1567");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1567");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S140\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S284\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S332\'");
                    bool temp132;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp132);
                    this.Manager.Comment("reaching state \'S380\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp132, "createPipeStatus of CreatePipeAndMailslot, state S380");
                    this.Manager.Comment("reaching state \'S428\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S476\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S524\'");
                    int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedNegotiateResponseChecker)));
                    if ((temp134 == 0)) {
                        this.Manager.Comment("reaching state \'S617\'");
                        goto label89;
                    }
                    if ((temp134 == 1)) {
                        this.Manager.Comment("reaching state \'S616\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S668\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S716\'");
                        int temp133 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker3)));
                        if ((temp133 == 0)) {
                            this.Manager.Comment("reaching state \'S800\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S896\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S992\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1088\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1184\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1280\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1376\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1472\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1568\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1664\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1760\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1856\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker)));
                            }
                            goto label88;
                        }
                        if ((temp133 == 1)) {
                            this.Manager.Comment("reaching state \'S801\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S897\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S993\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1089\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1185\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1281\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1377\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1473\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1569\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1665\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1761\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1857\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker1)));
                            }
                            goto label88;
                        }
                        if ((temp133 == 2)) {
                            this.Manager.Comment("reaching state \'S802\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S898\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S994\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1090\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1186\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1282\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1378\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1474\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1570\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1666\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1762\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1858\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker2)));
                            }
                            goto label88;
                        }
                        if ((temp133 == 3)) {
                            this.Manager.Comment("reaching state \'S803\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S899\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S995\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1091\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1187\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1283\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1379\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1475\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1571\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1667\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1763\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1859\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker3)));
                            }
                            goto label88;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker3)));
                    label88:
;
                        goto label89;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedNegotiateResponseChecker)));
                label89:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S140");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S284");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S284");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S284");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S284");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S284");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S284");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S524");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S524");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S524");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S524");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S524");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S524");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S524");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S524, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S524");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S992");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S992");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1280");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1280, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1568");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1568");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S993");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S993");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1281");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1281, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1569");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1569");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S994");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S994");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1282");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1282, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1570");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1570");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S995");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S995");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1283");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1283, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S88ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1571");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1571");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S141\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S285\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S333\'");
                    bool temp135;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp135);
                    this.Manager.Comment("reaching state \'S381\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp135, "createPipeStatus of CreatePipeAndMailslot, state S381");
                    this.Manager.Comment("reaching state \'S429\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S477\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S525\'");
                    int temp137 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedNegotiateResponseChecker)));
                    if ((temp137 == 0)) {
                        this.Manager.Comment("reaching state \'S619\'");
                        goto label91;
                    }
                    if ((temp137 == 1)) {
                        this.Manager.Comment("reaching state \'S618\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S669\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S717\'");
                        int temp136 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker3)));
                        if ((temp136 == 0)) {
                            this.Manager.Comment("reaching state \'S804\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S900\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S996\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1092\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1188\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1284\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1380\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1476\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1572\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1668\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1764\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1860\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker)));
                            }
                            goto label90;
                        }
                        if ((temp136 == 1)) {
                            this.Manager.Comment("reaching state \'S805\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S901\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S997\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1093\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1189\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1285\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1381\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1477\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1573\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1669\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1765\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1861\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker1)));
                            }
                            goto label90;
                        }
                        if ((temp136 == 2)) {
                            this.Manager.Comment("reaching state \'S806\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S902\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S998\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1094\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1190\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1286\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1382\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1478\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1574\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1670\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1766\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1862\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker2)));
                            }
                            goto label90;
                        }
                        if ((temp136 == 3)) {
                            this.Manager.Comment("reaching state \'S807\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S903\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S999\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1095\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1191\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1287\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1383\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1479\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1575\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1671\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1767\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1863\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker3)));
                            }
                            goto label90;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker3)));
                    label90:
;
                        goto label91;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedNegotiateResponseChecker)));
                label91:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S141");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S285");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S285");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S285");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S285");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S285");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S285");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S525");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S525");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S525");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S525");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S525");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S525");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S525");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S525, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S525");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S996");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S996");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1284");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1284, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1572");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1572");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S997");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S997");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1285");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1285, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1573");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1573");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S998");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S998");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1286");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1286, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1574");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1574");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S999");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S999");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1287");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1287, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S1287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S90ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1575");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1575");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S142\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S286\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S334\'");
                    bool temp138;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp138);
                    this.Manager.Comment("reaching state \'S382\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp138, "createPipeStatus of CreatePipeAndMailslot, state S382");
                    this.Manager.Comment("reaching state \'S430\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S478\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S526\'");
                    int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedNegotiateResponseChecker)));
                    if ((temp140 == 0)) {
                        this.Manager.Comment("reaching state \'S621\'");
                        goto label93;
                    }
                    if ((temp140 == 1)) {
                        this.Manager.Comment("reaching state \'S620\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S670\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S718\'");
                        int temp139 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker3)));
                        if ((temp139 == 0)) {
                            this.Manager.Comment("reaching state \'S808\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S904\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1000\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1096\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1192\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1288\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1384\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1480\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1576\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1672\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1768\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1864\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker)));
                            }
                            goto label92;
                        }
                        if ((temp139 == 1)) {
                            this.Manager.Comment("reaching state \'S809\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S905\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1001\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1097\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1193\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1289\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1385\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1481\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1577\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1673\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1769\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1865\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker1)));
                            }
                            goto label92;
                        }
                        if ((temp139 == 2)) {
                            this.Manager.Comment("reaching state \'S810\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S906\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1002\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1098\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1194\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1290\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1386\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1482\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1578\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1674\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1770\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1866\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker2)));
                            }
                            goto label92;
                        }
                        if ((temp139 == 3)) {
                            this.Manager.Comment("reaching state \'S811\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S907\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1003\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1099\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1195\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1291\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1387\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1483\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1579\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1675\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1771\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1867\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker3)));
                            }
                            goto label92;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker3)));
                    label92:
;
                        goto label93;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedNegotiateResponseChecker)));
                label93:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S142");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S286");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S286");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S286");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S286");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S286");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S286");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S526");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S526");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S526");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S526");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S526");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S526");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S526");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S526, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S526");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S718");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1000");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1000");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1288");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1288, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1576");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S718");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1001");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1001");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1289");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1289, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1577");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S718");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1002");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1002");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1290");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1290, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1290");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1290");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1578");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1578");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S718");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1003");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1003");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1291");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1291, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S92ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1579");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1579");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S143\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,True)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, true);
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S287\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S335\'");
                    bool temp141;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp141);
                    this.Manager.Comment("reaching state \'S383\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp141, "createPipeStatus of CreatePipeAndMailslot, state S383");
                    this.Manager.Comment("reaching state \'S431\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S479\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S527\'");
                    int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedNegotiateResponseChecker)));
                    if ((temp143 == 0)) {
                        this.Manager.Comment("reaching state \'S623\'");
                        goto label95;
                    }
                    if ((temp143 == 1)) {
                        this.Manager.Comment("reaching state \'S622\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S671\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S719\'");
                        int temp142 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker3)));
                        if ((temp142 == 0)) {
                            this.Manager.Comment("reaching state \'S812\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S908\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1004\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S1100\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1196\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1292\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1388\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1484\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1580\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1676\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1772\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1868\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker)));
                            }
                            goto label94;
                        }
                        if ((temp142 == 1)) {
                            this.Manager.Comment("reaching state \'S813\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S909\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1005\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S1101\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,True)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                                this.Manager.Comment("reaching state \'S1197\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1293\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1389\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevel" +
                                            "2)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevel2);
                                    this.Manager.Comment("reaching state \'S1485\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1581\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1677\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1773\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1869\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker1)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker1)));
                            }
                            goto label94;
                        }
                        if ((temp142 == 2)) {
                            this.Manager.Comment("reaching state \'S814\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S910\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1006\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S1102\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1198\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1294\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1390\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestOplockLevle" +
                                            "1)\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestOplockLevle1);
                                    this.Manager.Comment("reaching state \'S1486\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1582\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1678\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1774\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1870\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker2)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker2)));
                            }
                            goto label94;
                        }
                        if ((temp142 == 3)) {
                            this.Manager.Comment("reaching state \'S815\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S911\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S1007\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S1103\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S1199\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S1295\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S1391\'");
                                    this.Manager.Comment("executing step \'call FsctlBadCommandRequest(5,1,1,False,0,FsctlRequestBatchOplock" +
                                            ")\'");
                                    this.ISmbAdapterInstance.FsctlBadCommandRequest(5, 1, 1, false, 0, Microsoft.Protocol.TestSuites.Smb.FsctlInvalidCommand.FsctlRequestBatchOplock);
                                    this.Manager.Comment("reaching state \'S1487\'");
                                    this.Manager.Comment("checking step \'return FsctlBadCommandRequest\'");
                                    this.Manager.Comment("reaching state \'S1583\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S1679\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S1775\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S1871\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker3)));
                            }
                            goto label94;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker3)));
                    label94:
;
                        goto label95;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedNegotiateResponseChecker)));
                label95:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S143");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S287");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S287");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S287");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S287");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S287");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S287");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(1,ErrorGenFailure)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of ErrorResponse, state S527");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ErrorGenFailure, messageStatus, "messageStatus of ErrorResponse, state S527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8579, MS-SMB_R8580");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8579");
            this.Manager.Checkpoint("MS-SMB_R8580");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S527");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S527");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S527");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S527");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S527");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S527, field selection R" +
                    "ep");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S527");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S719");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1004");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1004");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1292");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1292, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1292");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1292");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1580");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1580");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S719");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1005");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1005");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1293");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1293, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1581");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1581");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S719");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker2(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1006");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1006");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker2(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1294");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1294, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1294");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1582");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S719");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S719");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94TreeConnectResponseChecker3(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S1007");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S1007");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94CreateResponseChecker3(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S1295");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S1295, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S1295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8S94ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S1583");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S1583");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9343, MS-SMB_R9568");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9343");
            this.Manager.Checkpoint("MS-SMB_R9568");
        }
        #endregion
    }
}
