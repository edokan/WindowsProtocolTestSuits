//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2 : PtfTestClassBase {
        
        public AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NonExtendedNegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NonExtendedSessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorNtTransSetQuotaResponseAdditionalDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NonExtendedNegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedNegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo NonExtendedSessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedSessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo ErrorNtTransSetQuotaResponseAdditionalInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorNtTransSetQuotaResponseAdditional");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorNtTransSetQuotaResponseAdditionalInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedNegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedSessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0() {
            this.Manager.BeginTest("AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0" +
                    "");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S4\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S10\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S12\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S14\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S14");
                    this.Manager.Comment("reaching state \'S16\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S20\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S22\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Guest,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S24\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S26\'");
                        int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker3)));
                        if ((temp5 == 0)) {
                            this.Manager.Comment("reaching state \'S29\'");
                            goto label4;
                        }
                        if ((temp5 == 1)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S28();
                            goto label4;
                        }
                        if ((temp5 == 2)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S28();
                            goto label4;
                        }
                        if ((temp5 == 3)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S28();
                            goto label4;
                        }
                        if ((temp5 == 4)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S30();
                            goto label4;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker3)));
                    label4:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S4");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S4");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S10");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S10");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S20");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S20");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S20");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S20");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S20, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S20");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S28() {
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"QuotaShare\",Disk,Fal" +
                    "se)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "QuotaShare", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S36\'");
            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0TreeConnectResponseChecker)));
            if ((temp3 == 0)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40();
                goto label2;
            }
            if ((temp3 == 1)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40();
                goto label2;
            }
            if ((temp3 == 2)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40();
                goto label2;
            }
            if ((temp3 == 3)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40();
                goto label2;
            }
            if ((temp3 == 4)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40();
                goto label2;
            }
            if ((temp3 == 5)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40();
                goto label2;
            }
            if ((temp3 == 6)) {
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S46();
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0TreeConnectResponseChecker)));
        label2:
;
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S40() {
            this.Manager.Comment("reaching state \'S40\'");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S36");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S46() {
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.CreateRequestInfo, null, new CreateRequestDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S48\'");
            int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0CreateResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker2)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("executing step \'call NtTransSetQuotaRequestAdditional(5,1,1,0,False,AccessDenied)" +
                        "\'");
                this.ISmbAdapterInstance.NtTransSetQuotaRequestAdditional(5, 1, 1, 0, false, ((Microsoft.Protocol.TestSuites.Smb.NtTransSetQuotaRequestParameter)(1)));
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return NtTransSetQuotaRequestAdditional\'");
                this.Manager.Comment("reaching state \'S61\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorNtTransSetQuotaResponseAdditionalChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorNtTransSetQuotaResponseAdditionalChecker1)));
                if ((temp1 == 0)) {
                    AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S64();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S64();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorNtTransSetQuotaResponseAdditionalChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorNtTransSetQuotaResponseAdditionalChecker1)));
            label0:
;
                goto label1;
            }
            if ((temp2 == 1)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S60\'");
                goto label1;
            }
            if ((temp2 == 2)) {
                this.Manager.Comment("reaching state \'S52\'");
                goto label1;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0CreateResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker2)));
        label1:
;
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S48");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S48, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S48");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorNtTransSetQuotaResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorNtTransSetQuotaResponseAdditional(5,AccessDenied)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorNtTransSetQuotaResponseAdditional, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorNtTransSetQuotaResponseAdditional, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R1109470");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R1109470");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S64() {
            this.Manager.Comment("reaching state \'S64\'");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorNtTransSetQuotaResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorNtTransSetQuotaResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorNtTransSetQuotaResponseAdditional, state S61");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorNtTransSetQuotaResponseAdditional, state S61");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S48");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S48");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S48");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S48");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S26");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S30() {
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"QuotaShare\",Disk,Fals" +
                    "e)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "QuotaShare", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S37\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker6)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker7)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker8)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker9)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker10)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker11)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0TreeConnectResponseChecker1)));
            if ((temp4 == 0)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41();
                goto label3;
            }
            if ((temp4 == 1)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41();
                goto label3;
            }
            if ((temp4 == 2)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41();
                goto label3;
            }
            if ((temp4 == 3)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41();
                goto label3;
            }
            if ((temp4 == 4)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41();
                goto label3;
            }
            if ((temp4 == 5)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41();
                goto label3;
            }
            if ((temp4 == 6)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S46();
                goto label3;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker6)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker7)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker8)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker9)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker10)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker11)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0TreeConnectResponseChecker1)));
        label3:
;
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S37");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S41() {
            this.Manager.Comment("reaching state \'S41\'");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S37");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker10(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S37");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker11(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S37");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S0TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S37");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2() {
            this.Manager.BeginTest("AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2" +
                    "");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S5\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S7\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S11\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S13\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp6);
                    this.Manager.Comment("reaching state \'S15\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "createPipeStatus of CreatePipeAndMailslot, state S15");
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S19\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S21\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S23\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Guest,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S25\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S27\'");
                        int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker3)));
                        if ((temp10 == 0)) {
                            this.Manager.Comment("reaching state \'S32\'");
                            goto label8;
                        }
                        if ((temp10 == 1)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S30();
                            goto label8;
                        }
                        if ((temp10 == 2)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S31();
                            goto label8;
                        }
                        if ((temp10 == 3)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S31();
                            goto label8;
                        }
                        if ((temp10 == 4)) {
                            AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S31();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker3)));
                    label8:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S5");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S5");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S11");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S21");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S21");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S21");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S21, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S21");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S31() {
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"QuotaShare\",Disk,Fal" +
                    "se)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "QuotaShare", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S38\'");
            int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2TreeConnectResponseChecker)));
            if ((temp9 == 0)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S44();
                goto label7;
            }
            if ((temp9 == 1)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S44();
                goto label7;
            }
            if ((temp9 == 2)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S44();
                goto label7;
            }
            if ((temp9 == 3)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S44();
                goto label7;
            }
            if ((temp9 == 4)) {
                AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S44();
                goto label7;
            }
            if ((temp9 == 5)) {
                this.Manager.Comment("reaching state \'S45\'");
                goto label7;
            }
            if ((temp9 == 6)) {
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S49\'");
                int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2CreateResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker2)));
                if ((temp8 == 0)) {
                    this.Manager.Comment("reaching state \'S53\'");
                    this.Manager.Comment("executing step \'call NtTransSetQuotaRequestAdditional(5,1,1,0,False,AccessDenied)" +
                            "\'");
                    this.ISmbAdapterInstance.NtTransSetQuotaRequestAdditional(5, 1, 1, 0, false, ((Microsoft.Protocol.TestSuites.Smb.NtTransSetQuotaRequestParameter)(1)));
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("checking step \'return NtTransSetQuotaRequestAdditional\'");
                    this.Manager.Comment("reaching state \'S62\'");
                    int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorNtTransSetQuotaResponseAdditionalChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorNtTransSetQuotaResponseAdditionalChecker1)));
                    if ((temp7 == 0)) {
                        AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S65();
                        goto label5;
                    }
                    if ((temp7 == 1)) {
                        AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S65();
                        goto label5;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorNtTransSetQuotaResponseAdditionalChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorNtTransSetQuotaResponseAdditionalInfo, null, new ErrorNtTransSetQuotaResponseAdditionalDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorNtTransSetQuotaResponseAdditionalChecker1)));
                label5:
;
                    goto label6;
                }
                if ((temp8 == 1)) {
                    this.Manager.Comment("reaching state \'S54\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S63\'");
                    goto label6;
                }
                if ((temp8 == 2)) {
                    this.Manager.Comment("reaching state \'S55\'");
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2CreateResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker2)));
            label6:
;
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2TreeConnectResponseChecker)));
        label7:
;
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S44() {
            this.Manager.Comment("reaching state \'S44\'");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S38");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S49");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S49, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorNtTransSetQuotaResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorNtTransSetQuotaResponseAdditional(5,AccessDenied)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorNtTransSetQuotaResponseAdditional, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorNtTransSetQuotaResponseAdditional, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R1109470");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R1109470");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S65() {
            this.Manager.Comment("reaching state \'S65\'");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorNtTransSetQuotaResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorNtTransSetQuotaResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorNtTransSetQuotaResponseAdditional, state S62");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorNtTransSetQuotaResponseAdditional, state S62");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S49");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S49");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S49");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S49");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
    }
}
