//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8 : PtfTestClassBase {
        
        public NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void ErrorWriteResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented);
        
        public delegate void WriteResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NonExtendedNegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NonExtendedSessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NonExtendedNegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedNegotiateResponse");
        
        static System.Reflection.EventInfo NonExtendedSessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedSessionSetupResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo ErrorWriteResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorWriteResponse");
        
        static System.Reflection.EventInfo WriteResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "WriteResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorWriteResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedNegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedSessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(WriteResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S10\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Disabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, false, false);
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S25\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S30\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S35\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S35");
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S50\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S55\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S60\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S65\'");
                        int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker3)));
                        if ((temp2 == 0)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S70();
                            goto label1;
                        }
                        if ((temp2 == 1)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S70();
                            goto label1;
                        }
                        if ((temp2 == 2)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S70();
                            goto label1;
                        }
                        if ((temp2 == 3)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S70();
                            goto label1;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker3)));
                    label1:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S10");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S10");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S25");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S50, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S50");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S70() {
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S80\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,4,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 4, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S95\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("executing step \'call WriteRequest(5,1,1,0,Disk,False,0)\'");
                    this.ISmbAdapterInstance.WriteRequest(5, 1, 1, 0, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, 0);
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("checking step \'return WriteRequest\'");
                    this.Manager.Comment("reaching state \'S110\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker5)));
                    if ((temp1 == 0)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115();
                        goto label0;
                    }
                    if ((temp1 == 2)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115();
                        goto label0;
                    }
                    if ((temp1 == 3)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115();
                        goto label0;
                    }
                    if ((temp1 == 4)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115();
                        goto label0;
                    }
                    if ((temp1 == 5)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115();
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker5)));
                label0:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S80");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S80");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S95");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S95, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065, MS-SMB_R9612, MS-SMB_R" +
                        "9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,AccessDenied,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9096, MS-SMB_R9119");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9096");
            this.Manager.Checkpoint("MS-SMB_R9119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S115() {
            this.Manager.Comment("reaching state \'S115\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,AccessDenied,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorWriteResponse, state S110");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R9096, MS-SMB_R" +
                        "9119");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R9096");
            this.Manager.Checkpoint("MS-SMB_R9119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0ErrorWriteResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S110");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S110");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S110");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S0NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S11\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S26\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp3);
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp3, "createPipeStatus of CreatePipeAndMailslot, state S36");
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S51\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S56\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S61\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S66\'");
                        int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker3)));
                        if ((temp5 == 0)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S71();
                            goto label3;
                        }
                        if ((temp5 == 1)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S71();
                            goto label3;
                        }
                        if ((temp5 == 2)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S71();
                            goto label3;
                        }
                        if ((temp5 == 3)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S71();
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker3)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S11");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S11");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S26");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S51, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S51");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S71() {
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S81\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,2,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 2, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S96\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("executing step \'call WriteRequest(5,1,1,0,Disk,False,0)\'");
                    this.ISmbAdapterInstance.WriteRequest(5, 1, 1, 0, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, 0);
                    this.Manager.Comment("reaching state \'S106\'");
                    this.Manager.Comment("checking step \'return WriteRequest\'");
                    this.Manager.Comment("reaching state \'S111\'");
                    int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker5)));
                    if ((temp4 == 0)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116();
                        goto label2;
                    }
                    if ((temp4 == 1)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116();
                        goto label2;
                    }
                    if ((temp4 == 2)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116();
                        goto label2;
                    }
                    if ((temp4 == 3)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116();
                        goto label2;
                    }
                    if ((temp4 == 4)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116();
                        goto label2;
                    }
                    if ((temp4 == 5)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116();
                        goto label2;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker5)));
                label2:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S81");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S96");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S96, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S116() {
            this.Manager.Comment("reaching state \'S116\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,AccessDenied,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9096, MS-SMB_R9119");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9096");
            this.Manager.Checkpoint("MS-SMB_R9119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,AccessDenied,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R9096, MS-SMB_R" +
                        "9119");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R9096");
            this.Manager.Checkpoint("MS-SMB_R9119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2ErrorWriteResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S111");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S111");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S111");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S2NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S12\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S27\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S32\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp6);
                    this.Manager.Comment("reaching state \'S37\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "createPipeStatus of CreatePipeAndMailslot, state S37");
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S52\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S62\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S67\'");
                        int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker3)));
                        if ((temp8 == 0)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S72();
                            goto label5;
                        }
                        if ((temp8 == 1)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S72();
                            goto label5;
                        }
                        if ((temp8 == 2)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S72();
                            goto label5;
                        }
                        if ((temp8 == 3)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S72();
                            goto label5;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker3)));
                    label5:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S12");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S12");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S27");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S52, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S52");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S72() {
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S82\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,2,FileOpenIf,0,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 2, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 0, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S97\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("executing step \'call WriteRequest(5,1,1,0,Disk,False,0)\'");
                    this.ISmbAdapterInstance.WriteRequest(5, 1, 1, 0, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, 0);
                    this.Manager.Comment("reaching state \'S107\'");
                    this.Manager.Comment("checking step \'return WriteRequest\'");
                    this.Manager.Comment("reaching state \'S112\'");
                    int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker12)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker13)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker14)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker15)));
                    if ((temp7 == 0)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S117();
                        goto label4;
                    }
                    if ((temp7 == 1)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S117();
                        goto label4;
                    }
                    if ((temp7 == 2)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S117();
                        goto label4;
                    }
                    if ((temp7 == 3)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S117();
                        goto label4;
                    }
                    if ((temp7 == 4)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 5)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 6)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 7)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 8)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 9)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 10)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 11)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 12)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 13)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 14)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 15)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 16)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 17)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 18)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    if ((temp7 == 19)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118();
                        goto label4;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker12)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker13)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker14)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker15)));
                label4:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S82");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S82");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S97");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S97, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S117() {
            this.Manager.Comment("reaching state \'S117\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4ErrorWriteResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S112");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,False,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S118() {
            this.Manager.Comment("reaching state \'S118\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker2(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker3(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,False,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker4(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,False,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker5(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R5407, MS-SMB_R306932, MS-SMB_" +
                        "R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker6(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5407, MS-SMB_R306932, MS-SMB_R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker7(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker8(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker9(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042, MS-SMB_R5407, MS-SMB_R306932, MS-SMB_" +
                        "R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker10(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042, MS-SMB_R5407, MS-SMB_R" +
                        "306932, MS-SMB_R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker11(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042, MS-SMB_R5407, MS-SMB_R306932, MS-SMB_" +
                        "R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker12(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5407, MS-SMB_R306932, MS-SMB_R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker13(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R5407, MS-SMB_R306932, MS-SMB_" +
                        "R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker14(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042, MS-SMB_R5407, MS-SMB_R" +
                        "306932, MS-SMB_R30039");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
            this.Manager.Checkpoint("MS-SMB_R5407");
            this.Manager.Checkpoint("MS-SMB_R306932");
            this.Manager.Checkpoint("MS-SMB_R30039");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4WriteResponseChecker15(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,False,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S112");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S112");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S4NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S13\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S28\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S33\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp9);
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "createPipeStatus of CreatePipeAndMailslot, state S38");
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S53\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S58\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S63\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S68\'");
                        int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker3)));
                        if ((temp11 == 0)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S71();
                            goto label7;
                        }
                        if ((temp11 == 1)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S73();
                            goto label7;
                        }
                        if ((temp11 == 2)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S73();
                            goto label7;
                        }
                        if ((temp11 == 3)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S73();
                            goto label7;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker3)));
                    label7:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S13");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S13");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S28");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S53, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S53");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S73() {
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S83\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,2,FileOpenIf,2,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 2, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 2, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S98\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("executing step \'call WriteRequest(5,1,1,0,Disk,False,0)\'");
                    this.ISmbAdapterInstance.WriteRequest(5, 1, 1, 0, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, 0);
                    this.Manager.Comment("reaching state \'S108\'");
                    this.Manager.Comment("checking step \'return WriteRequest\'");
                    this.Manager.Comment("reaching state \'S113\'");
                    int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker12)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker13)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker14)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker15)));
                    if ((temp10 == 0)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S119();
                        goto label6;
                    }
                    if ((temp10 == 1)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S119();
                        goto label6;
                    }
                    if ((temp10 == 2)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S119();
                        goto label6;
                    }
                    if ((temp10 == 3)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S119();
                        goto label6;
                    }
                    if ((temp10 == 4)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 5)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 6)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 7)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 8)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 9)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 10)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 11)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 12)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 13)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 14)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 15)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 16)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 17)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 18)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    if ((temp10 == 19)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120();
                        goto label6;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker12)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker13)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker14)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.WriteResponseInfo, null, new WriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker15)));
                label6:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S83");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S98");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S98, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S98");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S119() {
            this.Manager.Comment("reaching state \'S119\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6ErrorWriteResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,False,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S120() {
            this.Manager.Comment("reaching state \'S120\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker2(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker3(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,False,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker4(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker5(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker6(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker7(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,False,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker8(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,False,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker9(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,False,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker10(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker11(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker12(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker13(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,True,Success,True,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker14(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30041, MS-SMB_R30042");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30041");
            this.Manager.Checkpoint("MS-SMB_R30042");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6WriteResponseChecker15(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isWrittenByteCountEqualCountField, bool isWrittenByteCountEqualCountHighField, bool isWrittenByteCountLargerThanMaxBufferSize) {
            this.Manager.Comment("checking step \'event WriteResponse(5,1,1,False,Success,False,False,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountField, "isWrittenByteCountEqualCountField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountEqualCountHighField, "isWrittenByteCountEqualCountHighField of WriteResponse, state S113");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isWrittenByteCountLargerThanMaxBufferSize, "isWrittenByteCountLargerThanMaxBufferSize of WriteResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S6NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S14\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S29\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S39");
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S54\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S59\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",True,True,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), true, true, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S64\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S69\'");
                        int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker3)));
                        if ((temp14 == 0)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S72();
                            goto label9;
                        }
                        if ((temp14 == 1)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S74();
                            goto label9;
                        }
                        if ((temp14 == 2)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S74();
                            goto label9;
                        }
                        if ((temp14 == 3)) {
                            NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S74();
                            goto label9;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker3)));
                    label9:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S14");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S14");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S29");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S54, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S54");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S74() {
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S84\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8TreeConnectResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,4,\"Test1.txt\",Disk,False,Fa" +
                        "lse,False,True)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 4, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, true);
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S99\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("executing step \'call WriteRequest(5,1,1,0,Disk,False,0)\'");
                    this.ISmbAdapterInstance.WriteRequest(5, 1, 1, 0, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, 0);
                    this.Manager.Comment("reaching state \'S109\'");
                    this.Manager.Comment("checking step \'return WriteRequest\'");
                    this.Manager.Comment("reaching state \'S114\'");
                    int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker5)));
                    if ((temp13 == 0)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121();
                        goto label8;
                    }
                    if ((temp13 == 1)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121();
                        goto label8;
                    }
                    if ((temp13 == 2)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121();
                        goto label8;
                    }
                    if ((temp13 == 3)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121();
                        goto label8;
                    }
                    if ((temp13 == 4)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121();
                        goto label8;
                    }
                    if ((temp13 == 5)) {
                        NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121();
                        goto label8;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.ErrorWriteResponseInfo, null, new ErrorWriteResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker5)));
                label8:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8CreateResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8TreeConnectResponseChecker)));
            }
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S84");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S84");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S99");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S99, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S99");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,AccessDenied,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9096, MS-SMB_R9119");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9096");
            this.Manager.Checkpoint("MS-SMB_R9119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S121() {
            this.Manager.Comment("reaching state \'S121\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,NetworkSessionExpired,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R8553");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R8553");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,AccessDenied,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorWriteResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R5229, MS-SMB_R105229, MS-SMB_R9096, MS-SMB_R" +
                        "9119");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R5229");
            this.Manager.Checkpoint("MS-SMB_R105229");
            this.Manager.Checkpoint("MS-SMB_R9096");
            this.Manager.Checkpoint("MS-SMB_R9119");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8ErrorWriteResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS5229Implemented) {
            this.Manager.Comment("checking step \'event ErrorWriteResponse(5,StatusMaxBufferExceeded,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorWriteResponse, state S114");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusMaxBufferExceeded, messageStatus, "messageStatus of ErrorWriteResponse, state S114");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS5229Implemented, "isRS5229Implemented of ErrorWriteResponse, state S114");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8S8NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
    }
}
