//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2 : PtfTestClassBase {
        
        public NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2SetPathInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTrans2QueryPathInfoResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented);
        
        public delegate void Trans2QueryPathInfoResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NonExtendedNegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void NonExtendedSessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NonExtendedNegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedNegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo NonExtendedSessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NonExtendedSessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo Trans2SetPathInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2SetPathInfoResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.EventInfo ErrorTrans2QueryPathInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTrans2QueryPathInfoResponse");
        
        static System.Reflection.EventInfo Trans2QueryPathInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2QueryPathInfoResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTrans2QueryPathInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedNegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NonExtendedSessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2QueryPathInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2SetPathInfoResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S10\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S25\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S30\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S35\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S35");
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S50\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S55\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S60\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S65\'");
                        int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker3)));
                        if ((temp9 == 0)) {
                            this.Manager.Comment("reaching state \'S71\'");
                            goto label6;
                        }
                        if ((temp9 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S70();
                            goto label6;
                        }
                        if ((temp9 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S70();
                            goto label6;
                        }
                        if ((temp9 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S70();
                            goto label6;
                        }
                        if ((temp9 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S72();
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker3)));
                    label6:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S10");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S10");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S25");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S50");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S50, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S50");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S70() {
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S87\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker)));
            if ((temp4 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94();
                goto label2;
            }
            if ((temp4 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94();
                goto label2;
            }
            if ((temp4 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94();
                goto label2;
            }
            if ((temp4 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94();
                goto label2;
            }
            if ((temp4 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94();
                goto label2;
            }
            if ((temp4 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94();
                goto label2;
            }
            if ((temp4 == 6)) {
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,Fals" +
                        "e,False,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S111\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker3)));
                if ((temp3 == 0)) {
                    this.Manager.Comment("reaching state \'S117\'");
                    bool temp1;
                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp1);
                    this.Manager.Checkpoint("MS-SMB_R8554");
                    this.Manager.Comment("reaching state \'S130\'");
                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isSucceed of CheckPreviousVersion, state S130");
                    this.Manager.Comment("reaching state \'S139\'");
                    this.Manager.Comment("executing step \'call Trans2SetPathInfoRequest(5,1,1,False,True,True,FileAllocatio" +
                            "nInformation,1)\'");
                    this.ISmbAdapterInstance.Trans2SetPathInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileAllocationInformation, 1);
                    this.Manager.Comment("reaching state \'S147\'");
                    this.Manager.Comment("checking step \'return Trans2SetPathInfoRequest\'");
                    this.Manager.Comment("reaching state \'S152\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2SetPathInfoResponseInfo, null, new Trans2SetPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0Trans2SetPathInfoResponseChecker)));
                    if ((temp2 == 0)) {
                        this.Manager.Comment("reaching state \'S158\'");
                        goto label0;
                    }
                    if ((temp2 == 1)) {
                        this.Manager.Comment("reaching state \'S157\'");
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2SetPathInfoResponseInfo, null, new Trans2SetPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0Trans2SetPathInfoResponseChecker)));
                label0:
;
                    goto label1;
                }
                if ((temp3 == 1)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S116();
                    goto label1;
                }
                if ((temp3 == 2)) {
                    NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S118();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker3)));
            label1:
;
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker)));
        label2:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S94() {
            this.Manager.Comment("reaching state \'S94\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S87");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileOpened,FileExists},True,Tr" +
                    "ue,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S111");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S111, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S152");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S152");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0Trans2SetPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetPathInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetPathInfoResponse, state S152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetPathInfoResponse, state S152");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetPathInfoResponse, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetPathInfoResponse, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetPathInfoResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9316, MS-SMB_R30031");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9316");
            this.Manager.Checkpoint("MS-SMB_R30031");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S111");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S111");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S116() {
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S138\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S111");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S111");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S118() {
            this.Manager.Comment("reaching state \'S118\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S72() {
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S88\'");
            int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker1)));
            if ((temp8 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95();
                goto label5;
            }
            if ((temp8 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95();
                goto label5;
            }
            if ((temp8 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95();
                goto label5;
            }
            if ((temp8 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95();
                goto label5;
            }
            if ((temp8 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95();
                goto label5;
            }
            if ((temp8 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95();
                goto label5;
            }
            if ((temp8 == 6)) {
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,Fals" +
                        "e,False,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S107();
                goto label5;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker6)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker7)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker8)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker9)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker10)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker11)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker1)));
        label5:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S88");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S95() {
            this.Manager.Comment("reaching state \'S95\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S88");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker10(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S88");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorTreeConnectResponseChecker11(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S88");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0TreeConnectResponseChecker1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S88");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S88");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S107() {
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateRequestInfo, null, new CreateRequestDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S112\'");
            int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker6)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S119\'");
                bool temp5;
                this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                "Rep"}, new object[] {
                                Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp5);
                this.Manager.Checkpoint("MS-SMB_R8554");
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "isSucceed of CheckPreviousVersion, state S131");
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call Trans2SetPathInfoRequest(5,1,1,False,False,True,SmbInfoStand" +
                        "ard,1)\'");
                this.ISmbAdapterInstance.Trans2SetPathInfoRequest(5, 1, 1, false, false, true, ((Microsoft.Protocol.TestSuites.Smb.InformationLevel)(0)), 1);
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("checking step \'return Trans2SetPathInfoRequest\'");
                this.Manager.Comment("reaching state \'S153\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2SetPathInfoResponseInfo, null, new Trans2SetPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0Trans2SetPathInfoResponseChecker1)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S160\'");
                    goto label3;
                }
                if ((temp6 == 1)) {
                    this.Manager.Comment("reaching state \'S159\'");
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2SetPathInfoResponseInfo, null, new Trans2SetPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0Trans2SetPathInfoResponseChecker1)));
            label3:
;
                goto label4;
            }
            if ((temp7 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S116();
                goto label4;
            }
            if ((temp7 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S118();
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker6)));
        label4:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileOpened,FileExists},True,Tr" +
                    "ue,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S112");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S112, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S153");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0Trans2SetPathInfoResponseChecker1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetPathInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetPathInfoResponse, state S153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetPathInfoResponse, state S153");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetPathInfoResponse, state S153");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetPathInfoResponse, state S153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetPathInfoResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9316");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9316");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S112");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S0ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S112");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S11\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S26\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    bool temp10;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp10);
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp10, "createPipeStatus of CreatePipeAndMailslot, state S36");
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S51\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S56\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S61\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S66\'");
                        int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker3)));
                        if ((temp12 == 0)) {
                            this.Manager.Comment("reaching state \'S74\'");
                            goto label8;
                        }
                        if ((temp12 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S73();
                            goto label8;
                        }
                        if ((temp12 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S73();
                            goto label8;
                        }
                        if ((temp12 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S73();
                            goto label8;
                        }
                        if ((temp12 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S73();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker3)));
                    label8:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S11");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S11");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S26");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S26");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S51, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S51");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S73() {
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S89\'");
            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2TreeConnectResponseChecker)));
            if ((temp11 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98();
                goto label7;
            }
            if ((temp11 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98();
                goto label7;
            }
            if ((temp11 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98();
                goto label7;
            }
            if ((temp11 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98();
                goto label7;
            }
            if ((temp11 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98();
                goto label7;
            }
            if ((temp11 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98();
                goto label7;
            }
            if ((temp11 == 6)) {
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,Fals" +
                        "e,False,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.AddReturn(CreateRequestInfo, null);
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S107();
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2TreeConnectResponseChecker)));
        label7:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S98() {
            this.Manager.Comment("reaching state \'S98\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S89");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S2NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S12\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S27\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S32\'");
                    bool temp13;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp13);
                    this.Manager.Comment("reaching state \'S37\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp13, "createPipeStatus of CreatePipeAndMailslot, state S37");
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S52\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S62\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S67\'");
                        int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker3)));
                        if ((temp18 == 0)) {
                            this.Manager.Comment("reaching state \'S76\'");
                            goto label12;
                        }
                        if ((temp18 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S75();
                            goto label12;
                        }
                        if ((temp18 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S75();
                            goto label12;
                        }
                        if ((temp18 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S75();
                            goto label12;
                        }
                        if ((temp18 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S75();
                            goto label12;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker3)));
                    label12:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S12");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S12");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S27");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S52, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S52");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S75() {
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S90\'");
            int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4TreeConnectResponseChecker)));
            if ((temp17 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100();
                goto label11;
            }
            if ((temp17 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100();
                goto label11;
            }
            if ((temp17 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100();
                goto label11;
            }
            if ((temp17 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100();
                goto label11;
            }
            if ((temp17 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100();
                goto label11;
            }
            if ((temp17 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100();
                goto label11;
            }
            if ((temp17 == 6)) {
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,Fals" +
                        "e,False,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S113\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker2)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S120\'");
                    bool temp14;
                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp14);
                    this.Manager.Checkpoint("MS-SMB_R8554");
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp14, "isSucceed of CheckPreviousVersion, state S132");
                    this.Manager.Comment("reaching state \'S141\'");
                    this.Manager.Comment("executing step \'call Trans2QueryPathInfoRequest(5,1,1,False,False,True,SmbQueryFi" +
                            "leStreamInfo,1)\'");
                    this.ISmbAdapterInstance.Trans2QueryPathInfoRequest(5, 1, 1, false, false, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.SmbQueryFileStreamInfo, 1);
                    this.Manager.Comment("reaching state \'S149\'");
                    this.Manager.Comment("checking step \'return Trans2QueryPathInfoRequest\'");
                    this.Manager.Comment("reaching state \'S154\'");
                    int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2QueryPathInfoResponseInfo, null, new Trans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4Trans2QueryPathInfoResponseChecker)));
                    if ((temp15 == 0)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S162();
                        goto label9;
                    }
                    if ((temp15 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S162();
                        goto label9;
                    }
                    if ((temp15 == 2)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S163();
                        goto label9;
                    }
                    if ((temp15 == 3)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S163();
                        goto label9;
                    }
                    if ((temp15 == 4)) {
                        this.Manager.Comment("reaching state \'S161\'");
                        goto label9;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2QueryPathInfoResponseInfo, null, new Trans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4Trans2QueryPathInfoResponseChecker)));
                label9:
;
                    goto label10;
                }
                if ((temp16 == 1)) {
                    this.Manager.Comment("reaching state \'S121\'");
                    goto label10;
                }
                if ((temp16 == 2)) {
                    this.Manager.Comment("reaching state \'S122\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S133\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S142\'");
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker2)));
            label10:
;
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4TreeConnectResponseChecker)));
        label11:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S100() {
            this.Manager.Comment("reaching state \'S100\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S90");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S90");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileOpened,FileExists},True,Tr" +
                    "ue,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S113");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S113, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NotSupported,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S162() {
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S169\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NotSupported,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S163() {
            this.Manager.Comment("reaching state \'S163\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorTrans2QueryPathInfoResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S154");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S154");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4Trans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryPathInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryPathInfoResponse, state S154");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryPathInfoResponse, state S154");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryPathInfoResponse, state S154");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryPathInfoResponse, state S154");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryPathInfoResponse, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9313");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9313");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S113");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S4NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S13\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S28\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S33\'");
                    bool temp19;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp19);
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp19, "createPipeStatus of CreatePipeAndMailslot, state S38");
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S53\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S58\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S63\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S68\'");
                        int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker3)));
                        if ((temp24 == 0)) {
                            this.Manager.Comment("reaching state \'S78\'");
                            goto label16;
                        }
                        if ((temp24 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S77();
                            goto label16;
                        }
                        if ((temp24 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S77();
                            goto label16;
                        }
                        if ((temp24 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S77();
                            goto label16;
                        }
                        if ((temp24 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S77();
                            goto label16;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker3)));
                    label16:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S13");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S13");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S28");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S28");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S53, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S53");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S77() {
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S91\'");
            int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6TreeConnectResponseChecker)));
            if ((temp23 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102();
                goto label15;
            }
            if ((temp23 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102();
                goto label15;
            }
            if ((temp23 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102();
                goto label15;
            }
            if ((temp23 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102();
                goto label15;
            }
            if ((temp23 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102();
                goto label15;
            }
            if ((temp23 == 5)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102();
                goto label15;
            }
            if ((temp23 == 6)) {
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,Fals" +
                        "e,False,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S114\'");
                int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker2)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S123\'");
                    bool temp20;
                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp20);
                    this.Manager.Checkpoint("MS-SMB_R8554");
                    this.Manager.Comment("reaching state \'S134\'");
                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp20, "isSucceed of CheckPreviousVersion, state S134");
                    this.Manager.Comment("reaching state \'S143\'");
                    this.Manager.Comment("executing step \'call Trans2QueryPathInfoRequest(5,1,1,False,True,True,FileAccessI" +
                            "nformation,1)\'");
                    this.ISmbAdapterInstance.Trans2QueryPathInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileAccessInformation, 1);
                    this.Manager.Comment("reaching state \'S150\'");
                    this.Manager.Comment("checking step \'return Trans2QueryPathInfoRequest\'");
                    this.Manager.Comment("reaching state \'S155\'");
                    int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTrans2QueryPathInfoResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTrans2QueryPathInfoResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2QueryPathInfoResponseInfo, null, new Trans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6Trans2QueryPathInfoResponseChecker)));
                    if ((temp21 == 0)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S165();
                        goto label13;
                    }
                    if ((temp21 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S165();
                        goto label13;
                    }
                    if ((temp21 == 2)) {
                        this.Manager.Comment("reaching state \'S164\'");
                        goto label13;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTrans2QueryPathInfoResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTrans2QueryPathInfoResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2QueryPathInfoResponseInfo, null, new Trans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6Trans2QueryPathInfoResponseChecker)));
                label13:
;
                    goto label14;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S124\'");
                    goto label14;
                }
                if ((temp22 == 2)) {
                    this.Manager.Comment("reaching state \'S125\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S135\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S144\'");
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker2)));
            label14:
;
                goto label15;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6TreeConnectResponseChecker)));
        label15:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S102() {
            this.Manager.Comment("reaching state \'S102\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S91");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileOpened,FileExists},True,Tr" +
                    "ue,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S114");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S114, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTrans2QueryPathInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S165() {
            this.Manager.Comment("reaching state \'S165\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorTrans2QueryPathInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S155");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S155");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6Trans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryPathInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryPathInfoResponse, state S155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryPathInfoResponse, state S155");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryPathInfoResponse, state S155");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryPathInfoResponse, state S155");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryPathInfoResponse, state S155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9313, MS-SMB_R30029");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9313");
            this.Manager.Checkpoint("MS-SMB_R30029");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S114");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S114");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S114");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S114");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S6NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8() {
            this.Manager.BeginTest("NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S14\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Disabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), true, true, false);
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S29\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    bool temp25;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp25);
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp25, "createPipeStatus of CreatePipeAndMailslot, state S39");
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,False,Disabled,[PcNet1,LanMan10,Wfw10,Lan" +
                            "Man12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, false, ((Microsoft.Protocol.TestSuites.Smb.SignState)(0)), this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S54\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedNegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S59\'");
                        this.Manager.Comment("executing step \'call NonExtendedSessionSetupRequest(Admin,2,0,0,False,{CapNtSmbs}" +
                                ",False,False,True)\'");
                        this.ISmbAdapterInstance.NonExtendedSessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, false, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8385");
                        this.Manager.Comment("reaching state \'S64\'");
                        this.Manager.Comment("checking step \'return NonExtendedSessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S69\'");
                        int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker3)));
                        if ((temp30 == 0)) {
                            this.Manager.Comment("reaching state \'S80\'");
                            goto label20;
                        }
                        if ((temp30 == 1)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S72();
                            goto label20;
                        }
                        if ((temp30 == 2)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S79();
                            goto label20;
                        }
                        if ((temp30 == 3)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S79();
                            goto label20;
                        }
                        if ((temp30 == 4)) {
                            NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S79();
                            goto label20;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedSessionSetupResponseInfo, null, new NonExtendedSessionSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker3)));
                    label20:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.NonExtendedNegotiateResponseInfo, null, new NonExtendedNegotiateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedNegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S14");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S14");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S29");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedNegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedNegotiateResponse(1,False,False,5,{CapNtSmbs,CapD" +
                    "fs,CapInfoLevelPassThru},Success)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureEnabled, "isSignatureEnabled of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NonExtendedNegotiateResponse, state S54");
            TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                "Element"}, new object[] {
                                Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NonExtendedNegotiateResponse, state S54, field selection Re" +
                    "p");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedNegotiateResponse, state S54");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,False,Succ" +
                    "ess)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,False,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S79() {
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                    "");
            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
            this.Manager.Comment("reaching state \'S92\'");
            int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8TreeConnectResponseChecker)));
            if ((temp29 == 0)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S104();
                goto label19;
            }
            if ((temp29 == 1)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S104();
                goto label19;
            }
            if ((temp29 == 2)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S104();
                goto label19;
            }
            if ((temp29 == 3)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S104();
                goto label19;
            }
            if ((temp29 == 4)) {
                NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S104();
                goto label19;
            }
            if ((temp29 == 5)) {
                this.Manager.Comment("reaching state \'S105\'");
                goto label19;
            }
            if ((temp29 == 6)) {
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,3,FileOpenIf,1,\"ExistTest.txt\",Disk,Fals" +
                        "e,False,False,False)\'");
                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 3, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "ExistTest.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S115\'");
                int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker2)));
                if ((temp28 == 0)) {
                    this.Manager.Comment("reaching state \'S126\'");
                    bool temp26;
                    this.Manager.Comment("executing step \'call CheckPreviousVersion(0,{1,2},out _)\'");
                    this.ISmbAdapterInstance.CheckPreviousVersion(0, this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<int, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>(), 1, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single})), 2, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp26);
                    this.Manager.Checkpoint("MS-SMB_R8554");
                    this.Manager.Comment("reaching state \'S136\'");
                    this.Manager.Comment("checking step \'return CheckPreviousVersion/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp26, "isSucceed of CheckPreviousVersion, state S136");
                    this.Manager.Comment("reaching state \'S145\'");
                    this.Manager.Comment("executing step \'call Trans2QueryPathInfoRequest(5,1,1,False,True,True,FileAccessI" +
                            "nformation,1)\'");
                    this.ISmbAdapterInstance.Trans2QueryPathInfoRequest(5, 1, 1, false, true, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileAccessInformation, 1);
                    this.Manager.Comment("reaching state \'S151\'");
                    this.Manager.Comment("checking step \'return Trans2QueryPathInfoRequest\'");
                    this.Manager.Comment("reaching state \'S156\'");
                    int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTrans2QueryPathInfoResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTrans2QueryPathInfoResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2QueryPathInfoResponseInfo, null, new Trans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8Trans2QueryPathInfoResponseChecker)));
                    if ((temp27 == 0)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S166();
                        goto label17;
                    }
                    if ((temp27 == 1)) {
                        NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S166();
                        goto label17;
                    }
                    if ((temp27 == 2)) {
                        this.Manager.Comment("reaching state \'S167\'");
                        goto label17;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTrans2QueryPathInfoResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTrans2QueryPathInfoResponseInfo, null, new ErrorTrans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTrans2QueryPathInfoResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.Trans2QueryPathInfoResponseInfo, null, new Trans2QueryPathInfoResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8Trans2QueryPathInfoResponseChecker)));
                label17:
;
                    goto label18;
                }
                if ((temp28 == 1)) {
                    this.Manager.Comment("reaching state \'S127\'");
                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                    this.ISmbAdapterInstance.SessionClose(1);
                    this.Manager.Checkpoint("MS-SMB_R2299");
                    this.Manager.Comment("reaching state \'S137\'");
                    this.Manager.Comment("checking step \'return SessionClose\'");
                    this.Manager.Comment("reaching state \'S146\'");
                    goto label18;
                }
                if ((temp28 == 2)) {
                    this.Manager.Comment("reaching state \'S128\'");
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.CreateResponseInfo, null, new CreateResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8CreateResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker2)));
            label18:
;
                goto label19;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8TreeConnectResponseChecker)));
        label19:
;
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S104() {
            this.Manager.Comment("reaching state \'S104\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S92");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S92");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileOpened,FileExists},True,Tr" +
                    "ue,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S115");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileOpened, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileExists, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S115, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTrans2QueryPathInfoResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NetworkSessionExpired,Tru" +
                    "e)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S166() {
            this.Manager.Comment("reaching state \'S166\'");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorTrans2QueryPathInfoResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS2076Implemented) {
            this.Manager.Comment("checking step \'event ErrorTrans2QueryPathInfoResponse(5,NetworkSessionExpired,Fal" +
                    "se)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2QueryPathInfoResponse, state S156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2QueryPathInfoResponse, state S156");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS2076Implemented, "isRS2076Implemented of ErrorTrans2QueryPathInfoResponse, state S156");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8Trans2QueryPathInfoResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2QueryPathInfoResponse(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2QueryPathInfoResponse, state S156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2QueryPathInfoResponse, state S156");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2QueryPathInfoResponse, state S156");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2QueryPathInfoResponse, state S156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2QueryPathInfoResponse, state S156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9313, MS-SMB_R30029");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9313");
            this.Manager.Checkpoint("MS-SMB_R30029");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S115");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S115");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S115");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S115");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker2(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,False,True,Succe" +
                    "ss)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        
        private void NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2S8NonExtendedSessionSetupResponseChecker3(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, bool isRS2322Implemented, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NonExtendedSessionSetupResponse(2,1,0,False,True,True,Succes" +
                    "s)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS2322Implemented, "isRS2322Implemented of NonExtendedSessionSetupResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NonExtendedSessionSetupResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2322, MS-SMB_R8380");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2322");
            this.Manager.Checkpoint("MS-SMB_R8380");
        }
        #endregion
    }
}
