//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8 : PtfTestClassBase {
        
        public AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTrans2SetFsInfoResponseAdditionalDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void Trans2SetFsInfoResponseAdditionalDelegate1(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseAdditionalDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseAdditionalInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponseAdditional");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo ErrorTrans2SetFsInfoResponseAdditionalInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTrans2SetFsInfoResponseAdditional");
        
        static System.Reflection.EventInfo Trans2SetFsInfoResponseAdditionalInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "Trans2SetFsInfoResponseAdditional");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTrans2SetFsInfoResponseAdditionalInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseAdditionalInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(Trans2SetFsInfoResponseAdditionalInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S14\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S35\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S42\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S49");
                    this.Manager.Comment("reaching state \'S56\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S63\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S70\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S77\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Admin,2,0,1,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 1, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, true, true);
                        this.Manager.Comment("reaching state \'S84\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S91\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0SessionSetupResponseAdditionalChecker)));
                        if ((temp4 == 0)) {
                            this.Manager.Comment("reaching state \'S98\'");
                            goto label3;
                        }
                        if ((temp4 == 1)) {
                            this.Manager.Comment("reaching state \'S99\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S111\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S117\'");
                            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0TreeConnectResponseChecker)));
                            if ((temp3 == 0)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124();
                                goto label2;
                            }
                            if ((temp3 == 1)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124();
                                goto label2;
                            }
                            if ((temp3 == 2)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124();
                                goto label2;
                            }
                            if ((temp3 == 3)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124();
                                goto label2;
                            }
                            if ((temp3 == 4)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124();
                                goto label2;
                            }
                            if ((temp3 == 5)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124();
                                goto label2;
                            }
                            if ((temp3 == 6)) {
                                this.Manager.Comment("reaching state \'S123\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test2.txt\",Disk,True,Fal" +
                                        "se,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S135\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S140\'");
                                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker2)));
                                if ((temp2 == 0)) {
                                    this.Manager.Comment("reaching state \'S145\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFsInfoRequestAdditional(5,1,1,0,True,FileFsControlI" +
                                            "nformaiton,AccessDenied)\'");
                                    this.ISmbAdapterInstance.Trans2SetFsInfoRequestAdditional(5, 1, 1, 0, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileFsControlInformaiton, ((Microsoft.Protocol.TestSuites.Smb.Trans2SetFsInfoResponseParameter)(1)));
                                    this.Manager.Comment("reaching state \'S160\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFsInfoRequestAdditional\'");
                                    this.Manager.Comment("reaching state \'S170\'");
                                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker3)));
                                    if ((temp1 == 0)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S180();
                                        goto label0;
                                    }
                                    if ((temp1 == 1)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S180();
                                        goto label0;
                                    }
                                    if ((temp1 == 2)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S180();
                                        goto label0;
                                    }
                                    if ((temp1 == 3)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S180();
                                        goto label0;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker3)));
                                label0:
;
                                    goto label1;
                                }
                                if ((temp2 == 1)) {
                                    this.Manager.Comment("reaching state \'S146\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S161\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S171\'");
                                    goto label1;
                                }
                                if ((temp2 == 2)) {
                                    this.Manager.Comment("reaching state \'S147\'");
                                    goto label1;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker2)));
                            label1:
;
                                goto label2;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0TreeConnectResponseChecker)));
                        label2:
;
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0SessionSetupResponseAdditionalChecker)));
                    label3:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S14");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S14");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S35");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S70");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S70, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0SessionSetupResponseAdditionalChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponseAdditional(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponseAdditional, state S91");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponseAdditional, state S91");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponseAdditional, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponseAdditional, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponseAdditional, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponseAdditional, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R2193, MS-SMB_R" +
                        "4143, MS-SMB_R2329, MS-SMB_R4784, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R2329");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S124() {
            this.Manager.Comment("reaching state \'S124\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S117");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S117");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S140");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S140, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,AccessDenied)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119311");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119311");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S180() {
            this.Manager.Comment("reaching state \'S180\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,StatusDataError)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusDataError, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119333");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119333");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S170");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorTrans2SetFsInfoResponseAdditionalChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S170");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S140");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S140");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S19\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S40\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S47\'");
                    bool temp5;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp5);
                    this.Manager.Comment("reaching state \'S54\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "createPipeStatus of CreatePipeAndMailslot, state S54");
                    this.Manager.Comment("reaching state \'S61\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S75\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S82\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Guest,2,0,0,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, true, true);
                        this.Manager.Comment("reaching state \'S89\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S96\'");
                        int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10SessionSetupResponseAdditionalChecker)));
                        if ((temp9 == 0)) {
                            this.Manager.Comment("reaching state \'S109\'");
                            goto label7;
                        }
                        if ((temp9 == 1)) {
                            this.Manager.Comment("reaching state \'S108\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S116\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S122\'");
                            int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10TreeConnectResponseChecker)));
                            if ((temp8 == 0)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134();
                                goto label6;
                            }
                            if ((temp8 == 1)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134();
                                goto label6;
                            }
                            if ((temp8 == 2)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134();
                                goto label6;
                            }
                            if ((temp8 == 3)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134();
                                goto label6;
                            }
                            if ((temp8 == 4)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134();
                                goto label6;
                            }
                            if ((temp8 == 5)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134();
                                goto label6;
                            }
                            if ((temp8 == 6)) {
                                this.Manager.Comment("reaching state \'S133\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,2,FileOpenIf,1,\"Test2.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 2, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S139\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S144\'");
                                int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker2)));
                                if ((temp7 == 0)) {
                                    this.Manager.Comment("reaching state \'S157\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFsInfoRequestAdditional(5,1,1,0,True,FileFsControlI" +
                                            "nformaiton,FileIdErrror)\'");
                                    this.ISmbAdapterInstance.Trans2SetFsInfoRequestAdditional(5, 1, 1, 0, true, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileFsControlInformaiton, Microsoft.Protocol.TestSuites.Smb.Trans2SetFsInfoResponseParameter.FileIdErrror);
                                    this.Manager.Comment("reaching state \'S168\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFsInfoRequestAdditional\'");
                                    this.Manager.Comment("reaching state \'S178\'");
                                    int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker3)));
                                    if ((temp6 == 0)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S186();
                                        goto label4;
                                    }
                                    if ((temp6 == 1)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S186();
                                        goto label4;
                                    }
                                    if ((temp6 == 2)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S186();
                                        goto label4;
                                    }
                                    if ((temp6 == 3)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S186();
                                        goto label4;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker3)));
                                label4:
;
                                    goto label5;
                                }
                                if ((temp7 == 1)) {
                                    this.Manager.Comment("reaching state \'S158\'");
                                    goto label5;
                                }
                                if ((temp7 == 2)) {
                                    this.Manager.Comment("reaching state \'S159\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S169\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S179\'");
                                    goto label5;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker2)));
                            label5:
;
                                goto label6;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10TreeConnectResponseChecker)));
                        label6:
;
                            goto label7;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10SessionSetupResponseAdditionalChecker)));
                    label7:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S19");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S19");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S40");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S40");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S75");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S75");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S75");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S75, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10SessionSetupResponseAdditionalChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponseAdditional(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponseAdditional, state S96");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponseAdditional, state S96");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponseAdditional, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponseAdditional, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponseAdditional, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponseAdditional, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R205555, MS-SMB_R8380, MS-SMB_R2193, MS-SMB_R" +
                        "4143, MS-SMB_R2329, MS-SMB_R4784, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R205555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R2329");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S134() {
            this.Manager.Comment("reaching state \'S134\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S122");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S122");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S144");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S144, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,StatusDataError)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusDataError, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119333");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119333");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S186() {
            this.Manager.Comment("reaching state \'S186\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S178");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S178");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,StatusInvalidHandle" +
                    ")\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusInvalidHandle, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119314");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119314");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorTrans2SetFsInfoResponseAdditionalChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S178");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S178");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S144");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S144");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S10ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S144");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S144");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S20\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S41\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S48\'");
                    bool temp10;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp10);
                    this.Manager.Comment("reaching state \'S55\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp10, "createPipeStatus of CreatePipeAndMailslot, state S55");
                    this.Manager.Comment("reaching state \'S62\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S76\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S83\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Admin,2,0,0,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,False,False)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, false, false);
                        this.Manager.Comment("reaching state \'S90\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S97\'");
                        int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker2)));
                        if ((temp11 == 0)) {
                            AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S110();
                            goto label8;
                        }
                        if ((temp11 == 1)) {
                            AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S110();
                            goto label8;
                        }
                        if ((temp11 == 2)) {
                            AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S110();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker2)));
                    label8:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S20");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S20");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S41");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S76");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S76");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S76");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S76, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S76");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,StatusSmbBadUid)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusSmbBadUid, messageStatus, "messageStatus of ErrorResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2326, MS-SMB_R4776, MS-SMB_R4777, MS-SMB_R23" +
                        "33, MS-SMB_R80172");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2326");
            this.Manager.Checkpoint("MS-SMB_R4776");
            this.Manager.Checkpoint("MS-SMB_R4777");
            this.Manager.Checkpoint("MS-SMB_R2333");
            this.Manager.Checkpoint("MS-SMB_R80172");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S110() {
            this.Manager.Comment("reaching state \'S110\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S12ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,MoreProcessingRequired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S97");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.MoreProcessingRequired, messageStatus, "messageStatus of ErrorResponse, state S97");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S15\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S36\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S43\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S50\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S50");
                    this.Manager.Comment("reaching state \'S57\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S64\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S71\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S78\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Guest,2,0,0,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, true, true);
                        this.Manager.Comment("reaching state \'S85\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S92\'");
                        int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2SessionSetupResponseAdditionalChecker)));
                        if ((temp16 == 0)) {
                            this.Manager.Comment("reaching state \'S101\'");
                            goto label12;
                        }
                        if ((temp16 == 1)) {
                            this.Manager.Comment("reaching state \'S100\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S112\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S118\'");
                            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2TreeConnectResponseChecker)));
                            if ((temp15 == 0)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126();
                                goto label11;
                            }
                            if ((temp15 == 1)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126();
                                goto label11;
                            }
                            if ((temp15 == 2)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126();
                                goto label11;
                            }
                            if ((temp15 == 3)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126();
                                goto label11;
                            }
                            if ((temp15 == 4)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126();
                                goto label11;
                            }
                            if ((temp15 == 5)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126();
                                goto label11;
                            }
                            if ((temp15 == 6)) {
                                this.Manager.Comment("reaching state \'S125\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,2,FileOpenIf,1,\"Test2.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 2, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S136\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S141\'");
                                int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker2)));
                                if ((temp14 == 0)) {
                                    this.Manager.Comment("reaching state \'S148\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFsInfoRequestAdditional(5,1,1,0,False,FileFsControl" +
                                            "Informaiton,Valid)\'");
                                    this.ISmbAdapterInstance.Trans2SetFsInfoRequestAdditional(5, 1, 1, 0, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileFsControlInformaiton, ((Microsoft.Protocol.TestSuites.Smb.Trans2SetFsInfoResponseParameter)(0)));
                                    this.Manager.Comment("reaching state \'S162\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFsInfoRequestAdditional\'");
                                    this.Manager.Comment("reaching state \'S172\'");
                                    int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.Trans2SetFsInfoResponseAdditionalInfo, null, new Trans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2Trans2SetFsInfoResponseAdditionalChecker)));
                                    if ((temp13 == 0)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S181();
                                        goto label9;
                                    }
                                    if ((temp13 == 1)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S181();
                                        goto label9;
                                    }
                                    if ((temp13 == 2)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S181();
                                        goto label9;
                                    }
                                    if ((temp13 == 3)) {
                                        this.Manager.Comment("reaching state \'S182\'");
                                        goto label9;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.Trans2SetFsInfoResponseAdditionalInfo, null, new Trans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2Trans2SetFsInfoResponseAdditionalChecker)));
                                label9:
;
                                    goto label10;
                                }
                                if ((temp14 == 1)) {
                                    this.Manager.Comment("reaching state \'S149\'");
                                    goto label10;
                                }
                                if ((temp14 == 2)) {
                                    this.Manager.Comment("reaching state \'S150\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S163\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S173\'");
                                    goto label10;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker2)));
                            label10:
;
                                goto label11;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2TreeConnectResponseChecker)));
                        label11:
;
                            goto label12;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2SessionSetupResponseAdditionalChecker)));
                    label12:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S15");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S15");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S36");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S36");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S71");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S71");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S71");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S71, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S71");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2SessionSetupResponseAdditionalChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponseAdditional(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponseAdditional, state S92");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponseAdditional, state S92");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponseAdditional, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponseAdditional, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponseAdditional, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponseAdditional, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R205555, MS-SMB_R8380, MS-SMB_R2193, MS-SMB_R" +
                        "4143, MS-SMB_R2329, MS-SMB_R4784, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R205555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R2329");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S126() {
            this.Manager.Comment("reaching state \'S126\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S118");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S118");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S141");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S141, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,StatusDataError)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusDataError, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119333");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119333");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S181() {
            this.Manager.Comment("reaching state \'S181\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S172");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorTrans2SetFsInfoResponseAdditionalChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S172");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2Trans2SetFsInfoResponseAdditionalChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFsInfoResponseAdditional(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFsInfoResponseAdditional, state S172");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFsInfoResponseAdditional, state S172");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFsInfoResponseAdditional, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFsInfoResponseAdditional, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFsInfoResponseAdditional, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9307");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9307");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S141");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S141");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S16\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S37\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S44\'");
                    bool temp17;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp17);
                    this.Manager.Comment("reaching state \'S51\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp17, "createPipeStatus of CreatePipeAndMailslot, state S51");
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S65\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S72\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S79\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Guest,2,0,0,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, true, true);
                        this.Manager.Comment("reaching state \'S86\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S93\'");
                        int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4SessionSetupResponseAdditionalChecker)));
                        if ((temp21 == 0)) {
                            this.Manager.Comment("reaching state \'S103\'");
                            goto label16;
                        }
                        if ((temp21 == 1)) {
                            this.Manager.Comment("reaching state \'S102\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S113\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S119\'");
                            int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4TreeConnectResponseChecker)));
                            if ((temp20 == 0)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128();
                                goto label15;
                            }
                            if ((temp20 == 1)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128();
                                goto label15;
                            }
                            if ((temp20 == 2)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128();
                                goto label15;
                            }
                            if ((temp20 == 3)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128();
                                goto label15;
                            }
                            if ((temp20 == 4)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128();
                                goto label15;
                            }
                            if ((temp20 == 5)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128();
                                goto label15;
                            }
                            if ((temp20 == 6)) {
                                this.Manager.Comment("reaching state \'S127\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,2,FileOpenIf,1,\"Test2.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 2, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.Comment("reaching state \'S137\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S142\'");
                                int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker2)));
                                if ((temp19 == 0)) {
                                    this.Manager.Comment("reaching state \'S151\'");
                                    this.Manager.Comment("executing step \'call Trans2SetFsInfoRequestAdditional(5,1,1,0,False,Invalid,Valid" +
                                            ")\'");
                                    this.ISmbAdapterInstance.Trans2SetFsInfoRequestAdditional(5, 1, 1, 0, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.Invalid, ((Microsoft.Protocol.TestSuites.Smb.Trans2SetFsInfoResponseParameter)(0)));
                                    this.Manager.Comment("reaching state \'S164\'");
                                    this.Manager.Comment("checking step \'return Trans2SetFsInfoRequestAdditional\'");
                                    this.Manager.Comment("reaching state \'S174\'");
                                    int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.Trans2SetFsInfoResponseAdditionalInfo, null, new Trans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4Trans2SetFsInfoResponseAdditionalChecker)));
                                    if ((temp18 == 0)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S183();
                                        goto label13;
                                    }
                                    if ((temp18 == 1)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S183();
                                        goto label13;
                                    }
                                    if ((temp18 == 2)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S183();
                                        goto label13;
                                    }
                                    if ((temp18 == 3)) {
                                        AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S183();
                                        goto label13;
                                    }
                                    if ((temp18 == 4)) {
                                        this.Manager.Comment("reaching state \'S184\'");
                                        goto label13;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.Trans2SetFsInfoResponseAdditionalInfo, null, new Trans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4Trans2SetFsInfoResponseAdditionalChecker)));
                                label13:
;
                                    goto label14;
                                }
                                if ((temp19 == 1)) {
                                    this.Manager.Comment("reaching state \'S152\'");
                                    goto label14;
                                }
                                if ((temp19 == 2)) {
                                    this.Manager.Comment("reaching state \'S153\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S165\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S175\'");
                                    goto label14;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker2)));
                            label14:
;
                                goto label15;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4TreeConnectResponseChecker)));
                        label15:
;
                            goto label16;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4SessionSetupResponseAdditionalChecker)));
                    label16:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S16");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S16");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S37");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S72");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S72, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4SessionSetupResponseAdditionalChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponseAdditional(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponseAdditional, state S93");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponseAdditional, state S93");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponseAdditional, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponseAdditional, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponseAdditional, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponseAdditional, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R205555, MS-SMB_R8380, MS-SMB_R2193, MS-SMB_R" +
                        "4143, MS-SMB_R2329, MS-SMB_R4784, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R205555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R2329");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S128() {
            this.Manager.Comment("reaching state \'S128\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S119");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S119");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S142");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S142, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,NotSupported)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119320");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119320");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S183() {
            this.Manager.Comment("reaching state \'S183\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,StatusDataError)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusDataError, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119333");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119333");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S174");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S174");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorTrans2SetFsInfoResponseAdditionalChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S174");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S174");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4Trans2SetFsInfoResponseAdditionalChecker(int messageId, int sessionId, int treeId, bool isSigned, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event Trans2SetFsInfoResponseAdditional(5,1,1,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of Trans2SetFsInfoResponseAdditional, state S174");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of Trans2SetFsInfoResponseAdditional, state S174");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of Trans2SetFsInfoResponseAdditional, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of Trans2SetFsInfoResponseAdditional, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of Trans2SetFsInfoResponseAdditional, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9307");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9307");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S142");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S4ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S142");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S17\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S38\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S45\'");
                    bool temp22;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp22);
                    this.Manager.Comment("reaching state \'S52\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp22, "createPipeStatus of CreatePipeAndMailslot, state S52");
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S73\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S80\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Guest,2,0,0,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, true, true);
                        this.Manager.Comment("reaching state \'S87\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S94\'");
                        int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6SessionSetupResponseAdditionalChecker)));
                        if ((temp26 == 0)) {
                            this.Manager.Comment("reaching state \'S105\'");
                            goto label20;
                        }
                        if ((temp26 == 1)) {
                            this.Manager.Comment("reaching state \'S104\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,False)\'" +
                                    "");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S114\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S120\'");
                            int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6TreeConnectResponseChecker)));
                            if ((temp25 == 0)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130();
                                goto label19;
                            }
                            if ((temp25 == 1)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130();
                                goto label19;
                            }
                            if ((temp25 == 2)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130();
                                goto label19;
                            }
                            if ((temp25 == 3)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130();
                                goto label19;
                            }
                            if ((temp25 == 4)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130();
                                goto label19;
                            }
                            if ((temp25 == 5)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130();
                                goto label19;
                            }
                            if ((temp25 == 6)) {
                                this.Manager.Comment("reaching state \'S129\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test2.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S138();
                                goto label19;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6TreeConnectResponseChecker)));
                        label19:
;
                            goto label20;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6SessionSetupResponseAdditionalChecker)));
                    label20:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S17");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S17");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S38");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S38");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S73");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S73, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6SessionSetupResponseAdditionalChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponseAdditional(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponseAdditional, state S94");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponseAdditional, state S94");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponseAdditional, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponseAdditional, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponseAdditional, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponseAdditional, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R205555, MS-SMB_R8380, MS-SMB_R2193, MS-SMB_R" +
                        "4143, MS-SMB_R2329, MS-SMB_R4784, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R205555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R2329");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S130() {
            this.Manager.Comment("reaching state \'S130\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S120");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S120");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S138() {
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateRequestInfo, null, new CreateRequestDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S143\'");
            int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker2)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call Trans2SetFsInfoRequestAdditional(5,1,1,0,False,FileFsControl" +
                        "Informaiton,AccessDenied)\'");
                this.ISmbAdapterInstance.Trans2SetFsInfoRequestAdditional(5, 1, 1, 0, false, Microsoft.Protocol.TestSuites.Smb.InformationLevel.FileFsControlInformaiton, ((Microsoft.Protocol.TestSuites.Smb.Trans2SetFsInfoResponseParameter)(1)));
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return Trans2SetFsInfoRequestAdditional\'");
                this.Manager.Comment("reaching state \'S176\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker3)));
                if ((temp23 == 0)) {
                    AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S185();
                    goto label17;
                }
                if ((temp23 == 1)) {
                    AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S185();
                    goto label17;
                }
                if ((temp23 == 2)) {
                    AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S185();
                    goto label17;
                }
                if ((temp23 == 3)) {
                    AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S185();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTrans2SetFsInfoResponseAdditionalInfo, null, new ErrorTrans2SetFsInfoResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker3)));
            label17:
;
                goto label18;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S177\'");
                goto label18;
            }
            if ((temp24 == 2)) {
                this.Manager.Comment("reaching state \'S156\'");
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.CreateResponseInfo, null, new CreateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6CreateResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker2)));
        label18:
;
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,False,{FileCreated,FileDoesNotExist}," +
                    "True,True,True,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of CreateResponse, state S143");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S143, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNoStream, "isNoStream of CreateResponse, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R9612, MS-SMB_R9614");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R9612");
            this.Manager.Checkpoint("MS-SMB_R9614");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,StatusDataError)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusDataError, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119333");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119333");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S185() {
            this.Manager.Comment("reaching state \'S185\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,NetworkSessionExpir" +
                    "ed)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S176");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S176");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,AccessDenied)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R119311");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R119311");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorTrans2SetFsInfoResponseAdditionalChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorTrans2SetFsInfoResponseAdditional(5,InvalidParameter)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorTrans2SetFsInfoResponseAdditional, state S176");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidParameter, messageStatus, "messageStatus of ErrorTrans2SetFsInfoResponseAdditional, state S176");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S143");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S6ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S143");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8")]
        public virtual void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8() {
            this.Manager.BeginTest("AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S18\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("executing step \'call ServerSetup(Ntfs,Enabled,True,True,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(0)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, true, false);
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S39\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S46\'");
                    bool temp27;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp27);
                    this.Manager.Comment("reaching state \'S53\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp27, "createPipeStatus of CreatePipeAndMailslot, state S53");
                    this.Manager.Comment("reaching state \'S60\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S67\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S74\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S81\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequestAdditional(Guest,2,0,0,True,{CapNtSmbs,Ca" +
                                "pExtendedSecurity},False,False,True,True,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequestAdditional(((Microsoft.Protocol.TestSuites.Smb.AccountType)(1)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true, true, true);
                        this.Manager.Comment("reaching state \'S88\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequestAdditional\'");
                        this.Manager.Comment("reaching state \'S95\'");
                        int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8SessionSetupResponseAdditionalChecker)));
                        if ((temp29 == 0)) {
                            this.Manager.Comment("reaching state \'S107\'");
                            goto label22;
                        }
                        if ((temp29 == 1)) {
                            this.Manager.Comment("reaching state \'S106\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,False)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false);
                            this.Manager.Comment("reaching state \'S115\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S121\'");
                            int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8TreeConnectResponseChecker)));
                            if ((temp28 == 0)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131();
                                goto label21;
                            }
                            if ((temp28 == 1)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131();
                                goto label21;
                            }
                            if ((temp28 == 2)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131();
                                goto label21;
                            }
                            if ((temp28 == 3)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131();
                                goto label21;
                            }
                            if ((temp28 == 4)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131();
                                goto label21;
                            }
                            if ((temp28 == 5)) {
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131();
                                goto label21;
                            }
                            if ((temp28 == 6)) {
                                this.Manager.Comment("reaching state \'S132\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test2.txt\",Disk,False,Fa" +
                                        "lse,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), false, false, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S138();
                                goto label21;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker1)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker2)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker3)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker4)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker5)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8TreeConnectResponseChecker)));
                        label21:
;
                            goto label22;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorResponseChecker)), new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SessionSetupResponseAdditionalInfo, null, new SessionSetupResponseAdditionalDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8SessionSetupResponseAdditionalChecker)));
                    label22:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S18");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8, sutPlatform, "sutPlatform of SmbConnectionResponse, state S18");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S39");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S74");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S74");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S74");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S74, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8SessionSetupResponseAdditionalChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponseAdditional(2,1,0,False,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponseAdditional, state S95");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponseAdditional, state S95");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, securitySignatureValue, "securitySignatureValue of SessionSetupResponseAdditional, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of SessionSetupResponseAdditional, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGuestAccount, "isGuestAccount of SessionSetupResponseAdditional, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponseAdditional, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R205555, MS-SMB_R8380, MS-SMB_R2193, MS-SMB_R" +
                        "4143, MS-SMB_R2329, MS-SMB_R4784, MS-SMB_R8390");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R205555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R2329");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R8390");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S121");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S131() {
            this.Manager.Comment("reaching state \'S131\'");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S121");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S121");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S121");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S121");
        }
        
        private void AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8S8TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,True,Disk,Success,False,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSigned, "isSigned of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S121");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S121");
        }
        #endregion
    }
}
