//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.2.2498.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RequirementCoverage_CopyChunk_AccessDenied : PtfTestClassBase {
        
        public RequirementCoverage_CopyChunk_AccessDenied() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000000");
        }
        
        #region Expect Delegates
        public delegate void ServerSetupResponseDelegate1(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk);
        
        public delegate void NegotiateResponseDelegate1(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void SessionSetupResponseDelegate1(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void ErrorTreeConnectResponseDelegate1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented);
        
        public delegate void TreeConnectResponseDelegate1(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature);
        
        public delegate void SmbConnectionResponseDelegate1(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform);
        
        public delegate void CreateRequestDelegate1();
        
        public delegate void CreateResponseDelegate1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        
        public delegate void FsctlSrvRequestResumeKeyResponseDelegate1(int messageId, int sessionId, int treeId, bool isSigned, string copychunkResumeKey, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo SmbConnectionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SmbConnectionResponse");
        
        static System.Reflection.EventInfo ServerSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter), "ServerSetupResponse");
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "NegotiateResponse");
        
        static System.Reflection.EventInfo ErrorResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorResponse");
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "SessionSetupResponse");
        
        static System.Reflection.EventInfo ErrorTreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "ErrorTreeConnectResponse");
        
        static System.Reflection.EventInfo TreeConnectResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "TreeConnectResponse");
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo FsctlSrvRequestResumeKeyResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "FsctlSrvRequestResumeKeyResponse");
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter), "CreateRequest", typeof(int), typeof(int), typeof(int), typeof(int), typeof(Microsoft.Protocol.TestSuites.Smb.CreateDisposition), typeof(int), typeof(string), typeof(Microsoft.Protocol.TestSuites.Smb.ShareType), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocol.TestSuites.Smb.ISmbAdapter ISmbAdapterInstance;
        
        private Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter IServerSetupAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISmbAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.ISmbAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.ISmbAdapter))));
            this.IServerSetupAdapterInstance = ((Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocol.TestSuites.Smb.IServerSetupAdapter))));
            this.Manager.Subscribe(ServerSetupResponseInfo, this.IServerSetupAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(ErrorTreeConnectResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(FsctlSrvRequestResumeKeyResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(NegotiateResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(SmbConnectionResponseInfo, this.ISmbAdapterInstance);
            this.Manager.Subscribe(TreeConnectResponseInfo, this.ISmbAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_CopyChunk_AccessDeniedS0() {
            this.Manager.BeginTest("RequirementCoverage_CopyChunk_AccessDeniedS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S6\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Enabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, false, false);
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S15\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S18\'");
                    bool temp0;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp0);
                    this.Manager.Comment("reaching state \'S21\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp0, "createPipeStatus of CreatePipeAndMailslot, state S21");
                    this.Manager.Comment("reaching state \'S24\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S27\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S30\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S33\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S36\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S39\'");
                        int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0SessionSetupResponseChecker)));
                        if ((temp7 == 0)) {
                            this.Manager.Comment("reaching state \'S42\'");
                            goto label6;
                        }
                        if ((temp7 == 1)) {
                            this.Manager.Comment("reaching state \'S43\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S48\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S51\'");
                            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0TreeConnectResponseChecker)));
                            if ((temp6 == 0)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS55();
                                goto label5;
                            }
                            if ((temp6 == 1)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS55();
                                goto label5;
                            }
                            if ((temp6 == 2)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS55();
                                goto label5;
                            }
                            if ((temp6 == 3)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS55();
                                goto label5;
                            }
                            if ((temp6 == 4)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS55();
                                goto label5;
                            }
                            if ((temp6 == 5)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS55();
                                goto label5;
                            }
                            if ((temp6 == 6)) {
                                this.Manager.Comment("reaching state \'S54\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,True,Fal" +
                                        "se,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                this.Manager.Comment("reaching state \'S60\'");
                                this.Manager.Comment("checking step \'return CreateRequest\'");
                                this.Manager.Comment("reaching state \'S62\'");
                                int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker12)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker13)));
                                if ((temp5 == 0)) {
                                    this.Manager.Comment("reaching state \'S64\'");
                                    this.Manager.Comment("executing step \'call CreateRequest(5,1,1,2,FileOpenIf,1,\"Test2.txt\",Disk,True,Fal" +
                                            "se,False,False)\'");
                                    this.ISmbAdapterInstance.CreateRequest(5, 1, 1, 2, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test2.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, false, false, false);
                                    this.Manager.Comment("reaching state \'S69\'");
                                    this.Manager.Comment("checking step \'return CreateRequest\'");
                                    this.Manager.Comment("reaching state \'S72\'");
                                    int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0CreateResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker10)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker11)));
                                    if ((temp4 == 0)) {
                                        this.Manager.Comment("reaching state \'S75\'");
                                        this.Manager.Comment("executing step \'call FsctlSrvRequestResumeKeyRequest(6,1,1,True,1)\'");
                                        this.ISmbAdapterInstance.FsctlSrvRequestResumeKeyRequest(6, 1, 1, true, 1);
                                        this.Manager.Comment("reaching state \'S78\'");
                                        this.Manager.Comment("checking step \'return FsctlSrvRequestResumeKeyRequest\'");
                                        this.Manager.Comment("reaching state \'S80\'");
                                        int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.FsctlSrvRequestResumeKeyResponseInfo, null, new FsctlSrvRequestResumeKeyResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0FsctlSrvRequestResumeKeyResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.FsctlSrvRequestResumeKeyResponseInfo, null, new FsctlSrvRequestResumeKeyResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0FsctlSrvRequestResumeKeyResponseChecker1)));
                                        if ((temp3 == 0)) {
                                            this.Manager.Comment("reaching state \'S84\'");
                                            this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                            this.ISmbAdapterInstance.SessionClose(1);
                                            this.Manager.Checkpoint("MS-SMB_R2299");
                                            this.Manager.Comment("reaching state \'S88\'");
                                            this.Manager.Comment("checking step \'return SessionClose\'");
                                            this.Manager.Comment("reaching state \'S91\'");
                                            goto label2;
                                        }
                                        if ((temp3 == 1)) {
                                            this.Manager.Comment("reaching state \'S85\'");
                                            goto label2;
                                        }
                                        if ((temp3 == 2)) {
                                            this.Manager.Comment("reaching state \'S82\'");
                                            this.Manager.Comment("executing step \'call FsctlSrvCopyChunkRequest(7,1,1,True,0,\"Key1\",2,4,0)\'");
                                            this.ISmbAdapterInstance.FsctlSrvCopyChunkRequest(7, 1, 1, true, 0, "Key1", 2, 4, 0);
                                            this.Manager.Comment("reaching state \'S86\'");
                                            this.Manager.Comment("checking step \'return FsctlSrvCopyChunkRequest\'");
                                            this.Manager.Comment("reaching state \'S89\'");
                                            int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker5)));
                                            if ((temp1 == 0)) {
                                                this.Manager.Comment("reaching state \'S92\'");
                                                goto label0;
                                            }
                                            if ((temp1 == 1)) {
                                                this.Manager.Comment("reaching state \'S93\'");
                                                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                                this.ISmbAdapterInstance.SessionClose(1);
                                                this.Manager.Checkpoint("MS-SMB_R2299");
                                                this.Manager.Comment("reaching state \'S98\'");
                                                this.Manager.Comment("checking step \'return SessionClose\'");
                                                this.Manager.Comment("reaching state \'S100\'");
                                                goto label0;
                                            }
                                            if ((temp1 == 2)) {
                                                this.Manager.Comment("reaching state \'S94\'");
                                                goto label0;
                                            }
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker5)));
                                        label0:
;
                                            goto label2;
                                        }
                                        if ((temp3 == 3)) {
                                            this.Manager.Comment("reaching state \'S83\'");
                                            this.Manager.Comment("executing step \'call FsctlSrvCopyChunkRequest(7,1,1,True,0,\"Key1\",2,4,0)\'");
                                            this.ISmbAdapterInstance.FsctlSrvCopyChunkRequest(7, 1, 1, true, 0, "Key1", 2, 4, 0);
                                            this.Manager.Comment("reaching state \'S87\'");
                                            this.Manager.Comment("checking step \'return FsctlSrvCopyChunkRequest\'");
                                            this.Manager.Comment("reaching state \'S90\'");
                                            int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker7)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker8)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker9)));
                                            if ((temp2 == 0)) {
                                                this.Manager.Comment("reaching state \'S95\'");
                                                goto label1;
                                            }
                                            if ((temp2 == 1)) {
                                                this.Manager.Comment("reaching state \'S96\'");
                                                goto label1;
                                            }
                                            if ((temp2 == 2)) {
                                                RequirementCoverage_CopyChunk_AccessDeniedS97();
                                                goto label1;
                                            }
                                            if ((temp2 == 3)) {
                                                RequirementCoverage_CopyChunk_AccessDeniedS97();
                                                goto label1;
                                            }
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker6)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker7)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker8)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker9)));
                                        label1:
;
                                            goto label2;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.FsctlSrvRequestResumeKeyResponseInfo, null, new FsctlSrvRequestResumeKeyResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0FsctlSrvRequestResumeKeyResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.FsctlSrvRequestResumeKeyResponseInfo, null, new FsctlSrvRequestResumeKeyResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0FsctlSrvRequestResumeKeyResponseChecker1)));
                                    label2:
;
                                        goto label3;
                                    }
                                    if ((temp4 == 1)) {
                                        this.Manager.Comment("reaching state \'S76\'");
                                        this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                        this.ISmbAdapterInstance.SessionClose(1);
                                        this.Manager.Checkpoint("MS-SMB_R2299");
                                        this.Manager.Comment("reaching state \'S79\'");
                                        this.Manager.Comment("checking step \'return SessionClose\'");
                                        this.Manager.Comment("reaching state \'S81\'");
                                        goto label3;
                                    }
                                    if ((temp4 == 2)) {
                                        this.Manager.Comment("reaching state \'S77\'");
                                        goto label3;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0CreateResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker10)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker11)));
                                label3:
;
                                    goto label4;
                                }
                                if ((temp5 == 1)) {
                                    this.Manager.Comment("reaching state \'S65\'");
                                    goto label4;
                                }
                                if ((temp5 == 2)) {
                                    this.Manager.Comment("reaching state \'S66\'");
                                    this.Manager.Comment("executing step \'call SessionClose(1)\'");
                                    this.ISmbAdapterInstance.SessionClose(1);
                                    this.Manager.Checkpoint("MS-SMB_R2299");
                                    this.Manager.Comment("reaching state \'S70\'");
                                    this.Manager.Comment("checking step \'return SessionClose\'");
                                    this.Manager.Comment("reaching state \'S73\'");
                                    goto label4;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.CreateResponseInfo, null, new CreateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0CreateResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker12)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker13)));
                            label4:
;
                                goto label5;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0TreeConnectResponseChecker)));
                        label5:
;
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0SessionSetupResponseChecker)));
                    label6:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS0SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S6");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S6");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S15");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S30");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S30, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S39");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS55() {
            this.Manager.Comment("reaching state \'S55\'");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S51");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0CreateResponseChecker(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(4,1,1,0,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 0, fid, "fid of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S62");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S62, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0CreateResponseChecker1(int messageId, int sessionId, int treeId, int fid, bool isSigned, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.CreateAction> createAction, bool isFileIdZero, bool isVolumeGuidZero, bool isDirectoryZero, bool isByteCountZero, bool isNoStream, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event CreateResponse(5,1,1,1,True,{FileCreated,FileDoesNotExist},T" +
                    "rue,True,True,True,True,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, fid, "fid of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of CreateResponse, state S72");
                TestManagerHelpers.AssertNotNull(this.Manager, createAction, "createAction of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.CreateAction, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileCreated, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.CreateAction.FileDoesNotExist, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), createAction.Rep, "createAction of CreateResponse, state S72, field selection Rep");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isFileIdZero, "isFileIdZero of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isVolumeGuidZero, "isVolumeGuidZero of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isDirectoryZero, "isDirectoryZero of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isByteCountZero, "isByteCountZero of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNoStream, "isNoStream of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of CreateResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R30081, MS-SMB_R30065");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R30081");
            this.Manager.Checkpoint("MS-SMB_R30065");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(6,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorResponse, state S80");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S80");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(6,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of ErrorResponse, state S80");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S80");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0FsctlSrvRequestResumeKeyResponseChecker(int messageId, int sessionId, int treeId, bool isSigned, string copychunkResumeKey, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FsctlSrvRequestResumeKeyResponse(6,1,1,True,\"Key2\",Success)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<string>(this.Manager, "Key2", copychunkResumeKey, "copychunkResumeKey of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FsctlSrvRequestResumeKeyResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9397, MS-SMB_R30022");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9397");
            this.Manager.Checkpoint("MS-SMB_R30022");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S89");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S89");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S89");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,ObjectNameNotFound)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotFound, messageStatus, "messageStatus of ErrorResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2445");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2445");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0FsctlSrvRequestResumeKeyResponseChecker1(int messageId, int sessionId, int treeId, bool isSigned, string copychunkResumeKey, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event FsctlSrvRequestResumeKeyResponse(6,1,1,True,\"Key1\",Success)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, messageId, "messageId of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<string>(this.Manager, "Key1", copychunkResumeKey, "copychunkResumeKey of FsctlSrvRequestResumeKeyResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of FsctlSrvRequestResumeKeyResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R9397, MS-SMB_R30022");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R9397");
            this.Manager.Checkpoint("MS-SMB_R30022");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker6(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,ObjectNameNotFound)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.ObjectNameNotFound, messageStatus, "messageStatus of ErrorResponse, state S90");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker7(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S90");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker8(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S90");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S90");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS97() {
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("executing step \'call SessionClose(1)\'");
            this.ISmbAdapterInstance.SessionClose(1);
            this.Manager.Checkpoint("MS-SMB_R2299");
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return SessionClose\'");
            this.Manager.Comment("reaching state \'S101\'");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker9(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(7,AccessDenied)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, messageId, "messageId of ErrorResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.AccessDenied, messageStatus, "messageStatus of ErrorResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4997, MS-SMB_R2447");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4997");
            this.Manager.Checkpoint("MS-SMB_R2447");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker10(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S72");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S72");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker11(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(5,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, messageId, "messageId of ErrorResponse, state S72");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S72");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker12(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S62");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S62");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS0ErrorResponseChecker13(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,BadImpersonationLevel)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S62");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.BadImpersonationLevel, messageStatus, "messageStatus of ErrorResponse, state S62");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_CopyChunk_AccessDeniedS2() {
            this.Manager.BeginTest("RequirementCoverage_CopyChunk_AccessDeniedS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S7\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Enabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, false, false);
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S16\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S19\'");
                    bool temp8;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp8);
                    this.Manager.Comment("reaching state \'S22\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "createPipeStatus of CreatePipeAndMailslot, state S22");
                    this.Manager.Comment("reaching state \'S25\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S28\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S31\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S34\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S37\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S40\'");
                        int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2SessionSetupResponseChecker)));
                        if ((temp11 == 0)) {
                            this.Manager.Comment("reaching state \'S45\'");
                            goto label9;
                        }
                        if ((temp11 == 1)) {
                            this.Manager.Comment("reaching state \'S44\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,False,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, false, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S49\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S52\'");
                            int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2TreeConnectResponseChecker)));
                            if ((temp10 == 0)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS57();
                                goto label8;
                            }
                            if ((temp10 == 1)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS57();
                                goto label8;
                            }
                            if ((temp10 == 2)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS57();
                                goto label8;
                            }
                            if ((temp10 == 3)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS57();
                                goto label8;
                            }
                            if ((temp10 == 4)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS57();
                                goto label8;
                            }
                            if ((temp10 == 5)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS57();
                                goto label8;
                            }
                            if ((temp10 == 6)) {
                                this.Manager.Comment("reaching state \'S56\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,True,Tru" +
                                        "e,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, true, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                RequirementCoverage_CopyChunk_AccessDeniedS61();
                                goto label8;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2TreeConnectResponseChecker)));
                        label8:
;
                            goto label9;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2SessionSetupResponseChecker)));
                    label9:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S7");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S7");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S16");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S16");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S16");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S16");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S16");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S16");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S31");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S31, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S40");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S40");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS57() {
            this.Manager.Comment("reaching state \'S57\'");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S52");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S52");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS61() {
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequirementCoverage_CopyChunk_AccessDenied.CreateRequestInfo, null, new CreateRequestDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S63\'");
            int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker2)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("executing step \'call SessionClose(1)\'");
                this.ISmbAdapterInstance.SessionClose(1);
                this.Manager.Checkpoint("MS-SMB_R2299");
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("checking step \'return SessionClose\'");
                this.Manager.Comment("reaching state \'S74\'");
                goto label7;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S68\'");
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker2)));
        label7:
;
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NotSupported)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S63");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NotSupported, messageStatus, "messageStatus of ErrorResponse, state S63");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS2ErrorResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(4,NetworkSessionExpired)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, messageId, "messageId of ErrorResponse, state S63");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S63");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(), Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Win7_Win2K8R2")]
        public virtual void RequirementCoverage_CopyChunk_AccessDeniedS4() {
            this.Manager.BeginTest("RequirementCoverage_CopyChunk_AccessDeniedS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call SmbConnectionRequest()\'");
            this.ISmbAdapterInstance.SmbConnectionRequest();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SmbConnectionRequest\'");
            this.Manager.Comment("reaching state \'S8\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4SmbConnectionResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("executing step \'call ServerSetup(Fat,Enabled,True,False,False)\'");
                this.IServerSetupAdapterInstance.ServerSetup(((Microsoft.Protocol.TestSuites.Smb.FileSystemType)(1)), ((Microsoft.Protocol.TestSuites.Smb.SignState)(1)), true, false, false);
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("checking step \'return ServerSetup\'");
                this.Manager.Comment("reaching state \'S17\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ServerSetupResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S20\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CreatePipeAndMailslot({\"Pipe1\"},{\"Mailslot1\"},out _)\'");
                    this.IServerSetupAdapterInstance.CreatePipeAndMailslot(this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Pipe1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), this.Make<Microsoft.Modeling.Set<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<string, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<string, Microsoft.Xrt.Runtime.Singleton>(), "Mailslot1", this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                    "Element"}, new object[] {
                                                    Microsoft.Xrt.Runtime.Singleton.Single}))}), out temp12);
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("checking step \'return CreatePipeAndMailslot/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp12, "createPipeStatus of CreatePipeAndMailslot, state S23");
                    this.Manager.Comment("reaching state \'S26\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest(1,True,Required,[PcNet1,LanMan10,Wfw10,LanM" +
                            "an12,LanMan21,NtLanMan])\'");
                    this.ISmbAdapterInstance.NegotiateRequest(1, true, Microsoft.Protocol.TestSuites.Smb.SignState.Required, this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocol.TestSuites.Smb.Dialect.PcNet1,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan10,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocol.TestSuites.Smb.Dialect.Wfw10,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan12,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocol.TestSuites.Smb.Dialect.LanMan21,
                                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>>(new string[] {
                                                                                                            "Head",
                                                                                                            "Tail"}, new object[] {
                                                                                                            Microsoft.Protocol.TestSuites.Smb.Dialect.NtLanMan,
                                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocol.TestSuites.Smb.Dialect>)(null))})})})})})})}));
                    this.Manager.Comment("reaching state \'S29\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S32\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4NegotiateResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Comment("executing step \'call SessionSetupRequest(Admin,2,0,0,True,{CapNtSmbs,CapExtendedS" +
                                "ecurity},False,False,True)\'");
                        this.ISmbAdapterInstance.SessionSetupRequest(((Microsoft.Protocol.TestSuites.Smb.AccountType)(0)), 2, 0, 0, true, this.Make<Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities>>(new string[] {
                                        "Rep"}, new object[] {
                                        Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                            "Element"}, new object[] {
                                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                        "Element"}, new object[] {
                                                        Microsoft.Xrt.Runtime.Singleton.Single}))}), false, false, true);
                        this.Manager.Checkpoint("MS-SMB_R8388");
                        this.Manager.Comment("reaching state \'S38\'");
                        this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                        this.Manager.Comment("reaching state \'S41\'");
                        int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4SessionSetupResponseChecker)));
                        if ((temp14 == 0)) {
                            this.Manager.Comment("reaching state \'S47\'");
                            goto label11;
                        }
                        if ((temp14 == 1)) {
                            this.Manager.Comment("reaching state \'S46\'");
                            this.Manager.Comment("executing step \'call TreeConnectRequest(3,1,True,True,True,\"Share1\",Disk,True)\'");
                            this.ISmbAdapterInstance.TreeConnectRequest(3, 1, true, true, true, "Share1", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true);
                            this.Manager.Comment("reaching state \'S50\'");
                            this.Manager.Comment("checking step \'return TreeConnectRequest\'");
                            this.Manager.Comment("reaching state \'S53\'");
                            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4TreeConnectResponseChecker)));
                            if ((temp13 == 0)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS58();
                                goto label10;
                            }
                            if ((temp13 == 1)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS58();
                                goto label10;
                            }
                            if ((temp13 == 2)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS58();
                                goto label10;
                            }
                            if ((temp13 == 3)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS58();
                                goto label10;
                            }
                            if ((temp13 == 4)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS58();
                                goto label10;
                            }
                            if ((temp13 == 5)) {
                                RequirementCoverage_CopyChunk_AccessDeniedS58();
                                goto label10;
                            }
                            if ((temp13 == 6)) {
                                this.Manager.Comment("reaching state \'S59\'");
                                this.Manager.Comment("executing step \'call CreateRequest(4,1,1,1,FileOpenIf,1,\"Test1.txt\",Disk,True,Tru" +
                                        "e,False,False)\'");
                                this.ISmbAdapterInstance.CreateRequest(4, 1, 1, 1, Microsoft.Protocol.TestSuites.Smb.CreateDisposition.FileOpenIf, 1, "Test1.txt", ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), true, true, false, false);
                                this.Manager.AddReturn(CreateRequestInfo, null);
                                RequirementCoverage_CopyChunk_AccessDeniedS61();
                                goto label10;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker1)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker2)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker3)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker4)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorTreeConnectResponseInfo, null, new ErrorTreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker5)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.TreeConnectResponseInfo, null, new TreeConnectResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4TreeConnectResponseChecker)));
                        label10:
;
                            goto label11;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ErrorResponseInfo, null, new ErrorResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ErrorResponseChecker)), new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4SessionSetupResponseChecker)));
                    label11:
;
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4NegotiateResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.ServerSetupResponseInfo, null, new ServerSetupResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4ServerSetupResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequirementCoverage_CopyChunk_AccessDenied.SmbConnectionResponseInfo, null, new SmbConnectionResponseDelegate1(this.RequirementCoverage_CopyChunk_AccessDeniedS4SmbConnectionResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4SmbConnectionResponseChecker(Microsoft.Protocol.TestSuites.Smb.Platform clientPlatform, Microsoft.Protocol.TestSuites.Smb.Platform sutPlatform) {
            this.Manager.Comment("checking step \'event SmbConnectionResponse(Win7,Win2K8R2)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win7, clientPlatform, "clientPlatform of SmbConnectionResponse, state S8");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.Platform>(this.Manager, Microsoft.Protocol.TestSuites.Smb.Platform.Win2K8R2, sutPlatform, "sutPlatform of SmbConnectionResponse, state S8");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ServerSetupResponseChecker(int totalBytesWritten, bool isSupportInfoLevelPassthru, bool isSupportNtSmb, bool isRapServerActive, bool isSupportResumeKey, bool isSupportCopyChunk) {
            this.Manager.Comment("checking step \'event ServerSetupResponse(1,True,True,True,True,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, totalBytesWritten, "totalBytesWritten of ServerSetupResponse, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportInfoLevelPassthru, "isSupportInfoLevelPassthru of ServerSetupResponse, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportNtSmb, "isSupportNtSmb of ServerSetupResponse, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRapServerActive, "isRapServerActive of ServerSetupResponse, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportResumeKey, "isSupportResumeKey of ServerSetupResponse, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportCopyChunk, "isSupportCopyChunk of ServerSetupResponse, state S17");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4NegotiateResponseChecker(int messageId, bool isSignatureRequired, bool isSignatureEnabled, int dialectIndex, Microsoft.Modeling.Set<Microsoft.Protocol.TestSuites.Smb.Capabilities> serverCapabilities, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event NegotiateResponse(1,False,True,5,{CapNtSmbs,CapExtendedSecur" +
                    "ity,CapDfs,CapInfoLevelPassThru},Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, messageId, "messageId of NegotiateResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSignatureRequired, "isSignatureRequired of NegotiateResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSignatureEnabled, "isSignatureEnabled of NegotiateResponse, state S32");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, dialectIndex, "dialectIndex of NegotiateResponse, state S32");
                TestManagerHelpers.AssertNotNull(this.Manager, serverCapabilities, "serverCapabilities of NegotiateResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Xrt.Runtime.RuntimeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>>(this.Manager, Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.UpdateMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocol.TestSuites.Smb.Capabilities, Microsoft.Xrt.Runtime.Singleton>(), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapNtSmbs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                                "Element"}, new object[] {
                                                Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapExtendedSecurity, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                            "Element"}, new object[] {
                                            Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapDfs, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                        "Element"}, new object[] {
                                        Microsoft.Xrt.Runtime.Singleton.Single})), Microsoft.Protocol.TestSuites.Smb.Capabilities.CapInfoLevelPassThru, this.Make<Microsoft.Xrt.Runtime.RuntimeMapElement<Microsoft.Xrt.Runtime.Singleton>>(new string[] {
                                    "Element"}, new object[] {
                                    Microsoft.Xrt.Runtime.Singleton.Single})), serverCapabilities.Rep, "serverCapabilities of NegotiateResponse, state S32, field selection Rep");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of NegotiateResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R2308, MS-SMB_R4747");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R2308");
            this.Manager.Checkpoint("MS-SMB_R4747");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event ErrorResponse(2,NetworkSessionExpired)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of ErrorResponse, state S41");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorResponse, state S41");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R4732, MS-SMB_R4765");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R4732");
            this.Manager.Checkpoint("MS-SMB_R4765");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4SessionSetupResponseChecker(int messageId, int sessionId, int securitySignatureValue, bool isSigned, bool isGuestAccount, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(2,1,1,True,False,Success)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, messageId, "messageId of SessionSetupResponse, state S41");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of SessionSetupResponse, state S41");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, securitySignatureValue, "securitySignatureValue of SessionSetupResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of SessionSetupResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGuestAccount, "isGuestAccount of SessionSetupResponse, state S41");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of SessionSetupResponse, state S41");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R105555, MS-SMB_R8380, MS-SMB_R4143, MS-SMB_R" +
                        "4784, MS-SMB_R2193, MS-SMB_R8390, MS-SMB_R2341");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R105555");
            this.Manager.Checkpoint("MS-SMB_R8380");
            this.Manager.Checkpoint("MS-SMB_R4143");
            this.Manager.Checkpoint("MS-SMB_R4784");
            this.Manager.Checkpoint("MS-SMB_R2193");
            this.Manager.Checkpoint("MS-SMB_R8390");
            this.Manager.Checkpoint("MS-SMB_R2341");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S53");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS58() {
            this.Manager.Comment("reaching state \'S58\'");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker1(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S53");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker2(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,InvalidSmb,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.InvalidSmb, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker3(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-SMB_R357, MS-SMB_R10357");
                throw;
            }
            this.Manager.Checkpoint("MS-SMB_R357");
            this.Manager.Checkpoint("MS-SMB_R10357");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker4(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,NetworkSessionExpired,True)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.NetworkSessionExpired, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S53");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4ErrorTreeConnectResponseChecker5(int messageId, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isRS357Implemented) {
            this.Manager.Comment("checking step \'event ErrorTreeConnectResponse(3,StatusBadNetWorkName,False)\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, Microsoft.Protocol.TestSuites.Smb.MessageStatus.StatusBadNetWorkName, messageStatus, "messageStatus of ErrorTreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRS357Implemented, "isRS357Implemented of ErrorTreeConnectResponse, state S53");
        }
        
        private void RequirementCoverage_CopyChunk_AccessDeniedS4TreeConnectResponseChecker(int messageId, int sessionId, int treeId, bool isSecuritySignatureZero, Microsoft.Protocol.TestSuites.Smb.ShareType shareType, Microsoft.Protocol.TestSuites.Smb.MessageStatus messageStatus, bool isSigned, bool isInDfs, bool isSupportExtSignature) {
            this.Manager.Comment("checking step \'event TreeConnectResponse(3,1,1,False,Disk,Success,True,False,True" +
                    ")\'");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, messageId, "messageId of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, sessionId, "sessionId of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, treeId, "treeId of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSecuritySignatureZero, "isSecuritySignatureZero of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.ShareType>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.ShareType)(0)), shareType, "shareType of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocol.TestSuites.Smb.MessageStatus>(this.Manager, ((Microsoft.Protocol.TestSuites.Smb.MessageStatus)(0)), messageStatus, "messageStatus of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSigned, "isSigned of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isInDfs, "isInDfs of TreeConnectResponse, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupportExtSignature, "isSupportExtSignature of TreeConnectResponse, state S53");
        }
        #endregion
    }
}
