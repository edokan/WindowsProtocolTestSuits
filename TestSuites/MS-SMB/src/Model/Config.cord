// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using Microsoft.Modeling;
using Microsoft.Protocol.TestSuites.Smb; 

/// It contains actions of the model, bounds, and switches.
config Main 
{  
    action all ISmbAdapter;
    action all IServerSetupAdapter;    
    
    switch GeneratedTestPath = "..\\TestSuite";   
    switch TestEnabled = false;
    switch StateBound = 10000000;
    switch StepBound =10000000;
    switch StepsPerStateBound = 10000000;
    switch StackDepth = 1000000;
    switch TestClassBase = "ptf";
    switch PathDepthBound = 10000000;
    switch QuiescenceTimeout = 10000000;
    switch DefaultParameterExpansionLimit = 1000000000;
}


// Win7-Win2K8R2.
machine SET_QUERY_FILEModelProgram_Win7_Win2K8R2() : Main 
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in 
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt", "NewName.txt",@"Dir1\Test1.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}


machine SET_QUERY_FILE_Win7_Win2K8R2() : Main 
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    (
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
    )
    |
    (
      ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _);
      ServerSetupResponse;
      CreatePipeAndMailslot;
      NegotiateRequest;
      NegotiateResponse;
      (
      SessionSetupRequest;
      (
          (
          ErrorResponse;
          )
          |
          (
          SessionSetupResponse;
          TreeConnectRequest;
          (    
              (
              ErrorTreeConnectResponse;
              SessionClose*;
              ); 
              |
              (
              TreeConnectResponse;
              CreateRequest;
              (
                  (
                  ErrorResponse; 
                  SessionClose*;
                  );
                  |
                  (
                  CreateResponse;
                  (
                      Trans2QueryFileInfoRequest(_, _, _, _, _,InformationLevel.SmbQueryFileStreamInfo,_,_);
                      (
                          (
                          ErrorTrans2QueryFileInfoResponse;
                          SessionClose*;
                          );
                          |
                          Trans2QueryFileInfoResponse;
                      );
                  )
                  )
              )
              )
          )
          )
      )
      )*
    )
)
|| SET_QUERY_FILEModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_Win7_Win2K8R2);
}


machine NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8R2() : Main 
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in 
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_Win7_Win2K8R2() : Main 
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_Win7_Win2K8R2);
}


machine NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8R2() : Main 
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in 
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_Win7_Win2K8R2() : Main 
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8R2() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_Win7_Win2K8R2);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8R2() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}

machine NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8R2() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8R2() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8R2);
}


machine SET_QUERY_FILEModelProgram_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine SET_QUERY_FILE_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (            
            (
            TreeConnectResponse;
            CreateRequest;
            (                
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                    );                        
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_InvalidLevel);
}


machine NonExtendSET_QUERY_FILEModelProgram_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                    );                        
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_InvalidLevel);
}


machine NoSignSET_QUERY_FILEModelProgram_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (        
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (            
            (
            TreeConnectResponse;
            CreateRequest;
            (                
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                    );
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_InvalidLevel);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FILE_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                    );
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_InvalidLevel);
}



machine SET_QUERY_FILEModelProgram_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, {InformationLevel.Invalid, InformationLevel.FileRenameInformation}, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}

machine SET_QUERY_FILE_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_NullRoot
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_NullRoot);
}


machine NonExtendSET_QUERY_FILEModelProgram_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, {InformationLevel.Invalid, InformationLevel.FileRenameInformation}, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_NullRoot
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_NullRoot);
}


machine NoSignSET_QUERY_FILEModelProgram_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, {InformationLevel.Invalid, InformationLevel.FileRenameInformation}, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );
                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_NullRoot
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_NullRoot);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, InformationLevel.FileRenameInformation, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FILE_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_NullRoot
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_NullRoot);
}


machine SET_QUERY_FILEModelProgram_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}

machine SET_QUERY_FILE_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_InvalidFileName);
}


machine NonExtendSET_QUERY_FILEModelProgram_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_InvalidFileName);
}


machine NoSignSET_QUERY_FILEModelProgram_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_InvalidFileName);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FILE_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_InvalidFileName);
}


machine SET_QUERY_PATHModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, 
         {InformationLevel.SmbQueryFileStreamInfo, 
          InformationLevel.SmbQueryFileEndOfFileInfo, 
          InformationLevel.FileAccessInformation}, 
          {-1, 1}) in
    construct model program from Main 
}


machine SET_QUERY_PATH_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                    Trans2SetPathInfoRequest;
                    (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            Trans2SetPathInfoResponse;    
                    )
                    )
                    |
                    (                
                    Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                    )
                )
                )
            )
            )
        )
        )
        )
    )*
) 
|| SET_QUERY_PATHModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_PATH_Win7_Win2K8R2);
}


machine NonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_PATH_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.
    (
    NonExtendedSessionSetupRequest;            // Non-extended security.
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;        // Non-extended security.
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                    Trans2SetPathInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        Trans2SetPathInfoResponse;    
                    )
                    )
                    |
                    (                
                        Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
) 
|| NonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_PATH_Win7_Win2K8R2);
}


machine NoSignSET_QUERY_PATHModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}


machine NoSignSET_QUERY_PATH_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                    Trans2SetPathInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        Trans2SetPathInfoResponse;    
                    )
                    )
                    |
                    (                
                        Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                     )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_PATHModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_PATH_Win7_Win2K8R2);
}


machine NoSignNonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_PATH_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.
    (
    NonExtendedSessionSetupRequest;            // Non-extended security.
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;        // Non-extended security.
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                    Trans2SetPathInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        Trans2SetPathInfoResponse;    
                    )
                    )
                    |
                    (                
                    Trans2QueryPathInfoRequest;
                    (
                        (
                        ErrorTrans2QueryPathInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryPathInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
) 
|| NoSignNonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_PATH_Win7_Win2K8R2);
}


machine SET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine SET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                    (
                    Trans2SetFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponse;
                        )
                    )
                    )
                    |
                    (
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
) 
|| SET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FS_Win7_Win2K8R2);
}


machine NonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                    (
                    Trans2SetFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponse;
                        )
                    )
                    )
                    |
                    (
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
) 
|| NonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FS_Win7_Win2K8R2);
}


machine NoSignSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                    (
                    Trans2SetFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponse;
                        )
                    )
                    )
                    |
                    (
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
) 
|| NoSignSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FS_Win7_Win2K8R2);
}


machine NoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                    (
                    Trans2SetFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponse;
                        )
                    )
                    )
                    |
                    (
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
) 
|| NoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FS_Win7_Win2K8R2);
}


machine SET_QUERY_FSModelProgram_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}

machine SET_QUERY_FS_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;                    
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
) 
|| SET_QUERY_FSModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FS_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FS_InvalidLevel);
}


machine NonExtendSET_QUERY_FSModelProgram_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FS_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;                    
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
) 
|| NonExtendSET_QUERY_FSModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_SET_QUERY_FS_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FS_InvalidLevel);
}


machine NoSignSET_QUERY_FSModelProgram_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FS_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;                    
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NoSignSET_QUERY_FSModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FS_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FS_InvalidLevel);
}


machine NoSignNonExtendSET_QUERY_FSModelProgram_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FS_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
) 
|| NoSignNonExtendSET_QUERY_FSModelProgram_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FS_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FS_InvalidLevel);
}


machine AdditionalSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequestAdditional(_, _, _, {0, 1}, _, _, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequestAdditional;
        (
            ErrorResponse
            |
            (
            SessionSetupResponseAdditional;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
) 
|| AdditionalSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalSET_QUERY_FS_Win7_Win2K8R2);
}


machine AdditionalNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, {0, 1}, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalNonExtendSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| AdditionalNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNonExtendSET_QUERY_FS_Win7_Win2K8R2);
}


machine AdditionalNoSignSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, {0, 1}, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalNoSignSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
) 
|| AdditionalNoSignSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignSET_QUERY_FS_Win7_Win2K8R2);
}


machine AdditionalNoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, {0, 1}, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalNoSignNonExtendSET_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| AdditionalNoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignNonExtendSET_QUERY_FS_Win7_Win2K8R2);
}


machine FINDModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}


machine FIND_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse; |
        (
            SessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| FINDModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_FIND_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for FIND_Win7_Win2K8R2);
}


machine NonExtendFINDModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}


machine NonExtendFIND_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse; |
        (
            NonExtendedSessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| NonExtendFINDModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_FIND_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendFIND_Win7_Win2K8R2);
}


machine NoSignFINDModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}


machine NoSignFIND_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (SessionSetupRequest;
    (
        ErrorResponse; |
        (
            SessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| NoSignFINDModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_FIND_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignFIND_Win7_Win2K8R2);
}


machine NoSignNonExtendFINDModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendFIND_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (NonExtendedSessionSetupRequest;
    (
        ErrorResponse; |
        (
            NonExtendedSessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                       (
                                           ErrorResponse;
                                           SessionClose*;
                                       ); |
                                       (
                                           Trans2FindNext2Response;
                                       )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| NoSignNonExtendFINDModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_FIND_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendFIND_Win7_Win2K8R2);
}


machine PrinterModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine Printer_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        SessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| PrinterModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_Printer_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for Printer_Win7_Win2K8R2);
}


machine NonExtendPrinterModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine NonExtendPrinter_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| NonExtendPrinterModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_Printer_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for NonExtendPrinter_Win7_Win2K8R2);
}


machine NoSignPrinterModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine NoSignPrinter_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        SessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| NoSignPrinterModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_Printer_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for NoSignPrinter_Win7_Win2K8R2);
}


machine NoSignNonExtendPrinterModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine NoSignNonExtendPrinter_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| NoSignNonExtendPrinterModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_Printer_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for NoSignNonExtendPrinter_Win7_Win2K8R2);
}


machine CopyChunkModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine CopyChunk_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;                        
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                        ErrorResponse;
                        SessionClose*;
                    )
                    |
                    (
                        CreateResponse;
                        FsctlSrvRequestResumeKeyRequest;
                        (
                            (
                                ErrorResponse;
                                SessionClose*;
                            )
                            |
                            (
                                FsctlSrvRequestResumeKeyResponse;
                                FsctlSrvCopyChunkRequest;
                                (
                                    (
                                        ErrorResponse;
                                        SessionClose*;
                                    )
                                    |
                                    FsctlSrvCopyChunkResponse;
                                )
                            )
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| CopyChunkModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_CopyChunk_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for CopyChunk_Win7_Win2K8R2);
}


machine NonExtendCopyChunkModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine NonExtendCopyChunk_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendCopyChunkModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_CopyChunk_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCopyChunk_Win7_Win2K8R2);
}


machine NoSignCopyChunkModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine NoSignCopyChunk_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignCopyChunkModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_CopyChunk_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCopyChunk_Win7_Win2K8R2);
}


machine NoSignNonExtendCopyChunkModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}

machine NoSignNonExtendCopyChunk_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendCopyChunkModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_CopyChunk_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCopyChunk_Win7_Win2K8R2);
}


machine CopyChunkModelProgram_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}

machine CopyChunk_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;                        
                CreateRequest(_, _, _, 2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| CopyChunkModelProgram_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_CopyChunk_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for CopyChunk_AccessDenied);
}


machine NonExtendCopyChunkModelProgram_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}


machine NonExtendCopyChunk_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, ShareType.Disk, true, false, false, false);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, ShareType.Disk, true, false, false, false);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendCopyChunkModelProgram_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_CopyChunk_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCopyChunk_AccessDenied);
}


machine NoSignCopyChunkModelProgram_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}
machine NoSignCopyChunk_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignCopyChunkModelProgram_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_CopyChunk_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCopyChunk_AccessDenied);
}


machine NoSignNonExtendCopyChunkModelProgram_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}


machine NoSignNonExtendCopyChunk_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _,2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendCopyChunkModelProgram_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_CopyChunk_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCopyChunk_AccessDenied);
}


machine EnumerateSnapshotModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Enabled, true, true, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}


machine EnumerateSnapshot_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*;
)
|| EnumerateSnapshotModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_EnumerateSnapshot_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for EnumerateSnapshot_Win7_Win2K8R2);
}


machine NonExtendEnumerateSnapshotModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Enabled, true, true, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}


machine NonExtendEnumerateSnapshot_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            NonExtendedSessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*;
)
|| NonExtendEnumerateSnapshotModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_EnumerateSnapshot_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendEnumerateSnapshot_Win7_Win2K8R2);
}


machine NoSignEnumerateSnapshotModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Disabled, true, true, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}

machine NoSignEnumerateSnapshot_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*;
)
|| NoSignEnumerateSnapshotModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_EnumerateSnapshot_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignEnumerateSnapshot_Win7_Win2K8R2);
}


machine NoSignNonExtendEnumerateSnapshotModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Disabled, true, true, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}


machine NoSignNonExtendEnumerateSnapshot_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            NonExtendedSessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*;
)
|| NoSignNonExtendEnumerateSnapshotModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_EnumerateSnapshot_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendEnumerateSnapshot_Win7_Win2K8R2);
}


machine QueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}

machine QueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| QueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for QueryQuota_Win7_Win2K8R2);
}


machine NonExtendQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}

machine NonExtendQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendQueryQuota_Win7_Win2K8R2);
}


machine NoSignQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}

machine NoSignQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignQueryQuota_Win7_Win2K8R2);
}


machine NoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}

machine NoSignNonExtendQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendQueryQuota_Win7_Win2K8R2);
}


machine AdditionalQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalQueryQuota_Win7_Win2K8R2);
}


machine AdditionalNonExtendQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalNonExtendQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNonExtendQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalNonExtendRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNonExtendQueryQuota_Win7_Win2K8R2);
}


machine AdditionalNoSignQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalNoSignQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNoSignQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignQueryQuota_Win7_Win2K8R2);
}


machine AdditionalNoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalNoSignNonExtendQueryQuota_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignNonExtendRequirementCoverage_QueryQuota_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignNonExtendQueryQuota_Win7_Win2K8R2);
}


machine Invalid_FSCTL_Command_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, true, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlOplockBreakAcknowledge,
            FsctlInvalidCommand.FsctlOpBatchAckClosePending,
            FsctlInvalidCommand.FsctlOpLockBreakNotify,
            FsctlInvalidCommand.FsctlMoveFile,
            FsctlInvalidCommand.FsctlMarkHandle,
            FsctlInvalidCommand.FsctlQueryRetrievalPointers,
            FsctlInvalidCommand.FsctlPipeAssignEvent,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlRequestFilterOplock,
            FsctlInvalidCommand.FsctlQueryDependentVolume,
            FsctlInvalidCommand.FsctlSdGlobalChange,
            FsctlInvalidCommand.FsctlGetBootAreaInfo,
            FsctlInvalidCommand.FsctlGetRetrievalPointerBase,
            FsctlInvalidCommand.FsctlSetPersistentVolumeState,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
         }) in
    construct model program from Main 
}


machine Invalid_Model_FSCTL_Command_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    ((ErrorResponse;)|
    (
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    FsctlBadCommandRequest;
    ErrorResponse;
    SessionClose*;))
) 
|| Invalid_FSCTL_Command_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for Invalid_Model_FSCTL_Command_Win7_Win2K8R2;
}


machine NonExtendInvalid_FSCTL_Command_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}


machine NonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    ((ErrorResponse;SessionClose*)|
    (
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    FsctlBadCommandRequest;
    ErrorResponse;
    SessionClose*;
    )
    )
) 
|| NonExtendInvalid_FSCTL_Command_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for NonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8R2;
}


machine NoSignInvalid_FSCTL_Command_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlOplockBreakAcknowledge,
            FsctlInvalidCommand.FsctlOpBatchAckClosePending,
            FsctlInvalidCommand.FsctlOpLockBreakNotify,
            FsctlInvalidCommand.FsctlMoveFile,
            FsctlInvalidCommand.FsctlMarkHandle,
            FsctlInvalidCommand.FsctlQueryRetrievalPointers,
            FsctlInvalidCommand.FsctlPipeAssignEvent,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlRequestFilterOplock,
            FsctlInvalidCommand.FsctlQueryDependentVolume,
            FsctlInvalidCommand.FsctlSdGlobalChange,
            FsctlInvalidCommand.FsctlGetBootAreaInfo,
            FsctlInvalidCommand.FsctlGetRetrievalPointerBase,
            FsctlInvalidCommand.FsctlSetPersistentVolumeState,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}


machine NoSignInvalid_Model_FSCTL_Command_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    ((ErrorResponse;)|
    (
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    FsctlBadCommandRequest;
    ErrorResponse;
    SessionClose*;))
) 
|| NoSignInvalid_FSCTL_Command_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for NoSignInvalid_Model_FSCTL_Command_Win7_Win2K8R2;
}


machine NoSignNonExtendInvalid_FSCTL_Command_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}


machine NoSignNonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    ((ErrorResponse;SessionClose*)|
    (
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    FsctlBadCommandRequest;
    ErrorResponse;
    SessionClose*;
    )
    )
) 
|| NoSignNonExtendInvalid_FSCTL_Command_Win7_Win2K8R2
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for NoSignNonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8R2;
}


machine Create_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, 
        {ShareType.Printer, ShareType.NamedPipe, ShareType.CommunicationDevice}, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}


machine Create_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| Create_Win7_Win2K8R2
}


machine RequirementCoverage_Create_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Create_Model_Win7_Win2K8R2);
}


machine NonExtendCreate_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"},
         {ShareType.Printer, ShareType.NamedPipe, ShareType.CommunicationDevice}, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}

machine NonExtendCreate_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| NonExtendCreate_Win7_Win2K8R2
}


machine NonExtendRequirementCoverage_Create_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCreate_Model_Win7_Win2K8R2);
}


machine NoSignCreate_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, 
        {ShareType.Printer, ShareType.NamedPipe, ShareType.CommunicationDevice}, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}


machine NoSignCreate_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| NoSignCreate_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_Create_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCreate_Model_Win7_Win2K8R2);
}


machine NoSignNonExtendCreate_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, 
        {ShareType.Printer, ShareType.NamedPipe, ShareType.CommunicationDevice}, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}

machine NoSignNonExtendCreate_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| NoSignNonExtendCreate_Win7_Win2K8R2
}


machine NoSignNonExtendRequirementCoverage_Create_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCreate_Model_Win7_Win2K8R2);
}


machine Create_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, 4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}

machine Create_Model_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;    
) 
|| Create_InvalidImpersonalLevel
}


machine RequirementCoverage_Create_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Create_Model_InvalidImpersonalLevel);
}


machine NonExtendCreate_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf,4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine NonExtendCreate_Model_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;
) 
|| NonExtendCreate_InvalidImpersonalLevel
}


machine NonExtendRequirementCoverage_Create_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCreate_Model_InvalidImpersonalLevel);
}


machine NoSignCreate_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, 4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine NoSignCreate_Model_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;
) 
|| NoSignCreate_InvalidImpersonalLevel
}


machine NoSignRequirementCoverage_Create_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCreate_Model_InvalidImpersonalLevel);
}


machine NoSignNonExtendCreate_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendCreate_Model_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;
) 
|| NoSignNonExtendCreate_InvalidImpersonalLevel
}


machine NoSignNonExtendRequirementCoverage_Create_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCreate_Model_InvalidImpersonalLevel);
}


machine Read_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    construct model program from Main 
}


machine Read_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| Read_Win7_Win2K8R2
}


machine RequirementCoverage_Read_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Read_Model_Win7_Win2K8R2);
}


machine NonExtendRead_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, _, {"Test1.txt"}, _, _, false, false, true) in
    construct model program from Main 
}


machine NonExtendRead_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| NonExtendRead_Win7_Win2K8R2
}


machine NonExtendRequirementCoverage_Read_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendRead_Model_Win7_Win2K8R2);
}


machine NoSignRead_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, true) in
    construct model program from Main 
}


machine NoSignRead_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| NoSignRead_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_Read_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignRead_Model_Win7_Win2K8R2);
}


machine NoSignNonExtendRead_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, _, {"Test1.txt"}, _, _, false, false, true) in
    construct model program from Main 
}


machine NoSignNonExtendRead_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| NoSignNonExtendRead_Win7_Win2K8R2
}


machine NoSignNonExtendRequirementCoverage_Read_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendRead_Model_Win7_Win2K8R2);
}


machine Write_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine Write_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| Write_Win7_Win2K8R2
}


machine RequirementCoverage_Write_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Write_Model_Win7_Win2K8R2);
}


machine NonExtendWrite_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 2, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine NonExtendWrite_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| NonExtendWrite_Win7_Win2K8R2
}


machine NonExtendRequirementCoverage_Write_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendWrite_Model_Win7_Win2K8R2);
}


machine NoSignWrite_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine NoSignWrite_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| NoSignWrite_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_Write_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignWrite_Model_Win7_Win2K8R2);
}


machine NoSignNonExtendWrite_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 2, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendWrite_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| NoSignNonExtendWrite_Win7_Win2K8R2
}


machine NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendWrite_Model_Win7_Win2K8R2);
}


// Win7-Win2K8.
machine SET_QUERY_FILEModelProgram_Win7_Win2K8() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
          _, _) in
    construct model program from Main 
}


machine SET_QUERY_FILE_Win7_Win2K8() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_Win7_Win2K8);
}


machine NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_Win7_Win2K8() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_Win7_Win2K8);
}


machine NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_Win7_Win2K8() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8
}

// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_Win7_Win2K8);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, _, _, {"ExistTest.txt","NewName.txt"}, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _,
         {InformationLevel.SmbInfoStandard,
         InformationLevel.SmbQueryFileStreamInfo,
         InformationLevel.FileAccessInformation},
         _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;
                        Trans2QueryFileInfoRequest;
                        (
                            (
                            ErrorTrans2QueryFileInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryFileInfoResponse;
                        )
                        )
                    )
                    );
                    |
                    (
                    Trans2QueryFileInfoRequest;
                    (
                        (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                        |
                        Trans2QueryFileInfoResponse;
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8);
}


machine SET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine SET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                    )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_Win7_Win2K8_InvalidLevel);
}


machine NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                    )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidLevel);
}


machine NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}

machine NoSignSET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                    )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_Win7_Win2K8_InvalidLevel);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    bind Trans2QueryFileInfoRequest(_, _, _, _, _, InformationLevel.Invalid, 0, 0) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                CreateResponse;
                Trans2QueryFileInfoRequest;
                (
                    (
                        ErrorTrans2QueryFileInfoResponse;
                        SessionClose*;
                        );
                    )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidLevel() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidLevel);
}


machine SET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, {InformationLevel.Invalid, InformationLevel.FileRenameInformation}, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}


machine SET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_Win7_Win2K8_NullRoot);
}


machine NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, {InformationLevel.Invalid, InformationLevel.FileRenameInformation}, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_Win7_Win2K8_NullRoot);
}


machine NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, {InformationLevel.Invalid, InformationLevel.FileRenameInformation}, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );
                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_Win7_Win2K8_NullRoot);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, _, InformationLevel.FileRenameInformation, _, {"ExistTest.txt","NewName.txt"}, false, _) in
    construct model program from Main 
}

machine NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_NullRoot
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_NullRoot() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8_NullRoot);
}


machine SET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}


machine SET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FILE_Win7_Win2K8_InvalidFileName);
}


machine NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}

machine NonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidFileName);
}


machine NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FILE_Win7_Win2K8_InvalidFileName);
}


machine NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName() : Main  
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in  
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt", @"Dir1\Test1.txt"}, _, _, _, _, _) in
    bind Trans2SetFileInfoRequest(_, _, _, _, _, true, _, _, {@"Dir1\Test1.txt"}, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main  
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        (
        ErrorResponse;
        )
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            ); 
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                (
                    (
                    Trans2SetFileInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFileInfoResponse;                        
                        )
                    )
                    );                    
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_FILEModelProgram_Win7_Win2K8_InvalidFileName
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FILE_Win7_Win2K8_InvalidFileName() : Main where TestEnabled = true 
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FILE_Win7_Win2K8_InvalidFileName);
}


machine SET_QUERY_PATHModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}


machine SET_QUERY_PATH_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                        Trans2SetPathInfoRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            Trans2SetPathInfoResponse;    
                        )
                    )
                    |
                    (                
                        Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| SET_QUERY_PATHModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_PATH_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_PATH_Win7_Win2K8);
}


machine NonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}

machine NonExtendSET_QUERY_PATH_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.
    (
    NonExtendedSessionSetupRequest;            // Non-extended security.
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;        // Non-extended security.
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                        Trans2SetPathInfoRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            Trans2SetPathInfoResponse;    
                        )
                    )
                    |
                    (                
                        Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_PATH_Win7_Win2K8);
}


machine NoSignSET_QUERY_PATHModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}


machine NoSignSET_QUERY_PATH_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                        Trans2SetPathInfoRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            Trans2SetPathInfoResponse;    
                        )
                    )
                    |
                    (                
                        Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignSET_QUERY_PATHModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_PATH_Win7_Win2K8);
}


machine NoSignNonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2SetPathInfoRequest(_, _, _, _, _, true, _, {-1, 1}) in
    bind Trans2QueryPathInfoRequest(_, _, _, _, _, true, {InformationLevel.SmbQueryFileStreamInfo, InformationLevel.SmbQueryFileEndOfFileInfo, InformationLevel.FileAccessInformation}, {-1, 1}) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_PATH_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.
    (
    NonExtendedSessionSetupRequest;            // Non-extended security.
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;        // Non-extended security.
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse; 
                SessionClose*;
                );
                |
                (
                CreateResponse;
                CheckPreviousVersion;
                (
                    (
                        Trans2SetPathInfoRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            Trans2SetPathInfoResponse;    
                        )
                    )
                    |
                    (                
                        Trans2QueryPathInfoRequest;
                        (
                            (
                            ErrorTrans2QueryPathInfoResponse;
                            SessionClose*;
                            );
                            |
                            Trans2QueryPathInfoResponse;
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendSET_QUERY_PATHModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_PATH_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_PATH_Win7_Win2K8);
}


machine SET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}

machine SET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                        (
                            Trans2SetFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2SetFsInfoResponse;
                                )
                            )
                        )
                        |
                        (
                            Trans2QueryFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2QueryFsInfoResponse;
                                )
                            )
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| SET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FS_Win7_Win2K8);
}


machine NonExtendSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                        (
                            Trans2SetFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2SetFsInfoResponse;
                                )
                            )
                        )
                        |
                        (
                            Trans2QueryFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2QueryFsInfoResponse;
                                )
                            )
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NonExtendSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FS_Win7_Win2K8);
}


machine NoSignSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                        (
                            Trans2SetFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2SetFsInfoResponse;
                                )
                            )
                        )
                        |
                        (
                            Trans2QueryFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2QueryFsInfoResponse;
                                )
                            )
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NoSignSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FS_Win7_Win2K8);
}


machine NoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.SmbQueryFsAttributeInfo, InformationLevel.FileFsSizeInformation}, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    (
                        (
                            Trans2SetFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2SetFsInfoResponse;
                                )
                            )
                        )
                        |
                        (
                            Trans2QueryFsInfoRequest;
                            (
                                (
                                ErrorResponse;
                                SessionClose*;
                                );
                                |
                                (
                                Trans2QueryFsInfoResponse;
                                )
                            )
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FS_Win7_Win2K8);
}


machine SET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine SET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;                    
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| SET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_SET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for SET_QUERY_FS_Win7_Win2K8_InvalidLevel);
}


machine NonExtendSET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine NonExtendSET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;                    
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NonExtendSET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendSET_QUERY_FS_Win7_Win2K8_InvalidLevel);
}


machine NoSignSET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine NoSignSET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;                    
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NoSignSET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_SET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignSET_QUERY_FS_Win7_Win2K8_InvalidLevel);
}


machine NoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2QueryFsInfoRequest(_, _, _, _, _, {InformationLevel.Invalid}, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendSET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2QueryFsInfoRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2QueryFsInfoResponse;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| NoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8_InvalidLevel
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8_InvalidLevel() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendSET_QUERY_FS_Win7_Win2K8_InvalidLevel);
}


machine AdditionalSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequestAdditional(_, _, _, {0, 1}, _, _, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequestAdditional;
        (
            ErrorResponse
            |
            (
            SessionSetupResponseAdditional;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| AdditionalSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalSET_QUERY_FS_Win7_Win2K8);
}


machine AdditionalNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, {0, 1}, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalNonExtendSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| AdditionalNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNonExtendSET_QUERY_FS_Win7_Win2K8);
}


machine AdditionalNoSignSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, {0, 1}, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalNoSignSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            ErrorResponse;
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| AdditionalNoSignSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignSET_QUERY_FS_Win7_Win2K8);
}


machine AdditionalNoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, {0, 1}, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, false, false, _) in
    bind Trans2SetFsInfoRequestAdditional(_, _, _, _, _, _,
         {Trans2SetFsInfoResponseParameter.Valid, 
         Trans2SetFsInfoResponseParameter.AccessDenied,
         Trans2SetFsInfoResponseParameter.FileIdErrror}) in
    construct model program from Main 
}


machine AdditionalNoSignNonExtendSET_QUERY_FS_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;            // Non-extended security.    
    (
        NonExtendedSessionSetupRequest;            // Non-extended security.
        (
            ErrorResponse;
            |
            (
            NonExtendedSessionSetupResponse;        // Non-extended security.
            TreeConnectRequest;
            (    
                (
                ErrorTreeConnectResponse;
                SessionClose*;
                );
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    );
                    |
                    (
                    CreateResponse;
                    Trans2SetFsInfoRequestAdditional;
                    (
                        (
                        ErrorTrans2SetFsInfoResponseAdditional;
                        SessionClose*;
                        );
                        |
                        (
                        Trans2SetFsInfoResponseAdditional;
                        )
                    )
                    )
                )
                )
            )
            )
        )
    )*
)
|| AdditionalNoSignNonExtendSET_QUERY_FSModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignNonExtendRequirementCoverage_SET_QUERY_FS_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignNonExtendSET_QUERY_FS_Win7_Win2K8);
}


machine FINDModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}

machine FIND_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse; |
        (
            SessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| FINDModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_FIND_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for FIND_Win7_Win2K8);
}


machine NonExtendFINDModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in 
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}

machine NonExtendFIND_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse; |
        (
            NonExtendedSessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| NonExtendFINDModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_FIND_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendFIND_Win7_Win2K8);
}


machine NoSignFINDModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in 
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}


machine NoSignFIND_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (SessionSetupRequest;
    (
        ErrorResponse; |
        (
            SessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| NoSignFINDModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_FIND_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignFIND_Win7_Win2K8);
}


machine NoSignNonExtendFINDModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(FileSystemType.Ntfs, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 3, {"ExistTest.txt"}, _, _, false, false, _) in 
    bind Trans2FindFirst2Request(_, _, _, _, true, _, _, _, _) in
    bind Trans2FindNext2Request(_, _, _, _, true, _, _, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendFIND_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (NonExtendedSessionSetupRequest;
    (
        ErrorResponse; |
        (
            NonExtendedSessionSetupResponse;
             TreeConnectRequest;
            (    
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                ); |
                (
                    TreeConnectResponse;
                    CreateRequest;
                    (
                        (
                            ErrorResponse; 
                            SessionClose*;
                        );|
                        (
                            CreateResponse;
                            CheckPreviousVersion;
                            Trans2FindFirst2Request;
                            (
                                (
                                    ErrorResponse;
                                    SessionClose*;
                                ); |
                                (
                                    Trans2FindFirst2Response;
                                    Trans2FindNext2Request;
                                    (
                                        (
                                            ErrorResponse;
                                            SessionClose*;
                                        ); |
                                        (
                                            Trans2FindNext2Response;
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    )*
)
|| NoSignNonExtendFINDModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_FIND_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendFIND_Win7_Win2K8);
}


machine PrinterModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}

machine Printer_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        SessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| PrinterModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_Printer_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for
 (construct requirement coverage where Strategy = "selective" for Printer_Win7_Win2K8);
}


machine NonExtendPrinterModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine NonExtendPrinter_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| NonExtendPrinterModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_Printer_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for NonExtendPrinter_Win7_Win2K8);
}


machine NoSignPrinterModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine NoSignPrinter_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        SessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| NoSignPrinterModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_Printer_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for NoSignPrinter_Win7_Win2K8);
}


machine NoSignNonExtendPrinterModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
    construct model program from Main 
}


machine NoSignNonExtendPrinter_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
    )*
)
|| NoSignNonExtendPrinterModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_Printer_Win7_Win2K8() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for 
 (construct requirement coverage where Strategy = "selective" for NoSignNonExtendPrinter_Win7_Win2K8);
}


machine CopyChunkModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine CopyChunk_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;                        
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| CopyChunkModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_CopyChunk_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for CopyChunk_Win7_Win2K8);
}


machine NonExtendCopyChunkModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine NonExtendCopyChunk_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendCopyChunkModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_CopyChunk_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCopyChunk_Win7_Win2K8);
}


machine NoSignCopyChunkModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine NoSignCopyChunk_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignCopyChunkModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_CopyChunk_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCopyChunk_Win7_Win2K8);
}


machine NoSignNonExtendCopyChunkModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvCopyChunkRequest(_, _, _, _, _, _, 2, 4, _) in
    construct model program from Main
}


machine NoSignNonExtendCopyChunk_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendCopyChunkModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_CopyChunk_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCopyChunk_Win7_Win2K8);
}


machine CopyChunkModelProgram_Win7_Win2K8_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}


machine CopyChunk_Win7_Win2K8_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;                        
                CreateRequest(_, _, _, 2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| CopyChunkModelProgram_Win7_Win2K8_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_CopyChunk_Win7_Win2K8_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for CopyChunk_Win7_Win2K8_AccessDenied);
}


machine NonExtendCopyChunkModelProgram_Win7_Win2K8_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}

machine NonExtendCopyChunk_Win7_Win2K8_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, ShareType.Disk, true, false, false, false);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, ShareType.Disk, true, false, false, false);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
                )
            )
        )
        )
    )
    )*
)
|| NonExtendCopyChunkModelProgram_Win7_Win2K8_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_CopyChunk_Win7_Win2K8_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCopyChunk_Win7_Win2K8_AccessDenied);
}


machine NoSignCopyChunkModelProgram_Win7_Win2K8_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}


machine NoSignCopyChunk_Win7_Win2K8_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _, 2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignCopyChunkModelProgram_Win7_Win2K8_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_CopyChunk_Win7_Win2K8_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCopyChunk_Win7_Win2K8_AccessDenied);
}


machine NoSignNonExtendCopyChunkModelProgram_Win7_Win2K8_AccessDenied() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt", "Test2.txt"}, _, _, _, _, _) in
    bind FsctlSrvRequestResumeKeyRequest(_, _, _, true, 1) in
    bind FsctlSrvCopyChunkRequest(_, _, _, true, 0, "Key1", 2, 4, 0) in
    construct model program from Main
}


machine NoSignNonExtendCopyChunk_Win7_Win2K8_AccessDenied() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            )
            |
            (
            TreeConnectResponse;
            CreateRequest(_, _, _, 1, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _);
            (
                (
                ErrorResponse; 
                SessionClose*;
                )
                |
                (
                CreateResponse;
                CreateRequest(_, _, _,2, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _, _, _, _);
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    FsctlSrvRequestResumeKeyRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvRequestResumeKeyResponse;
                        FsctlSrvCopyChunkRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            )
                            |
                            FsctlSrvCopyChunkResponse;
                        )
                        )
                    )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendCopyChunkModelProgram_Win7_Win2K8_AccessDenied
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_CopyChunk_Win7_Win2K8_AccessDenied() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCopyChunk_Win7_Win2K8_AccessDenied);
}


machine EnumerateSnapshotModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Enabled, true, true, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}


machine EnumerateSnapshot_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (                        
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*
)
|| EnumerateSnapshotModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_EnumerateSnapshot_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for EnumerateSnapshot_Win7_Win2K8);
}


machine NonExtendEnumerateSnapshotModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Enabled, true, true, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}


machine NonExtendEnumerateSnapshot_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            NonExtendedSessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*;
)
|| NonExtendEnumerateSnapshotModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendedRequirementCoverage_EnumerateSnapshot_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendEnumerateSnapshot_Win7_Win2K8);
}


machine NoSignEnumerateSnapshotModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Disabled, true, true, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}


machine NoSignEnumerateSnapshot_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
        SessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            SessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*
)
|| NoSignEnumerateSnapshotModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_EnumerateSnapshot_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignEnumerateSnapshot_Win7_Win2K8);
}


machine NoSignNonExtendEnumerateSnapshotModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Disabled, true, true, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, {1,3}, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _, false, false, _) in
    construct model program from Main
}
machine NoSignNonExtendEnumerateSnapshot_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
        NonExtendedSessionSetupRequest;
        (
            (
            ErrorResponse;
            SessionClose*;
            )
            |
            (
            NonExtendedSessionSetupResponse;
            TreeConnectRequest;
            (
                (
                    ErrorTreeConnectResponse;
                    SessionClose*;
                )
                |
                (
                TreeConnectResponse;
                CreateRequest;
                (
                    (
                    ErrorResponse;
                    SessionClose*;
                    )
                    |
                    (
                    CreateResponse;
                    CheckSnapshots;
                    FsctlSrvEnumSnapshotsRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        )
                        |
                        (
                        FsctlSrvEnumSnapshotsResponse;
                        )
                    )
                    )
                )
                )            
            )
            )
        )
    )*
)
|| NoSignNonExtendEnumerateSnapshotModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_EnumerateSnapshot_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendEnumerateSnapshot_Win7_Win2K8);
}


machine QueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}


machine QueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| QueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for QueryQuota_Win7_Win2K8);
}


machine NonExtendQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}


machine NonExtendQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NonExtendQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendQueryQuota_Win7_Win2K8);
}


machine NoSignQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}


machine NoSignQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignQueryQuota_Win7_Win2K8);
}


machine NoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    construct model program from Main
}


machine NoSignNonExtendQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequest;
                    (
                        (
                        ErrorResponse; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponse;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| NoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendQueryQuota_Win7_Win2K8);
}


machine AdditionalQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    (
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
)*
)
|| AdditionalQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalQueryQuota_Win7_Win2K8);
}


machine AdditionalNonExtendQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalNonExtendQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNonExtendQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNonExtendRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNonExtendQueryQuota_Win7_Win2K8);
}


machine AdditionalNoSignQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, _) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalNoSignQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
(
    SessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        SessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNoSignQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignQueryQuota_Win7_Win2K8);
}


machine AdditionalNoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, _) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share2"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequest(_, _, _, _, _, 1) in
    bind NtTransQueryQuotaRequest(_, _, _, _, _, _, _, 0, 0, 0) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.Valid, 
         NtTransSetQuotaRequestParameter.AccessDenied,
         NtTransSetQuotaRequestParameter.FileIdErrror,
         NtTransSetQuotaRequestParameter.QuotaInfoError}) in
    construct model program from Main
}


machine AdditionalNoSignNonExtendQueryQuota_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                        |
                        (
                        NtTransSetQuotaResponseAdditional;
                        NtTransQueryQuotaRequest;
                        (
                            (
                            ErrorResponse;
                            SessionClose*;
                            );
                            |
                            (
                            NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                            )
                        )
                        )
                    )
                    |
                    NtTransQueryQuotaRequest;
                    (
                        (
                        ErrorResponse;
                        SessionClose*;
                        );
                        |
                        (
                        NtTransQueryQuotaResponse(_, _, _, _, 0, _);
                        )
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNoSignNonExtendQueryQuotaModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignNonExtendRequirementCoverage_QueryQuota_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignNonExtendQueryQuota_Win7_Win2K8);
}


machine Invalid_FSCTL_Command_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, true, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlOplockBreakAcknowledge,
            FsctlInvalidCommand.FsctlOpBatchAckClosePending,
            FsctlInvalidCommand.FsctlOpLockBreakNotify,
            FsctlInvalidCommand.FsctlMoveFile,
            FsctlInvalidCommand.FsctlMarkHandle,
            FsctlInvalidCommand.FsctlQueryRetrievalPointers,
            FsctlInvalidCommand.FsctlPipeAssignEvent,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlRequestFilterOplock,
            FsctlInvalidCommand.FsctlQueryDependentVolume,
            FsctlInvalidCommand.FsctlSdGlobalChange,
            FsctlInvalidCommand.FsctlGetBootAreaInfo,
            FsctlInvalidCommand.FsctlGetRetrievalPointerBase,
            FsctlInvalidCommand.FsctlSetPersistentVolumeState,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}


machine Invalid_Model_FSCTL_Command_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    ((ErrorResponse;)|
    (
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    FsctlBadCommandRequest;
    ErrorResponse;
    SessionClose*;))
) 
|| Invalid_FSCTL_Command_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine RequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for Invalid_Model_FSCTL_Command_Win7_Win2K8;
}


machine NonExtendInvalid_FSCTL_Command_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}


machine NonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    ((ErrorResponse;SessionClose*)|
    (
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    FsctlBadCommandRequest;
    ErrorResponse;
    SessionClose*;
    )
    )
) 
|| NonExtendInvalid_FSCTL_Command_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for NonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8;
}


machine NoSignInvalid_FSCTL_Command_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlOplockBreakAcknowledge,
            FsctlInvalidCommand.FsctlOpBatchAckClosePending,
            FsctlInvalidCommand.FsctlOpLockBreakNotify,
            FsctlInvalidCommand.FsctlMoveFile,
            FsctlInvalidCommand.FsctlMarkHandle,
            FsctlInvalidCommand.FsctlQueryRetrievalPointers,
            FsctlInvalidCommand.FsctlPipeAssignEvent,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlRequestFilterOplock,
            FsctlInvalidCommand.FsctlQueryDependentVolume,
            FsctlInvalidCommand.FsctlSdGlobalChange,
            FsctlInvalidCommand.FsctlGetBootAreaInfo,
            FsctlInvalidCommand.FsctlGetRetrievalPointerBase,
            FsctlInvalidCommand.FsctlSetPersistentVolumeState,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}


machine NoSignInvalid_Model_FSCTL_Command_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    (
    (ErrorResponse;)|
    (
        NegotiateResponse;
        SessionSetupRequest;
        SessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
        CreateRequest;
        CreateResponse;
        FsctlBadCommandRequest;
        ErrorResponse;
        SessionClose*;
    )
    )
) 
|| NoSignInvalid_FSCTL_Command_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for NoSignInvalid_Model_FSCTL_Command_Win7_Win2K8;
}


machine NoSignNonExtendInvalid_FSCTL_Command_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind FsctlBadCommandRequest(_, _, _, _, _,
        {
            FsctlInvalidCommand.FsctlRequestOplockLevle1,
            FsctlInvalidCommand.FsctlRequestOplockLevel2,
            FsctlInvalidCommand.FsctlRequestBatchOplock,
            FsctlInvalidCommand.FsctlQueryPersistentVolumeState,
            FsctlInvalidCommand.FsctlRequestOpLock,
            FsctlInvalidCommand.FsctlTxFsModifyRm,
            FsctlInvalidCommand.FsctlTxfsQueryRmInformation,
            FsctlInvalidCommand.FsctlTxFsRollForwardRedo,
            FsctlInvalidCommand.FsctlTxFsRollForwardUndo
        }) in
    construct model program from Main 
}

machine NoSignNonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    (
    (ErrorResponse;SessionClose*)|
    (
        NonExtendedNegotiateResponse;
        NonExtendedSessionSetupRequest;
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        TreeConnectResponse;
        CreateRequest;
        CreateResponse;
        FsctlBadCommandRequest;
        ErrorResponse;
        SessionClose*;
    )
    )
) 
|| NoSignNonExtendInvalid_FSCTL_Command_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine NoSignNonExtendRequirementCoverage_Invalid_FSCTL_Command_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for NoSignNonExtendInvalid_Model_FSCTL_Command_Win7_Win2K8;
}


machine Create_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, {1,2,3}, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}


machine Create_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| Create_Win7_Win2K8
}


machine RequirementCoverage_Create_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Create_Model_Win7_Win2K8);
}


machine NonExtendCreate_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, {1,2,3}, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}


machine NonExtendCreate_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| NonExtendCreate_Win7_Win2K8
}


machine NonExtendRequirementCoverage_Create_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCreate_Model_Win7_Win2K8);
}


machine NoSignCreate_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, {1,2,3}, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}


machine NoSignCreate_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| NoSignCreate_Win7_Win2K8
}


machine NoSignRequirementCoverage_Create_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCreate_Model_Win7_Win2K8);
}


machine NoSignNonExtendCreate_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, {1,2,3}, {"Test1.txt", "Test2.txt", "ExistTest.txt", @"Dir1\Test1.txt","Pipe1"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 3, _, _, _) in
    construct model program from Main 
}

machine NoSignNonExtendCreate_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (
        (
            CreateRequest;
            (CreateResponse|(ErrorResponse;SessionClose*));
        )
        |
        (
            NtTransactCreateRequest;
            (NtTransactCreateResponse|(ErrorResponse;SessionClose*));
        )
    )
) 
|| NoSignNonExtendCreate_Win7_Win2K8
}


machine NoSignNonExtendRequirementCoverage_Create_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCreate_Model_Win7_Win2K8);
}


machine Create_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, 4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine Create_Model_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;    
) 
|| Create_Win7_Win2K8_InvalidImpersonalLevel
}


machine RequirementCoverage_Create_Win7_Win2K8_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Create_Model_Win7_Win2K8_InvalidImpersonalLevel);
}


machine NonExtendCreate_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf,4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine NonExtendCreate_Model_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;
) 
|| NonExtendCreate_Win7_Win2K8_InvalidImpersonalLevel
}


machine NonExtendRequirementCoverage_Create_Win7_Win2K8_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendCreate_Model_Win7_Win2K8_InvalidImpersonalLevel);
}


machine NoSignCreate_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3,CreateDisposition.FileOpenIf, 4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine NoSignCreate_Model_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;
) 
|| NoSignCreate_Win7_Win2K8_InvalidImpersonalLevel
}


machine NoSignRequirementCoverage_Create_Win7_Win2K8_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCreate_Model_Win7_Win2K8_InvalidImpersonalLevel);
}


machine NoSignNonExtendCreate_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 4, {"Test1.txt"}, _, _, _, _, _) in
    bind NtTransactCreateRequest(_, _, _, 4, _, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendCreate_Model_Win7_Win2K8_InvalidImpersonalLevel() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    (CreateRequest|NtTransactCreateRequest);
    ErrorResponse;
    SessionClose*;
) 
|| NoSignNonExtendCreate_Win7_Win2K8_InvalidImpersonalLevel
}


machine NoSignNonExtendRequirementCoverage_Create_Win7_Win2K8_InvalidImpersonalLevel() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendCreate_Model_Win7_Win2K8_InvalidImpersonalLevel);
}


machine Read_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    construct model program from Main 
}


machine Read_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan});
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| Read_Win7_Win2K8
}


machine RequirementCoverage_Read_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Read_Model_Win7_Win2K8);
}


machine NonExtendRead_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, _, {"Test1.txt"}, _, _, false, false, true) in
    construct model program from Main 
}


machine NonExtendRead_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| NonExtendRead_Win7_Win2K8
}


machine NonExtendRequirementCoverage_Read_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendRead_Model_Win7_Win2K8);
}


machine NoSignRead_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, true) in
    construct model program from Main 
}


machine NoSignRead_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| NoSignRead_Win7_Win2K8
}


machine NoSignRequirementCoverage_Read_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignRead_Model_Win7_Win2K8);
}


machine NoSignNonExtendRead_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, _, {"Test1.txt"}, _, _, false, false, true) in
    construct model program from Main 
}


machine NoSignNonExtendRead_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    WriteResponse;
    ReadRequest;
    (ReadResponse|(ErrorResponse;SessionClose*));
) 
|| NoSignNonExtendRead_Win7_Win2K8
}


machine NoSignNonExtendRequirementCoverage_Read_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendRead_Model_Win7_Win2K8);
}


machine Write_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine Write_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| Write_Win7_Win2K8
}


machine RequirementCoverage_Write_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for Write_Model_Win7_Win2K8);
}


machine NonExtendWrite_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Required, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, _, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine NonExtendWrite_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| NonExtendWrite_Win7_Win2K8
}


machine NonExtendRequirementCoverage_Write_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NonExtendWrite_Model_Win7_Win2K8);
}


machine NoSignWrite_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine NoSignWrite_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| NoSignWrite_Win7_Win2K8
}


machine NoSignRequirementCoverage_Write_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignWrite_Model_Win7_Win2K8);
}


machine NoSignNonExtendWrite_Win7_Win2K8() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8}) in
    bind ServerSetup(_, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, _, {"Test1.txt"}, _, _, _, _, _) in
    construct model program from Main 
}


machine NoSignNonExtendWrite_Model_Win7_Win2K8() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    NonExtendedSessionSetupRequest;
    NonExtendedSessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    WriteRequest;
    (WriteResponse|(ErrorWriteResponse;SessionClose*));
) 
|| NoSignNonExtendWrite_Win7_Win2K8
}


machine NoSignNonExtendRequirementCoverage_Write_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignNonExtendWrite_Model_Win7_Win2K8);
}


machine NoSignCreateNewfolderTraditional_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_,1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 0, {"Dir1"}, ShareType.Disk, _, false, true, true) in
    construct model program from Main 
}


machine NoSignCreateNewfolderTraditional_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
) 
|| NoSignCreateNewfolderTraditional_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_CreateNewfolderTraditional_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignCreateNewfolderTraditional_Model_Win7_Win2K8R2);
}


machine NoSignMultipleSessionsetupTripTraditional_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    construct model program from Main 
}


machine NoSignMultipleSessionsetupTripTraditional_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
) 
|| NoSignMultipleSessionsetupTripTraditional_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_MultipleSessionsetupTripTraditional_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignMultipleSessionsetupTripTraditional_Model_Win7_Win2K8R2);
}


machine NoSignInvalidTokenTraditional_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_,1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 0, {"Dir1"}, ShareType.Disk, _, false, true, true) in
    bind Trans2FindFirst2RequestInvalidDirectoryToken(_, _, _, _, true,InformationLevel.SmbInfoStandard, _, true, true) in
    bind Trans2FindFirst2RequestInvalidFileToken(_, _, _, _, true,InformationLevel.SmbInfoStandard, _, true, true) in
    construct model program from Main 
}


machine NoSignInvalidTokenTraditional_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    CreateRequest;
    CreateResponse;
    (
    Trans2FindFirst2RequestInvalidDirectoryToken|
    Trans2FindFirst2RequestInvalidFileToken
    );
    ErrorResponse;
    SessionClose*;
) 
|| NoSignInvalidTokenTraditional_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_InvalidTokenTraditional_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignInvalidTokenTraditional_Model_Win7_Win2K8R2);
}


machine NoSignMultipleTreeTraditional_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_,1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    bind TreeMultipleConnectRequest(_,1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    construct model program from Main 
}


machine NoSignMultipleTreeTraditional_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupRequest;
    SessionSetupResponse;
    TreeConnectRequest;
    TreeConnectResponse;
    TreeMultipleConnectRequest;
    TreeConnectResponse;
    {.ModelHelper.CaptureRequirement(8565,"[In Connecting to the Share (Tree Connect)]<88> Section 3.2.4.2.5: Windows-based servers establish a new tree connectfor each session even if the target share is the same.");.}:
    SessionClose*;
) 
|| NoSignMultipleTreeTraditional_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_MultipleTreeTraditional_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignMultipleTreeTraditional_Model_Win7_Win2K8R2);
}


machine NoSignUnicodeNotUseTraditional_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
    bind ServerSetup(FileSystemType.Fat, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Disabled, Sequence<Dialect>{Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind SessionSetupNonUnicodeRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_,1, _, true, true, {"Share1"}, {ShareType.Disk}, _) in
    construct model program from Main 
}


machine NoSignUnicodeNotUseTraditional_Model_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NegotiateResponse;
    SessionSetupNonUnicodeRequest;
    SessionSetupResponse; 
) 
|| NoSignUnicodeNotUseTraditional_Win7_Win2K8R2
}


machine NoSignRequirementCoverage_UnicodeNotUseTraditional_Win7_Win2K8R2() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for NoSignUnicodeNotUseTraditional_Model_Win7_Win2K8R2);
}


machine Tree_Connect_Andx_Disconnect_TID_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup(FileSystemType.Fat, SignState.Enabled, true, _, _) in
    bind NegotiateRequest(_, true, SignState.Required, Sequence<Dialect>
      {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
      bind SessionSetupRequest(AccountType.Admin, _, _, 0, _, _, _, _, _) in
      bind TreeConnectRequest(_, 1, _, _, true, {"PrinterShare1"}, {ShareType.Printer}, _) in
      bind CreateRequest(_, _, _, _, CreateDisposition.FileCreate, 1, {"Printer1"}, _, _, false, false, _) in
      construct model program from Main
      }

      machine Tree_Connect_Andx_Disconnect_TID_Model_Win7_Win2K8R2() : Main
      {
      (
      SmbConnectionRequest;
      SmbConnectionResponse;
      ServerSetup;
      ServerSetupResponse;
      CreatePipeAndMailslot;
      NegotiateRequest;
      NegotiateResponse;
      SessionSetupRequest;
      SessionSetupResponse;
      TreeConnectRequest;
      ErrorTreeConnectResponse;
      SessionClose*;
      )
      || Tree_Connect_Andx_Disconnect_TID_Win7_Win2K8R2
}

machine Tree_Connect_Andx_Disconnect_TID_TestCase_Win7_Win2K8R2() : Main where TestEnabled = true
{
      construct test cases where Strategy = "longtests", AllowUndeterminedCoverage = true for (construct requirement coverage where Strategy = "selective" for Tree_Connect_Andx_Disconnect_TID_Model_Win7_Win2K8R2);
}

machine AdditionalNoSignNonExtendSetQuotaAccessDeniedModelProgram_Win7_Win2K8R2() : Main
{
    bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8R2) in
    bind ServerSetup({FileSystemType.Ntfs}, SignState.Disabled, true, _, _) in
    bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect>
      {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
      bind NonExtendedSessionSetupRequest(AccountType.Guest, _, _, 0, _, _, _, _, _) in
      bind TreeConnectRequest(_, 1, _, true, true, {"QuotaShare"}, {ShareType.Disk}, _) in
      bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
      bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
      {NtTransSetQuotaRequestParameter.AccessDenied}) in
      construct model program from Main
      }


      machine AdditionalNoSignNonExtendSetQuotaAccessDenied_Win7_Win2K8R2() : Main
      {
      {.
      Parameter.isSetQuotaAccessDenied = true;
      .}:
      (
      SmbConnectionRequest;
      SmbConnectionResponse;
      ServerSetup;
      ServerSetupResponse;
      CreatePipeAndMailslot;
      NegotiateRequest;
      NonExtendedNegotiateResponse;
      (
      NonExtendedSessionSetupRequest;
      (
      ErrorResponse;
      |
      (
      NonExtendedSessionSetupResponse;
      TreeConnectRequest;
      (
      (
      ErrorTreeConnectResponse;
      SessionClose*;
      );
      |
      (
      TreeConnectResponse;
      CreateRequest;
      (
      (
      ErrorResponse;
      SessionClose*;
      )
      |
      (
      CreateResponse;
      (
      NtTransSetQuotaRequestAdditional;
      (
      (
      ErrorNtTransSetQuotaResponseAdditional;
      SessionClose*;
      );
      )
      )
      )
      )
      )
      )
      )
      )
      )*
      )
      || AdditionalNoSignNonExtendSetQuotaAccessDeniedModelProgram_Win7_Win2K8R2
      }


      // Generate the test case using requirement coverage machine.
      machine AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8R2() : Main where TestEnabled = true
      {
      construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignNonExtendSetQuotaAccessDenied_Win7_Win2K8R2);
      }

      machine AdditionalNoSignNonExtendSetQuotaAccessDeniedModelProgram_Win7_Win2K8() : Main
      {
      bind SmbConnectionResponse(Platform.Win7, Platform.Win2K8) in
      bind ServerSetup({FileSystemType.Ntfs}, SignState.Disabled, true, _, _) in
      bind NegotiateRequest(_, false, SignState.Disabled, Sequence<Dialect> {Dialect.PcNet1, Dialect.LanMan10, Dialect.Wfw10, Dialect.LanMan12, Dialect.LanMan21, Dialect.NtLanMan}) in
    bind NonExtendedSessionSetupRequest(AccountType.Guest, _, _, 0, _, _, _, _, _) in
    bind TreeConnectRequest(_, 1, _, true, true, {"QuotaShare"}, {ShareType.Disk}, _) in
    bind CreateRequest(_, _, _, _, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _, false, false, _) in
    bind NtTransSetQuotaRequestAdditional(_, _, _, _, _,
         {NtTransSetQuotaRequestParameter.AccessDenied}) in
    construct model program from Main
}


machine AdditionalNoSignNonExtendSetQuotaAccessDenied_Win7_Win2K8() : Main
{
      {.
      Parameter.isSetQuotaAccessDenied = true;
      .}:
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    NonExtendedNegotiateResponse;
    (
    NonExtendedSessionSetupRequest;
    (
        ErrorResponse;
        |
        (
        NonExtendedSessionSetupResponse;
        TreeConnectRequest;
        (    
            (
            ErrorTreeConnectResponse;
            SessionClose*;
            );
            |
            (
            TreeConnectResponse;
            CreateRequest;
            (
                (
                ErrorResponse;
                SessionClose*;
                )
                |
                (
                CreateResponse;
                (
                    NtTransSetQuotaRequestAdditional;
                    (
                        (
                        ErrorNtTransSetQuotaResponseAdditional; 
                        SessionClose*;
                        );
                    )
                )
                )
            )
            )
        )
        )
    )
    )*
)
|| AdditionalNoSignNonExtendSetQuotaAccessDeniedModelProgram_Win7_Win2K8
}


// Generate the test case using requirement coverage machine.
machine AdditionalNoSignNonExtendRequirementCoverage_SetQuotaAccessDenied_Win7_Win2K8() : Main where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for AdditionalNoSignNonExtendSetQuotaAccessDenied_Win7_Win2K8);
}

machine FSCC_FSCTLNameModelProgram_Win7_Win2K8R2() : Main
{
bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
bind ServerSetup(FileSystemType.Ntfs, SignState.Required,true,_,_) in
bind NegotiateRequest(_,true, SignState.Required, _) in
bind SessionSetupRequest(AccountType.Admin,_, _, 0, _, _, _, _, _) in
bind TreeConnectRequest(_,1,_,true,true, {"Share1"}, {ShareType.Disk},_) in
bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test1.txt"}, _, _,false, false,_) in
construct model program from Main 
}

machine FSCC_FSCTLName_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    (
       (
       ErrorResponse;
       )|
       (
       NegotiateResponse;
       SessionSetupRequest;
       SessionSetupResponse;
       TreeConnectRequest;
       TreeConnectResponse;
       CreateRequest;
       CreateResponse;
       FSCCFSCTLNameRequest;
       FSCCFSCTLNameResponse;
       )
    )
    //NtTransactIoctlRequest;
    //NtTransactIoctlResponse(_, _, _, _, StatusCode.OK);
) ||
FSCC_FSCTLNameModelProgram_Win7_Win2K8R2
}

// Generate the test case using requirement coverage machine.
machine RequirementCoverage_FSCC_FSCTLName_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for FSCC_FSCTLName_Win7_Win2K8R2);
}


machine FSCC_QUERY_PATHModelProgram_Win7_Win2K8R2() : Main
{
bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled, true,_,_) in
bind NegotiateRequest(_,true, SignState.Required, _) in
bind SessionSetupRequest(AccountType.Admin,_, _, 0, _, _, _, _, _) in
bind TreeConnectRequest(_,1,_,true,true, {"Share1"}, {ShareType.Disk},_) in
bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"ExistTest.txt"}, _, _,false, false,_) in
construct model program from Main 
}

machine FSCC_QUERY_PATH_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    (
       (
       ErrorResponse;
       )|
       (
       NegotiateResponse;
       SessionSetupRequest;
       SessionSetupResponse;
       TreeConnectRequest;
       TreeConnectResponse;
       CreateRequest;
       CreateResponse;
       CheckPreviousVersion;				
       FSCCTrans2QueryPathInfoRequest;
       FSCCTrans2QueryPathInfoResponse;
       )
    )
) ||
FSCC_QUERY_PATHModelProgram_Win7_Win2K8R2
}

// Generate the test case using requirement coverage machine.
machine RequirementCoverage_FSCC_QUERY_PATH_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for FSCC_QUERY_PATH_Win7_Win2K8R2);
}


machine FSCC_QUERY_FSModelProgram_Win7_Win2K8R2() : Main
{
bind SmbConnectionResponse({Platform.Win7}, {Platform.Win2K8R2}) in
bind ServerSetup(FileSystemType.Ntfs, SignState.Enabled,true,_,_) in
bind NegotiateRequest(_,true, SignState.Required, _) in
bind SessionSetupRequest(AccountType.Admin,_, _, 0, _, _, _, _, _) in
bind TreeConnectRequest(_,1,_,true,true, {"Share1"}, {ShareType.Disk},_) in
bind CreateRequest(_, _, _, 3, CreateDisposition.FileOpenIf, 1, {"Test2.txt"}, _, _,false, false,_) in
construct model program from Main 
}

machine FSCC_QUERY_FS_Win7_Win2K8R2() : Main
{
(
    SmbConnectionRequest;
    SmbConnectionResponse;
    ServerSetup;
    ServerSetupResponse;
    CreatePipeAndMailslot;
    NegotiateRequest;
    (
       (
       ErrorResponse;
       )|
       (
       NegotiateResponse;
       SessionSetupRequest;
       SessionSetupResponse;
       TreeConnectRequest;
       TreeConnectResponse;
       CreateRequest;
       CreateResponse;
       FSCCTrans2QueryFSInfoRequest;
       FSCCTrans2QueryFSInfoResponse;
       )
    )
) ||
FSCC_QUERY_FSModelProgram_Win7_Win2K8R2
}

// Generate the test case using requirement coverage machine.
machine RequirementCoverage_FSCC_QUERY_FS_Win7_Win2K8R2() : Main  where TestEnabled = true
{
construct test cases where strategy="longtests", AllowUndeterminedCoverage=true for (construct requirement coverage where Strategy = "selective" for FSCC_QUERY_FS_Win7_Win2K8R2);
}
